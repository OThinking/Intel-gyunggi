
Test02-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  08004c24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08004c24  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1d5  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233b  00000000  00000000  0002f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  000315f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5c  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018601  00000000  00000000  00032fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f55  00000000  00000000  0004b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b9da  00000000  00000000  0005c532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044e0  00000000  00000000  000f7f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000fc3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ac4 	.word	0x08004ac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ac4 	.word	0x08004ac4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__io_putchar>:
int __io_putchar(int c)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, &c, 1, 10);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <__io_putchar+0x20>)
 800058c:	f002 ffa7 	bl	80034de <HAL_UART_Transmit>
  return c;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200001c4 	.word	0x200001c4

080005a0 <myDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myDelay(int ms)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  for(int j=0; j<ms; j++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	e00e      	b.n	80005cc <myDelay+0x2c>
    for(int i=0; i<1000; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	e004      	b.n	80005be <myDelay+0x1e>
      noOperation();
 80005b4:	f000 f813 	bl	80005de <noOperation>
    for(int i=0; i<1000; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005c4:	dbf6      	blt.n	80005b4 <myDelay+0x14>
  for(int j=0; j<ms; j++)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <myDelay+0xe>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <noOperation>:
}
//short dValue[2];
int xValue = -1;
int yValue = -1;
int n = 0;
void noOperation() {}
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) // 1 time
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  int Value = HAL_ADC_GetValue(&hadc1);
 80005f4:	481c      	ldr	r0, [pc, #112]	; (8000668 <HAL_ADC_ConvCpltCallback+0x7c>)
 80005f6:	f000 ff87 	bl	8001508 <HAL_ADC_GetValue>
 80005fa:	4603      	mov	r3, r0
 80005fc:	60fb      	str	r3, [r7, #12]
  if(n == 0){ xValue = Value; n++; }
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_ADC_ConvCpltCallback+0x80>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d108      	bne.n	8000618 <HAL_ADC_ConvCpltCallback+0x2c>
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <HAL_ADC_ConvCpltCallback+0x84>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <HAL_ADC_ConvCpltCallback+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <HAL_ADC_ConvCpltCallback+0x80>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e01b      	b.n	8000650 <HAL_ADC_ConvCpltCallback+0x64>
  else{
    yValue = Value;
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <HAL_ADC_ConvCpltCallback+0x88>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6013      	str	r3, [r2, #0]
    n = 0;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <HAL_ADC_ConvCpltCallback+0x80>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
    printf("(intr)X Value: %d\r\n",xValue);
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_ADC_ConvCpltCallback+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <HAL_ADC_ConvCpltCallback+0x8c>)
 800062c:	f003 fb7c 	bl	8003d28 <iprintf>
    printf("(intr)Y Value: %d\r\n",yValue);
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_ADC_ConvCpltCallback+0x88>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <HAL_ADC_ConvCpltCallback+0x90>)
 8000638:	f003 fb76 	bl	8003d28 <iprintf>
    printf("(intr)Z Value: %d\r\n\n",HAL_GPIO_ReadPin(Zaxis_GPIO_Port, Zaxis_Pin));
 800063c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <HAL_ADC_ConvCpltCallback+0x94>)
 8000642:	f001 ff3b 	bl	80024bc <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	4619      	mov	r1, r3
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <HAL_ADC_ConvCpltCallback+0x98>)
 800064c:	f003 fb6c 	bl	8003d28 <iprintf>
  }
  myDelay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000654:	f7ff ffa4 	bl	80005a0 <myDelay>
  HAL_ADC_Start_IT(&hadc1);
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <HAL_ADC_ConvCpltCallback+0x7c>)
 800065a:	f000 fd87 	bl	800116c <HAL_ADC_Start_IT>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000008c 	.word	0x2000008c
 800066c:	20000208 	.word	0x20000208
 8000670:	20000000 	.word	0x20000000
 8000674:	20000004 	.word	0x20000004
 8000678:	08004adc 	.word	0x08004adc
 800067c:	08004af0 	.word	0x08004af0
 8000680:	40020000 	.word	0x40020000
 8000684:	08004b04 	.word	0x08004b04

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fcb8 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f822 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9d2 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000698:	f000 f9b0 	bl	80009fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800069c:	f000 f984 	bl	80009a8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a0:	f000 f884 	bl	80007ac <MX_ADC1_Init>
  MX_TIM2_Init();
 80006a4:	f000 f8e6 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a8:	f000 f930 	bl	800090c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <main+0x40>)
 80006ae:	f002 fc1f 	bl	8002ef0 <HAL_TIM_Base_Start>
  printf("\033[1J\033[1;1HProgram Restart...\r\n");
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <main+0x44>)
 80006b4:	f003 fb9e 	bl	8003df4 <puts>

//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_ADC_Start_IT(&hadc1);
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <main+0x48>)
 80006ba:	f000 fd57 	bl	800116c <HAL_ADC_Start_IT>
//  HAL_ADC_Start_DMA(&hadc1, (int *)dValue, 2);
  printf("ADC DMA started...\r\n");
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <main+0x4c>)
 80006c0:	f003 fb98 	bl	8003df4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x3c>
 80006c6:	bf00      	nop
 80006c8:	20000134 	.word	0x20000134
 80006cc:	08004b1c 	.word	0x08004b1c
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	08004b3c 	.word	0x08004b3c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fc64 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000752:	2304      	movs	r3, #4
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000756:	2304      	movs	r3, #4
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fede 	bl	8002520 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076a:	f000 f9e3 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f002 f940 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9cd 	bl	8000b34 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC1_Init+0xc0>)
 80007c0:	4a2b      	ldr	r2, [pc, #172]	; (8000870 <MX_ADC1_Init+0xc4>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC1_Init+0xc0>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_ADC1_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC1_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_ADC1_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC1_Init+0xc0>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC1_Init+0xc0>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0xc0>)
 80007ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0xc0>)
 80007f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_ADC1_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0xc0>)
 8000804:	2202      	movs	r2, #2
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_ADC1_Init+0xc0>)
 800080a:	2201      	movs	r2, #1
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_ADC1_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <MX_ADC1_Init+0xc0>)
 8000818:	f000 fc64 	bl	80010e4 <HAL_ADC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000822:	f000 f987 	bl	8000b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000826:	2304      	movs	r3, #4
 8000828:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_ADC1_Init+0xc0>)
 8000838:	f000 fe88 	bl	800154c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000842:	f000 f977 	bl	8000b34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000846:	2308      	movs	r3, #8
 8000848:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_ADC1_Init+0xc0>)
 8000854:	f000 fe7a 	bl	800154c <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800085e:	f000 f969 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000008c 	.word	0x2000008c
 8000870:	40012000 	.word	0x40012000

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM2_Init+0x94>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM2_Init+0x94>)
 800089a:	2253      	movs	r2, #83	; 0x53
 800089c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM2_Init+0x94>)
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295
 80008aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM2_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM2_Init+0x94>)
 80008ba:	f002 fac9 	bl	8002e50 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f936 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM2_Init+0x94>)
 80008d6:	f002 fb65 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f928 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM2_Init+0x94>)
 80008f2:	f002 fd39 	bl	8003368 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f91a 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000134 	.word	0x20000134

0800090c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_TIM3_Init+0x94>)
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <MX_TIM3_Init+0x98>)
 800092c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000930:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000934:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM3_Init+0x94>)
 800093e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000942:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_TIM3_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <MX_TIM3_Init+0x94>)
 8000952:	f002 fa7d 	bl	8002e50 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800095c:	f000 f8ea 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_TIM3_Init+0x94>)
 800096e:	f002 fb19 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 f8dc 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800097c:	2320      	movs	r3, #32
 800097e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_TIM3_Init+0x94>)
 800098a:	f002 fced 	bl	8003368 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000994:	f000 f8ce 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000017c 	.word	0x2000017c
 80009a4:	40000400 	.word	0x40000400

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f002 fd30 	bl	8003444 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f8a3 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001c4 	.word	0x200001c4
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_DMA_Init+0x3c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2038      	movs	r0, #56	; 0x38
 8000a24:	f001 f8a5 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a28:	2038      	movs	r0, #56	; 0x38
 8000a2a:	f001 f8be 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4819      	ldr	r0, [pc, #100]	; (8000b2c <MX_GPIO_Init+0xf0>)
 8000ac8:	f001 fd10 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ae4:	f001 fb66 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <MX_GPIO_Init+0xf0>)
 8000b00:	f001 fb58 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Zaxis_Pin */
  GPIO_InitStruct.Pin = Zaxis_Pin;
 8000b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Zaxis_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0xf0>)
 8000b1a:	f001 fb4b 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 ffec 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <HAL_ADC_MspInit+0x120>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d179      	bne.n	8000ca6 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a37      	ldr	r2, [pc, #220]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HAL_ADC_MspInit+0x124>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c06:	2310      	movs	r3, #16
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <HAL_ADC_MspInit+0x128>)
 8000c1a:	f001 facb 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4822      	ldr	r0, [pc, #136]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c32:	f001 fabf 	bl	80021b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <HAL_ADC_MspInit+0x134>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c7c:	f000 ffb0 	bl	8001be0 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000c86:	f7ff ff55 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2012      	movs	r0, #18
 8000c9c:	f000 ff69 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ca0:	2012      	movs	r0, #18
 8000ca2:	f000 ff82 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40012000 	.word	0x40012000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	200000d4 	.word	0x200000d4
 8000cc4:	40026410 	.word	0x40026410

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd8:	d10e      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cf6:	e012      	b.n	8000d1e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_TIM_Base_MspInit+0x68>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_TIM_Base_MspInit+0x64>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40000400 	.word	0x40000400

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000daa:	f001 fa03 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f948 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <ADC_IRQHandler+0x10>)
 8000e1e:	f000 fa63 	bl	80012e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000008c 	.word	0x2000008c

08000e2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA2_Stream0_IRQHandler+0x10>)
 8000e32:	f000 ff83 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000d4 	.word	0x200000d4

08000e40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
  }

  return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e009      	b.n	8000ea0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb71 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf1      	blt.n	8000e8c <_write+0x12>
  }
  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
  return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f003 f880 	bl	8004050 <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20020000 	.word	0x20020000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	2000020c 	.word	0x2000020c
 8000f84:	20000360 	.word	0x20000360

08000f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff ffd7 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 f83f 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fb53 	bl	8000688 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff0:	08004bb4 	.word	0x08004bb4
  ldr r2, =_sbss
 8000ff4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff8:	20000360 	.word	0x20000360

08000ffc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <DMA1_Stream0_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 fd97 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd84 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fdaf 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 fd77 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000008 	.word	0x20000008
 800109c:	20000010 	.word	0x20000010
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000010 	.word	0x20000010
 80010c8:	20000210 	.word	0x20000210

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000210 	.word	0x20000210

080010e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e033      	b.n	8001162 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fd44 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112a:	f023 0302 	bic.w	r3, r3, #2
 800112e:	f043 0202 	orr.w	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fb3a 	bl	80017b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f023 0303 	bic.w	r3, r3, #3
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
 8001152:	e001      	b.n	8001158 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start_IT+0x1a>
 8001182:	2302      	movs	r3, #2
 8001184:	e0a1      	b.n	80012ca <HAL_ADC_Start_IT+0x15e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d018      	beq.n	80011ce <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ac:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_ADC_Start_IT+0x16c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	; (80012dc <HAL_ADC_Start_IT+0x170>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9a      	lsrs	r2, r3, #18
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d169      	bne.n	80012b0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001206:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800121a:	d106      	bne.n	800122a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f023 0206 	bic.w	r2, r3, #6
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
 8001228:	e002      	b.n	8001230 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_ADC_Start_IT+0x174>)
 800123a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001244:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d129      	bne.n	80012c8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e020      	b.n	80012c8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <HAL_ADC_Start_IT+0x178>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d11b      	bne.n	80012c8 <HAL_ADC_Start_IT+0x15c>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d114      	bne.n	80012c8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e00b      	b.n	80012c8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	40012300 	.word	0x40012300
 80012e4:	40012000 	.word	0x40012000

080012e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d049      	beq.n	80013b2 <HAL_ADC_IRQHandler+0xca>
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d046      	beq.n	80013b2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d12b      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d127      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0220 	bic.w	r2, r2, #32
 800137c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f922 	bl	80005ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0212 	mvn.w	r2, #18
 80013b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d057      	beq.n	8001478 <HAL_ADC_IRQHandler+0x190>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d054      	beq.n	8001478 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d139      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800140c:	2b00      	cmp	r3, #0
 800140e:	d12b      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800141a:	2b00      	cmp	r3, #0
 800141c:	d124      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11d      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001430:	2b00      	cmp	r3, #0
 8001432:	d119      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001442:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa9d 	bl	80019a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f06f 020c 	mvn.w	r2, #12
 8001476:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001486:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d017      	beq.n	80014be <HAL_ADC_IRQHandler+0x1d6>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d014      	beq.n	80014be <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d10d      	bne.n	80014be <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f837 	bl	8001522 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0201 	mvn.w	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014cc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d015      	beq.n	8001500 <HAL_ADC_IRQHandler+0x218>
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d012      	beq.n	8001500 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f06f 0220 	mvn.w	r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f820 	bl	8001536 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f06f 0220 	mvn.w	r2, #32
 80014fe:	601a      	str	r2, [r3, #0]
  }
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1c>
 8001564:	2302      	movs	r3, #2
 8001566:	e113      	b.n	8001790 <HAL_ADC_ConfigChannel+0x244>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d925      	bls.n	80015c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68d9      	ldr	r1, [r3, #12]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	3b1e      	subs	r3, #30
 800158e:	2207      	movs	r2, #7
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43da      	mvns	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d9      	ldr	r1, [r3, #12]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4403      	add	r3, r0
 80015b6:	3b1e      	subs	r3, #30
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e022      	b.n	800160a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	2207      	movs	r2, #7
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4403      	add	r3, r0
 8001600:	409a      	lsls	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b06      	cmp	r3, #6
 8001610:	d824      	bhi.n	800165c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b05      	subs	r3, #5
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b05      	subs	r3, #5
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	e04c      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d824      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b23      	subs	r3, #35	; 0x23
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b23      	subs	r3, #35	; 0x23
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	e023      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b41      	subs	r3, #65	; 0x41
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b41      	subs	r3, #65	; 0x41
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_ADC_ConfigChannel+0x250>)
 80016f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_ADC_ConfigChannel+0x254>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d10f      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d8>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d10b      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_ADC_ConfigChannel+0x254>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12b      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x23a>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_ADC_ConfigChannel+0x258>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d003      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x1f4>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b11      	cmp	r3, #17
 800173e:	d122      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_ADC_ConfigChannel+0x258>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d111      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_ADC_ConfigChannel+0x260>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9a      	lsrs	r2, r3, #18
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	40012000 	.word	0x40012000
 80017a4:	10000012 	.word	0x10000012
 80017a8:	20000008 	.word	0x20000008
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b8:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <ADC_Init+0x1f0>)
 80017ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	021a      	lsls	r2, r3, #8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <ADC_Init+0x1f4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d022      	beq.n	800188e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6899      	ldr	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	e00f      	b.n	80018ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800189c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0202 	bic.w	r2, r2, #2
 80018bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e1b      	ldrb	r3, [r3, #24]
 80018c8:	005a      	lsls	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01b      	beq.n	8001914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	3b01      	subs	r3, #1
 8001908:	035a      	lsls	r2, r3, #13
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e007      	b.n	8001924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	3b01      	subs	r3, #1
 8001940:	051a      	lsls	r2, r3, #20
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6899      	ldr	r1, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001966:	025a      	lsls	r2, r3, #9
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	029a      	lsls	r2, r3, #10
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012300 	.word	0x40012300
 80019a4:	0f000001 	.word	0x0f000001

080019a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fa6e 	bl	80010cc <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e099      	b.n	8001d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fa55 	bl	80010cc <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d908      	bls.n	8001c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e078      	b.n	8001d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_DMA_Init+0x158>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9e9 	bl	80020bc <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9a0 	bl	8002050 <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f010803f 	.word	0xf010803f

08001d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d48:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_DMA_IRQHandler+0x248>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8e      	ldr	r2, [pc, #568]	; (8001f88 <HAL_DMA_IRQHandler+0x24c>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2208      	movs	r2, #8
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01a      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2208      	movs	r2, #8
 8001d96:	409a      	lsls	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2204      	movs	r2, #4
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2204      	movs	r2, #4
 8001e02:	409a      	lsls	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2210      	movs	r2, #16
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d043      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03c      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2210      	movs	r2, #16
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e01f      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0208 	bic.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 808f 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8087 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d136      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0216 	bic.w	r2, r2, #22
 8001ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x1da>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0208 	bic.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	223f      	movs	r2, #63	; 0x3f
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d07e      	beq.n	8002048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
        }
        return;
 8001f52:	e079      	b.n	8002048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d031      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e02c      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e01e      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d032      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3301      	adds	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d307      	bcc.n	8002024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f2      	bne.n	8002008 <HAL_DMA_IRQHandler+0x2cc>
 8002022:	e000      	b.n	8002026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e000      	b.n	800204a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002048:	bf00      	nop
    }
  }
}
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3b10      	subs	r3, #16
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d909      	bls.n	8002092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	1d1a      	adds	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	; 0x58
 8002090:	e007      	b.n	80020a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	aaaaaaab 	.word	0xaaaaaaab
 80020b8:	08004b68 	.word	0x08004b68

080020bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d856      	bhi.n	800218a <DMA_CheckFifoParam+0xce>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <DMA_CheckFifoParam+0x28>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	08002107 	.word	0x08002107
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800218b 	.word	0x0800218b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d046      	beq.n	800218e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002104:	e043      	b.n	800218e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800210e:	d140      	bne.n	8002192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e03d      	b.n	8002192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211e:	d121      	bne.n	8002164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d837      	bhi.n	8002196 <DMA_CheckFifoParam+0xda>
 8002126:	a201      	add	r2, pc, #4	; (adr r2, 800212c <DMA_CheckFifoParam+0x70>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	0800213d 	.word	0x0800213d
 8002130:	08002143 	.word	0x08002143
 8002134:	0800213d 	.word	0x0800213d
 8002138:	08002155 	.word	0x08002155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e030      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d025      	beq.n	800219a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002152:	e022      	b.n	800219a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800215c:	d11f      	bne.n	800219e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002162:	e01c      	b.n	800219e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d903      	bls.n	8002172 <DMA_CheckFifoParam+0xb6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002170:	e018      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      break;
 8002176:	e015      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e00b      	b.n	80021a2 <DMA_CheckFifoParam+0xe6>
      break;
 800218a:	bf00      	nop
 800218c:	e00a      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e008      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e006      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
    }
  } 
  
  return status; 
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e267      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b82      	ldr	r3, [pc, #520]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e242      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd78 	bl	80010cc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fd74 	bl	80010cc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e207      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fd64 	bl	80010cc <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fd60 	bl	80010cc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b51      	ldr	r3, [pc, #324]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c7      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x244>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fd19 	bl	80010cc <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fd15 	bl	80010cc <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a8      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4925      	ldr	r1, [pc, #148]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_OscConfig+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fcf8 	bl	80010cc <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e0:	f7fe fcf4 	bl	80010cc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e187      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x248>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fcd8 	bl	80010cc <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe fcd4 	bl	80010cc <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e167      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x248>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fcc1 	bl	80010cc <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e00e      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fcbd 	bl	80010cc <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ea      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8097 	beq.w	80028b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b74      	ldr	r3, [pc, #464]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a73      	ldr	r2, [pc, #460]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7fe fc7d 	bl	80010cc <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7fe fc79 	bl	80010cc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x2ea>
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a5e      	ldr	r2, [pc, #376]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800282c:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a54      	ldr	r2, [pc, #336]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fc3e 	bl	80010cc <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fc3a 	bl	80010cc <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0cb      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RCC_OscConfig+0x334>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7fe fc28 	bl	80010cc <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fc24 	bl	80010cc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b5      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a1 	beq.w	8002a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d05c      	beq.n	8002984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d141      	bne.n	8002956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe fbf8 	bl	80010cc <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fbf4 	bl	80010cc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	491b      	ldr	r1, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fbcd 	bl	80010cc <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fbc9 	bl	80010cc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e05c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x416>
 8002954:	e054      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fbb6 	bl	80010cc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fbb2 	bl	80010cc <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e045      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x444>
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e038      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	40007000 	.word	0x40007000
 8002998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fae4 	bl	80010cc <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe fae0 	bl	80010cc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fa44 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08004b50 	.word	0x08004b50
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b094      	sub	sp, #80	; 0x50
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
 8002be8:	2300      	movs	r3, #0
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b79      	ldr	r3, [pc, #484]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80e1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e0db      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c14:	e0db      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b73      	ldr	r3, [pc, #460]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b6d      	ldr	r3, [pc, #436]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d063      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4621      	mov	r1, r4
 8002c68:	1a51      	subs	r1, r2, r1
 8002c6a:	6139      	str	r1, [r7, #16]
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	018b      	lsls	r3, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	018a      	lsls	r2, r1, #6
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ebb2 0801 	subs.w	r8, r2, r1
 8002c94:	4659      	mov	r1, fp
 8002c96:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cae:	4690      	mov	r8, r2
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	eb18 0303 	adds.w	r3, r8, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	462b      	mov	r3, r5
 8002cbc:	eb49 0303 	adc.w	r3, r9, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cce:	4629      	mov	r1, r5
 8002cd0:	024b      	lsls	r3, r1, #9
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd8:	4621      	mov	r1, r4
 8002cda:	024a      	lsls	r2, r1, #9
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cec:	f7fd fac8 	bl	8000280 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf8:	e058      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4611      	mov	r1, r2
 8002d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d50:	eb63 050b 	sbc.w	r5, r3, fp
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb45 0303 	adc.w	r3, r5, r3
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	2200      	movs	r2, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da0:	f7fd fa6e 	bl	8000280 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3750      	adds	r7, #80	; 0x50
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	007a1200 	.word	0x007a1200

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08004b60 	.word	0x08004b60

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e2c:	f7ff ffdc 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0b5b      	lsrs	r3, r3, #13
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08004b60 	.word	0x08004b60

08002e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e041      	b.n	8002ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd ff26 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 f950 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e03c      	b.n	8002f82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_TIM_Base_Start+0xa0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d013      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_TIM_Base_Start+0xa4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_TIM_Base_Start+0xa8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_TIM_Base_Start+0xac>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_TIM_Base_Start+0x5c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_TIM_Base_Start+0xb0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d010      	beq.n	8002f80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	e007      	b.n	8002f80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40000c00 	.word	0x40000c00
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0b4      	b.n	800312a <HAL_TIM_ConfigClockSource+0x186>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff8:	d03e      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0xd4>
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffe:	f200 8087 	bhi.w	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	f000 8086 	beq.w	8003116 <HAL_TIM_ConfigClockSource+0x172>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	d87f      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d01a      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xa6>
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d87b      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d050      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x11a>
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d877      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d03c      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xfa>
 8003024:	2b50      	cmp	r3, #80	; 0x50
 8003026:	d873      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d058      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x13a>
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d86f      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d064      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d86b      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d060      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d867      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05c      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d05a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	e062      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f000 f965 	bl	8003328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800306c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
      break;
 8003076:	e04f      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f000 f94e 	bl	8003328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800309a:	609a      	str	r2, [r3, #8]
      break;
 800309c:	e03c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 f8c2 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2150      	movs	r1, #80	; 0x50
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f91b 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 80030bc:	e02c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 f8e1 	bl	8003292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2160      	movs	r1, #96	; 0x60
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f90b 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 80030dc:	e01c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 f8a2 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2140      	movs	r1, #64	; 0x40
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8fb 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e00c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f000 f8f2 	bl	80032f2 <TIM_ITRx_SetConfig>
      break;
 800310e:	e003      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e000      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a34      	ldr	r2, [pc, #208]	; (8003218 <TIM_Base_SetConfig+0xe4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a31      	ldr	r2, [pc, #196]	; (800321c <TIM_Base_SetConfig+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a30      	ldr	r2, [pc, #192]	; (8003220 <TIM_Base_SetConfig+0xec>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x38>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <TIM_Base_SetConfig+0xf0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01b      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <TIM_Base_SetConfig+0xe8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_Base_SetConfig+0xec>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_Base_SetConfig+0xf0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <TIM_Base_SetConfig+0xf4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1e      	ldr	r2, [pc, #120]	; (800322c <TIM_Base_SetConfig+0xf8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <TIM_Base_SetConfig+0xfc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <TIM_Base_SetConfig+0xe4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800

08003234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 030a 	bic.w	r3, r3, #10
 8003270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0210 	bic.w	r2, r3, #16
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	031b      	lsls	r3, r3, #12
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	f043 0307 	orr.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	021a      	lsls	r2, r3, #8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	431a      	orrs	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800337c:	2302      	movs	r3, #2
 800337e:	e050      	b.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d013      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10c      	bne.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40014000 	.word	0x40014000

08003444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fc62 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f929 	bl	80036e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08a      	sub	sp, #40	; 0x28
 80034e2:	af02      	add	r7, sp, #8
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d17c      	bne.n	80035f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Transmit+0x2c>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e075      	b.n	80035fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit+0x3e>
 8003518:	2302      	movs	r3, #2
 800351a:	e06e      	b.n	80035fa <HAL_UART_Transmit+0x11c>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	; 0x21
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fd fdcb 	bl	80010cc <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Transmit+0x82>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003570:	e02a      	b.n	80035c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f840 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e036      	b.n	80035fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3302      	adds	r3, #2
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e007      	b.n	80035ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1cf      	bne.n	8003572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f810 	bl	8003602 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e006      	b.n	80035fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b090      	sub	sp, #64	; 0x40
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003612:	e050      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d04c      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800361c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x30>
 8003622:	f7fd fd53 	bl	80010cc <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800362e:	429a      	cmp	r2, r3
 8003630:	d241      	bcs.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	330c      	adds	r3, #12
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003652:	637a      	str	r2, [r7, #52]	; 0x34
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3314      	adds	r3, #20
 800366c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	613b      	str	r3, [r7, #16]
   return(result);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003686:	623a      	str	r2, [r7, #32]
 8003688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	69f9      	ldr	r1, [r7, #28]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	61bb      	str	r3, [r7, #24]
   return(result);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d09f      	beq.n	8003614 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3740      	adds	r7, #64	; 0x40
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b0c0      	sub	sp, #256	; 0x100
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	ea40 0301 	orr.w	r3, r0, r1
 8003708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003738:	f021 010c 	bic.w	r1, r1, #12
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003746:	430b      	orrs	r3, r1
 8003748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	6999      	ldr	r1, [r3, #24]
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	ea40 0301 	orr.w	r3, r0, r1
 8003766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <UART_SetConfig+0x2cc>)
 8003770:	429a      	cmp	r2, r3
 8003772:	d005      	beq.n	8003780 <UART_SetConfig+0xa0>
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <UART_SetConfig+0x2d0>)
 800377c:	429a      	cmp	r2, r3
 800377e:	d104      	bne.n	800378a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7ff fb52 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8003784:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003788:	e003      	b.n	8003792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800378a:	f7ff fb39 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 800378e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379c:	f040 810c 	bne.w	80039b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037b2:	4622      	mov	r2, r4
 80037b4:	462b      	mov	r3, r5
 80037b6:	1891      	adds	r1, r2, r2
 80037b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80037ba:	415b      	adcs	r3, r3
 80037bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037c2:	4621      	mov	r1, r4
 80037c4:	eb12 0801 	adds.w	r8, r2, r1
 80037c8:	4629      	mov	r1, r5
 80037ca:	eb43 0901 	adc.w	r9, r3, r1
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e2:	4690      	mov	r8, r2
 80037e4:	4699      	mov	r9, r3
 80037e6:	4623      	mov	r3, r4
 80037e8:	eb18 0303 	adds.w	r3, r8, r3
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037f0:	462b      	mov	r3, r5
 80037f2:	eb49 0303 	adc.w	r3, r9, r3
 80037f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003806:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800380a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800380e:	460b      	mov	r3, r1
 8003810:	18db      	adds	r3, r3, r3
 8003812:	653b      	str	r3, [r7, #80]	; 0x50
 8003814:	4613      	mov	r3, r2
 8003816:	eb42 0303 	adc.w	r3, r2, r3
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
 800381c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003824:	f7fc fd2c 	bl	8000280 <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <UART_SetConfig+0x2d4>)
 800382e:	fba3 2302 	umull	r2, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	011c      	lsls	r4, r3, #4
 8003836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003840:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	1891      	adds	r1, r2, r2
 800384e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003850:	415b      	adcs	r3, r3
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003858:	4641      	mov	r1, r8
 800385a:	eb12 0a01 	adds.w	sl, r2, r1
 800385e:	4649      	mov	r1, r9
 8003860:	eb43 0b01 	adc.w	fp, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003878:	4692      	mov	sl, r2
 800387a:	469b      	mov	fp, r3
 800387c:	4643      	mov	r3, r8
 800387e:	eb1a 0303 	adds.w	r3, sl, r3
 8003882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003886:	464b      	mov	r3, r9
 8003888:	eb4b 0303 	adc.w	r3, fp, r3
 800388c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800389c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a4:	460b      	mov	r3, r1
 80038a6:	18db      	adds	r3, r3, r3
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40
 80038aa:	4613      	mov	r3, r2
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038ba:	f7fc fce1 	bl	8000280 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <UART_SetConfig+0x2d4>)
 80038c6:	fba3 2301 	umull	r2, r3, r3, r1
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2264      	movs	r2, #100	; 0x64
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	1acb      	subs	r3, r1, r3
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <UART_SetConfig+0x2d4>)
 80038dc:	fba3 2302 	umull	r2, r3, r3, r2
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e8:	441c      	add	r4, r3
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	63b9      	str	r1, [r7, #56]	; 0x38
 8003904:	415b      	adcs	r3, r3
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800390c:	4641      	mov	r1, r8
 800390e:	1851      	adds	r1, r2, r1
 8003910:	6339      	str	r1, [r7, #48]	; 0x30
 8003912:	4649      	mov	r1, r9
 8003914:	414b      	adcs	r3, r1
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003924:	4659      	mov	r1, fp
 8003926:	00cb      	lsls	r3, r1, #3
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392e:	4651      	mov	r1, sl
 8003930:	00ca      	lsls	r2, r1, #3
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	4603      	mov	r3, r0
 8003938:	4642      	mov	r2, r8
 800393a:	189b      	adds	r3, r3, r2
 800393c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003940:	464b      	mov	r3, r9
 8003942:	460a      	mov	r2, r1
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003958:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800395c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003960:	460b      	mov	r3, r1
 8003962:	18db      	adds	r3, r3, r3
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
 8003966:	4613      	mov	r3, r2
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003976:	f7fc fc83 	bl	8000280 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <UART_SetConfig+0x2d4>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <UART_SetConfig+0x2d4>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4422      	add	r2, r4
 80039a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a8:	e106      	b.n	8003bb8 <UART_SetConfig+0x4d8>
 80039aa:	bf00      	nop
 80039ac:	40011000 	.word	0x40011000
 80039b0:	40011400 	.word	0x40011400
 80039b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039ca:	4642      	mov	r2, r8
 80039cc:	464b      	mov	r3, r9
 80039ce:	1891      	adds	r1, r2, r2
 80039d0:	6239      	str	r1, [r7, #32]
 80039d2:	415b      	adcs	r3, r3
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039da:	4641      	mov	r1, r8
 80039dc:	1854      	adds	r4, r2, r1
 80039de:	4649      	mov	r1, r9
 80039e0:	eb43 0501 	adc.w	r5, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	00eb      	lsls	r3, r5, #3
 80039ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f2:	00e2      	lsls	r2, r4, #3
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	4643      	mov	r3, r8
 80039fa:	18e3      	adds	r3, r4, r3
 80039fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a00:	464b      	mov	r3, r9
 8003a02:	eb45 0303 	adc.w	r3, r5, r3
 8003a06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a26:	4629      	mov	r1, r5
 8003a28:	008b      	lsls	r3, r1, #2
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a30:	4621      	mov	r1, r4
 8003a32:	008a      	lsls	r2, r1, #2
 8003a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a38:	f7fc fc22 	bl	8000280 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003a42:	fba3 2302 	umull	r2, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	011c      	lsls	r4, r3, #4
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	61b9      	str	r1, [r7, #24]
 8003a64:	415b      	adcs	r3, r3
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6139      	str	r1, [r7, #16]
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	008b      	lsls	r3, r1, #2
 8003ac8:	4641      	mov	r1, r8
 8003aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ace:	4641      	mov	r1, r8
 8003ad0:	008a      	lsls	r2, r1, #2
 8003ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ad6:	f7fc fbd3 	bl	8000280 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	; 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b00:	441c      	add	r4, r3
 8003b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b06:	2200      	movs	r2, #0
 8003b08:	673b      	str	r3, [r7, #112]	; 0x70
 8003b0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b52:	464b      	mov	r3, r9
 8003b54:	460a      	mov	r2, r1
 8003b56:	eb42 0303 	adc.w	r3, r2, r3
 8003b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	663b      	str	r3, [r7, #96]	; 0x60
 8003b66:	667a      	str	r2, [r7, #100]	; 0x64
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b74:	4649      	mov	r1, r9
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7e:	4641      	mov	r1, r8
 8003b80:	008a      	lsls	r2, r1, #2
 8003b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b86:	f7fc fb7b 	bl	8000280 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003b90:	fba3 1302 	umull	r1, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2164      	movs	r1, #100	; 0x64
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <UART_SetConfig+0x4e4>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4422      	add	r2, r4
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc4:	51eb851f 	.word	0x51eb851f

08003bc8 <std>:
 8003bc8:	2300      	movs	r3, #0
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
 8003bce:	e9c0 3300 	strd	r3, r3, [r0]
 8003bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd6:	6083      	str	r3, [r0, #8]
 8003bd8:	8181      	strh	r1, [r0, #12]
 8003bda:	6643      	str	r3, [r0, #100]	; 0x64
 8003bdc:	81c2      	strh	r2, [r0, #14]
 8003bde:	6183      	str	r3, [r0, #24]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2208      	movs	r2, #8
 8003be4:	305c      	adds	r0, #92	; 0x5c
 8003be6:	f000 f9e5 	bl	8003fb4 <memset>
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <std+0x38>)
 8003bec:	6263      	str	r3, [r4, #36]	; 0x24
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <std+0x3c>)
 8003bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <std+0x40>)
 8003bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <std+0x44>)
 8003bf8:	6224      	str	r4, [r4, #32]
 8003bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	bf00      	nop
 8003c00:	08003e05 	.word	0x08003e05
 8003c04:	08003e27 	.word	0x08003e27
 8003c08:	08003e5f 	.word	0x08003e5f
 8003c0c:	08003e83 	.word	0x08003e83

08003c10 <stdio_exit_handler>:
 8003c10:	4a02      	ldr	r2, [pc, #8]	; (8003c1c <stdio_exit_handler+0xc>)
 8003c12:	4903      	ldr	r1, [pc, #12]	; (8003c20 <stdio_exit_handler+0x10>)
 8003c14:	4803      	ldr	r0, [pc, #12]	; (8003c24 <stdio_exit_handler+0x14>)
 8003c16:	f000 b869 	b.w	8003cec <_fwalk_sglue>
 8003c1a:	bf00      	nop
 8003c1c:	20000014 	.word	0x20000014
 8003c20:	0800494d 	.word	0x0800494d
 8003c24:	20000020 	.word	0x20000020

08003c28 <cleanup_stdio>:
 8003c28:	6841      	ldr	r1, [r0, #4]
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <cleanup_stdio+0x34>)
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	4604      	mov	r4, r0
 8003c32:	d001      	beq.n	8003c38 <cleanup_stdio+0x10>
 8003c34:	f000 fe8a 	bl	800494c <_fflush_r>
 8003c38:	68a1      	ldr	r1, [r4, #8]
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <cleanup_stdio+0x38>)
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	d002      	beq.n	8003c46 <cleanup_stdio+0x1e>
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 fe83 	bl	800494c <_fflush_r>
 8003c46:	68e1      	ldr	r1, [r4, #12]
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <cleanup_stdio+0x3c>)
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	d004      	beq.n	8003c58 <cleanup_stdio+0x30>
 8003c4e:	4620      	mov	r0, r4
 8003c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c54:	f000 be7a 	b.w	800494c <_fflush_r>
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000214 	.word	0x20000214
 8003c60:	2000027c 	.word	0x2000027c
 8003c64:	200002e4 	.word	0x200002e4

08003c68 <global_stdio_init.part.0>:
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <global_stdio_init.part.0+0x30>)
 8003c6c:	4c0b      	ldr	r4, [pc, #44]	; (8003c9c <global_stdio_init.part.0+0x34>)
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ca0 <global_stdio_init.part.0+0x38>)
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4620      	mov	r0, r4
 8003c74:	2200      	movs	r2, #0
 8003c76:	2104      	movs	r1, #4
 8003c78:	f7ff ffa6 	bl	8003bc8 <std>
 8003c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c80:	2201      	movs	r2, #1
 8003c82:	2109      	movs	r1, #9
 8003c84:	f7ff ffa0 	bl	8003bc8 <std>
 8003c88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c92:	2112      	movs	r1, #18
 8003c94:	f7ff bf98 	b.w	8003bc8 <std>
 8003c98:	2000034c 	.word	0x2000034c
 8003c9c:	20000214 	.word	0x20000214
 8003ca0:	08003c11 	.word	0x08003c11

08003ca4 <__sfp_lock_acquire>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__sfp_lock_acquire+0x8>)
 8003ca6:	f000 b9fd 	b.w	80040a4 <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000355 	.word	0x20000355

08003cb0 <__sfp_lock_release>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__sfp_lock_release+0x8>)
 8003cb2:	f000 b9f8 	b.w	80040a6 <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000355 	.word	0x20000355

08003cbc <__sinit>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	f7ff fff0 	bl	8003ca4 <__sfp_lock_acquire>
 8003cc4:	6a23      	ldr	r3, [r4, #32]
 8003cc6:	b11b      	cbz	r3, 8003cd0 <__sinit+0x14>
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f7ff bff0 	b.w	8003cb0 <__sfp_lock_release>
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <__sinit+0x28>)
 8003cd2:	6223      	str	r3, [r4, #32]
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__sinit+0x2c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f5      	bne.n	8003cc8 <__sinit+0xc>
 8003cdc:	f7ff ffc4 	bl	8003c68 <global_stdio_init.part.0>
 8003ce0:	e7f2      	b.n	8003cc8 <__sinit+0xc>
 8003ce2:	bf00      	nop
 8003ce4:	08003c29 	.word	0x08003c29
 8003ce8:	2000034c 	.word	0x2000034c

08003cec <_fwalk_sglue>:
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	4688      	mov	r8, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8003d00:	d505      	bpl.n	8003d0e <_fwalk_sglue+0x22>
 8003d02:	6824      	ldr	r4, [r4, #0]
 8003d04:	2c00      	cmp	r4, #0
 8003d06:	d1f7      	bne.n	8003cf8 <_fwalk_sglue+0xc>
 8003d08:	4630      	mov	r0, r6
 8003d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0e:	89ab      	ldrh	r3, [r5, #12]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d907      	bls.n	8003d24 <_fwalk_sglue+0x38>
 8003d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	d003      	beq.n	8003d24 <_fwalk_sglue+0x38>
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	4638      	mov	r0, r7
 8003d20:	47c0      	blx	r8
 8003d22:	4306      	orrs	r6, r0
 8003d24:	3568      	adds	r5, #104	; 0x68
 8003d26:	e7e9      	b.n	8003cfc <_fwalk_sglue+0x10>

08003d28 <iprintf>:
 8003d28:	b40f      	push	{r0, r1, r2, r3}
 8003d2a:	b507      	push	{r0, r1, r2, lr}
 8003d2c:	4906      	ldr	r1, [pc, #24]	; (8003d48 <iprintf+0x20>)
 8003d2e:	ab04      	add	r3, sp, #16
 8003d30:	6808      	ldr	r0, [r1, #0]
 8003d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d36:	6881      	ldr	r1, [r0, #8]
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	f000 fad7 	bl	80042ec <_vfiprintf_r>
 8003d3e:	b003      	add	sp, #12
 8003d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d44:	b004      	add	sp, #16
 8003d46:	4770      	bx	lr
 8003d48:	2000006c 	.word	0x2000006c

08003d4c <_puts_r>:
 8003d4c:	6a03      	ldr	r3, [r0, #32]
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	6884      	ldr	r4, [r0, #8]
 8003d52:	4605      	mov	r5, r0
 8003d54:	460e      	mov	r6, r1
 8003d56:	b90b      	cbnz	r3, 8003d5c <_puts_r+0x10>
 8003d58:	f7ff ffb0 	bl	8003cbc <__sinit>
 8003d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d5e:	07db      	lsls	r3, r3, #31
 8003d60:	d405      	bmi.n	8003d6e <_puts_r+0x22>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	0598      	lsls	r0, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_puts_r+0x22>
 8003d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6a:	f000 f99b 	bl	80040a4 <__retarget_lock_acquire_recursive>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	0719      	lsls	r1, r3, #28
 8003d72:	d513      	bpl.n	8003d9c <_puts_r+0x50>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	b18b      	cbz	r3, 8003d9c <_puts_r+0x50>
 8003d78:	3e01      	subs	r6, #1
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	b9e9      	cbnz	r1, 8003dc2 <_puts_r+0x76>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da2e      	bge.n	8003de8 <_puts_r+0x9c>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	210a      	movs	r1, #10
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f87b 	bl	8003e8a <__swbuf_r>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d007      	beq.n	8003da8 <_puts_r+0x5c>
 8003d98:	250a      	movs	r5, #10
 8003d9a:	e007      	b.n	8003dac <_puts_r+0x60>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f8b0 	bl	8003f04 <__swsetup_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d0e7      	beq.n	8003d78 <_puts_r+0x2c>
 8003da8:	f04f 35ff 	mov.w	r5, #4294967295
 8003dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dae:	07da      	lsls	r2, r3, #31
 8003db0:	d405      	bmi.n	8003dbe <_puts_r+0x72>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	059b      	lsls	r3, r3, #22
 8003db6:	d402      	bmi.n	8003dbe <_puts_r+0x72>
 8003db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dba:	f000 f974 	bl	80040a6 <__retarget_lock_release_recursive>
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da04      	bge.n	8003dd0 <_puts_r+0x84>
 8003dc6:	69a2      	ldr	r2, [r4, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dc06      	bgt.n	8003dda <_puts_r+0x8e>
 8003dcc:	290a      	cmp	r1, #10
 8003dce:	d004      	beq.n	8003dda <_puts_r+0x8e>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	7019      	strb	r1, [r3, #0]
 8003dd8:	e7cf      	b.n	8003d7a <_puts_r+0x2e>
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f854 	bl	8003e8a <__swbuf_r>
 8003de2:	3001      	adds	r0, #1
 8003de4:	d1c9      	bne.n	8003d7a <_puts_r+0x2e>
 8003de6:	e7df      	b.n	8003da8 <_puts_r+0x5c>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	250a      	movs	r5, #10
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	6022      	str	r2, [r4, #0]
 8003df0:	701d      	strb	r5, [r3, #0]
 8003df2:	e7db      	b.n	8003dac <_puts_r+0x60>

08003df4 <puts>:
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <puts+0xc>)
 8003df6:	4601      	mov	r1, r0
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f7ff bfa7 	b.w	8003d4c <_puts_r>
 8003dfe:	bf00      	nop
 8003e00:	2000006c 	.word	0x2000006c

08003e04 <__sread>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	460c      	mov	r4, r1
 8003e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0c:	f000 f8fc 	bl	8004008 <_read_r>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	bfab      	itete	ge
 8003e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e16:	89a3      	ldrhlt	r3, [r4, #12]
 8003e18:	181b      	addge	r3, r3, r0
 8003e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e1e:	bfac      	ite	ge
 8003e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e22:	81a3      	strhlt	r3, [r4, #12]
 8003e24:	bd10      	pop	{r4, pc}

08003e26 <__swrite>:
 8003e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2a:	461f      	mov	r7, r3
 8003e2c:	898b      	ldrh	r3, [r1, #12]
 8003e2e:	05db      	lsls	r3, r3, #23
 8003e30:	4605      	mov	r5, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4616      	mov	r6, r2
 8003e36:	d505      	bpl.n	8003e44 <__swrite+0x1e>
 8003e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f000 f8d0 	bl	8003fe4 <_lseek_r>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e4e:	81a3      	strh	r3, [r4, #12]
 8003e50:	4632      	mov	r2, r6
 8003e52:	463b      	mov	r3, r7
 8003e54:	4628      	mov	r0, r5
 8003e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	f000 b8e7 	b.w	800402c <_write_r>

08003e5e <__sseek>:
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	460c      	mov	r4, r1
 8003e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e66:	f000 f8bd 	bl	8003fe4 <_lseek_r>
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	bf15      	itete	ne
 8003e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e7a:	81a3      	strheq	r3, [r4, #12]
 8003e7c:	bf18      	it	ne
 8003e7e:	81a3      	strhne	r3, [r4, #12]
 8003e80:	bd10      	pop	{r4, pc}

08003e82 <__sclose>:
 8003e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e86:	f000 b89d 	b.w	8003fc4 <_close_r>

08003e8a <__swbuf_r>:
 8003e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	4614      	mov	r4, r2
 8003e90:	4605      	mov	r5, r0
 8003e92:	b118      	cbz	r0, 8003e9c <__swbuf_r+0x12>
 8003e94:	6a03      	ldr	r3, [r0, #32]
 8003e96:	b90b      	cbnz	r3, 8003e9c <__swbuf_r+0x12>
 8003e98:	f7ff ff10 	bl	8003cbc <__sinit>
 8003e9c:	69a3      	ldr	r3, [r4, #24]
 8003e9e:	60a3      	str	r3, [r4, #8]
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	071a      	lsls	r2, r3, #28
 8003ea4:	d525      	bpl.n	8003ef2 <__swbuf_r+0x68>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	b31b      	cbz	r3, 8003ef2 <__swbuf_r+0x68>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	1a98      	subs	r0, r3, r2
 8003eb0:	6963      	ldr	r3, [r4, #20]
 8003eb2:	b2f6      	uxtb	r6, r6
 8003eb4:	4283      	cmp	r3, r0
 8003eb6:	4637      	mov	r7, r6
 8003eb8:	dc04      	bgt.n	8003ec4 <__swbuf_r+0x3a>
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f000 fd45 	bl	800494c <_fflush_r>
 8003ec2:	b9e0      	cbnz	r0, 8003efe <__swbuf_r+0x74>
 8003ec4:	68a3      	ldr	r3, [r4, #8]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	60a3      	str	r3, [r4, #8]
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	6022      	str	r2, [r4, #0]
 8003ed0:	701e      	strb	r6, [r3, #0]
 8003ed2:	6962      	ldr	r2, [r4, #20]
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d004      	beq.n	8003ee4 <__swbuf_r+0x5a>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	07db      	lsls	r3, r3, #31
 8003ede:	d506      	bpl.n	8003eee <__swbuf_r+0x64>
 8003ee0:	2e0a      	cmp	r6, #10
 8003ee2:	d104      	bne.n	8003eee <__swbuf_r+0x64>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 fd30 	bl	800494c <_fflush_r>
 8003eec:	b938      	cbnz	r0, 8003efe <__swbuf_r+0x74>
 8003eee:	4638      	mov	r0, r7
 8003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f000 f805 	bl	8003f04 <__swsetup_r>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d0d5      	beq.n	8003eaa <__swbuf_r+0x20>
 8003efe:	f04f 37ff 	mov.w	r7, #4294967295
 8003f02:	e7f4      	b.n	8003eee <__swbuf_r+0x64>

08003f04 <__swsetup_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <__swsetup_r+0xac>)
 8003f08:	4605      	mov	r5, r0
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	b118      	cbz	r0, 8003f18 <__swsetup_r+0x14>
 8003f10:	6a03      	ldr	r3, [r0, #32]
 8003f12:	b90b      	cbnz	r3, 8003f18 <__swsetup_r+0x14>
 8003f14:	f7ff fed2 	bl	8003cbc <__sinit>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f1e:	0718      	lsls	r0, r3, #28
 8003f20:	d422      	bmi.n	8003f68 <__swsetup_r+0x64>
 8003f22:	06d9      	lsls	r1, r3, #27
 8003f24:	d407      	bmi.n	8003f36 <__swsetup_r+0x32>
 8003f26:	2309      	movs	r3, #9
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f2e:	81a3      	strh	r3, [r4, #12]
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	e034      	b.n	8003fa0 <__swsetup_r+0x9c>
 8003f36:	0758      	lsls	r0, r3, #29
 8003f38:	d512      	bpl.n	8003f60 <__swsetup_r+0x5c>
 8003f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f3c:	b141      	cbz	r1, 8003f50 <__swsetup_r+0x4c>
 8003f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f42:	4299      	cmp	r1, r3
 8003f44:	d002      	beq.n	8003f4c <__swsetup_r+0x48>
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 f8ae 	bl	80040a8 <_free_r>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f043 0308 	orr.w	r3, r3, #8
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	b94b      	cbnz	r3, 8003f80 <__swsetup_r+0x7c>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d003      	beq.n	8003f80 <__swsetup_r+0x7c>
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fd34 	bl	80049e8 <__smakebuf_r>
 8003f80:	89a0      	ldrh	r0, [r4, #12]
 8003f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f86:	f010 0301 	ands.w	r3, r0, #1
 8003f8a:	d00a      	beq.n	8003fa2 <__swsetup_r+0x9e>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60a3      	str	r3, [r4, #8]
 8003f90:	6963      	ldr	r3, [r4, #20]
 8003f92:	425b      	negs	r3, r3
 8003f94:	61a3      	str	r3, [r4, #24]
 8003f96:	6923      	ldr	r3, [r4, #16]
 8003f98:	b943      	cbnz	r3, 8003fac <__swsetup_r+0xa8>
 8003f9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f9e:	d1c4      	bne.n	8003f2a <__swsetup_r+0x26>
 8003fa0:	bd38      	pop	{r3, r4, r5, pc}
 8003fa2:	0781      	lsls	r1, r0, #30
 8003fa4:	bf58      	it	pl
 8003fa6:	6963      	ldrpl	r3, [r4, #20]
 8003fa8:	60a3      	str	r3, [r4, #8]
 8003faa:	e7f4      	b.n	8003f96 <__swsetup_r+0x92>
 8003fac:	2000      	movs	r0, #0
 8003fae:	e7f7      	b.n	8003fa0 <__swsetup_r+0x9c>
 8003fb0:	2000006c 	.word	0x2000006c

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <_close_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d06      	ldr	r5, [pc, #24]	; (8003fe0 <_close_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fc ff6f 	bl	8000eb2 <_close>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_close_r+0x1a>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_close_r+0x1a>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000350 	.word	0x20000350

08003fe4 <_lseek_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_lseek_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc ff84 	bl	8000f00 <_lseek>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_lseek_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_lseek_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20000350 	.word	0x20000350

08004008 <_read_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4d07      	ldr	r5, [pc, #28]	; (8004028 <_read_r+0x20>)
 800400c:	4604      	mov	r4, r0
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	2200      	movs	r2, #0
 8004014:	602a      	str	r2, [r5, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f7fc ff12 	bl	8000e40 <_read>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_read_r+0x1e>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_read_r+0x1e>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20000350 	.word	0x20000350

0800402c <_write_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4d07      	ldr	r5, [pc, #28]	; (800404c <_write_r+0x20>)
 8004030:	4604      	mov	r4, r0
 8004032:	4608      	mov	r0, r1
 8004034:	4611      	mov	r1, r2
 8004036:	2200      	movs	r2, #0
 8004038:	602a      	str	r2, [r5, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f7fc ff1d 	bl	8000e7a <_write>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_write_r+0x1e>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_write_r+0x1e>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20000350 	.word	0x20000350

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000006c 	.word	0x2000006c

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	; (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	; (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	; (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 fd28 	bl	8004ac4 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08004bac 	.word	0x08004bac
 8004098:	08004bac 	.word	0x08004bac
 800409c:	08004bac 	.word	0x08004bac
 80040a0:	08004bb0 	.word	0x08004bb0

080040a4 <__retarget_lock_acquire_recursive>:
 80040a4:	4770      	bx	lr

080040a6 <__retarget_lock_release_recursive>:
 80040a6:	4770      	bx	lr

080040a8 <_free_r>:
 80040a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040aa:	2900      	cmp	r1, #0
 80040ac:	d044      	beq.n	8004138 <_free_r+0x90>
 80040ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b2:	9001      	str	r0, [sp, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f1a1 0404 	sub.w	r4, r1, #4
 80040ba:	bfb8      	it	lt
 80040bc:	18e4      	addlt	r4, r4, r3
 80040be:	f000 f8df 	bl	8004280 <__malloc_lock>
 80040c2:	4a1e      	ldr	r2, [pc, #120]	; (800413c <_free_r+0x94>)
 80040c4:	9801      	ldr	r0, [sp, #4]
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	b933      	cbnz	r3, 80040d8 <_free_r+0x30>
 80040ca:	6063      	str	r3, [r4, #4]
 80040cc:	6014      	str	r4, [r2, #0]
 80040ce:	b003      	add	sp, #12
 80040d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040d4:	f000 b8da 	b.w	800428c <__malloc_unlock>
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d908      	bls.n	80040ee <_free_r+0x46>
 80040dc:	6825      	ldr	r5, [r4, #0]
 80040de:	1961      	adds	r1, r4, r5
 80040e0:	428b      	cmp	r3, r1
 80040e2:	bf01      	itttt	eq
 80040e4:	6819      	ldreq	r1, [r3, #0]
 80040e6:	685b      	ldreq	r3, [r3, #4]
 80040e8:	1949      	addeq	r1, r1, r5
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	e7ed      	b.n	80040ca <_free_r+0x22>
 80040ee:	461a      	mov	r2, r3
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	b10b      	cbz	r3, 80040f8 <_free_r+0x50>
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d9fa      	bls.n	80040ee <_free_r+0x46>
 80040f8:	6811      	ldr	r1, [r2, #0]
 80040fa:	1855      	adds	r5, r2, r1
 80040fc:	42a5      	cmp	r5, r4
 80040fe:	d10b      	bne.n	8004118 <_free_r+0x70>
 8004100:	6824      	ldr	r4, [r4, #0]
 8004102:	4421      	add	r1, r4
 8004104:	1854      	adds	r4, r2, r1
 8004106:	42a3      	cmp	r3, r4
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	d1e0      	bne.n	80040ce <_free_r+0x26>
 800410c:	681c      	ldr	r4, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	6053      	str	r3, [r2, #4]
 8004112:	440c      	add	r4, r1
 8004114:	6014      	str	r4, [r2, #0]
 8004116:	e7da      	b.n	80040ce <_free_r+0x26>
 8004118:	d902      	bls.n	8004120 <_free_r+0x78>
 800411a:	230c      	movs	r3, #12
 800411c:	6003      	str	r3, [r0, #0]
 800411e:	e7d6      	b.n	80040ce <_free_r+0x26>
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	1961      	adds	r1, r4, r5
 8004124:	428b      	cmp	r3, r1
 8004126:	bf04      	itt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	bf04      	itt	eq
 8004130:	1949      	addeq	r1, r1, r5
 8004132:	6021      	streq	r1, [r4, #0]
 8004134:	6054      	str	r4, [r2, #4]
 8004136:	e7ca      	b.n	80040ce <_free_r+0x26>
 8004138:	b003      	add	sp, #12
 800413a:	bd30      	pop	{r4, r5, pc}
 800413c:	20000358 	.word	0x20000358

08004140 <sbrk_aligned>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4e0e      	ldr	r6, [pc, #56]	; (800417c <sbrk_aligned+0x3c>)
 8004144:	460c      	mov	r4, r1
 8004146:	6831      	ldr	r1, [r6, #0]
 8004148:	4605      	mov	r5, r0
 800414a:	b911      	cbnz	r1, 8004152 <sbrk_aligned+0x12>
 800414c:	f000 fcaa 	bl	8004aa4 <_sbrk_r>
 8004150:	6030      	str	r0, [r6, #0]
 8004152:	4621      	mov	r1, r4
 8004154:	4628      	mov	r0, r5
 8004156:	f000 fca5 	bl	8004aa4 <_sbrk_r>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d00a      	beq.n	8004174 <sbrk_aligned+0x34>
 800415e:	1cc4      	adds	r4, r0, #3
 8004160:	f024 0403 	bic.w	r4, r4, #3
 8004164:	42a0      	cmp	r0, r4
 8004166:	d007      	beq.n	8004178 <sbrk_aligned+0x38>
 8004168:	1a21      	subs	r1, r4, r0
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fc9a 	bl	8004aa4 <_sbrk_r>
 8004170:	3001      	adds	r0, #1
 8004172:	d101      	bne.n	8004178 <sbrk_aligned+0x38>
 8004174:	f04f 34ff 	mov.w	r4, #4294967295
 8004178:	4620      	mov	r0, r4
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	2000035c 	.word	0x2000035c

08004180 <_malloc_r>:
 8004180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004184:	1ccd      	adds	r5, r1, #3
 8004186:	f025 0503 	bic.w	r5, r5, #3
 800418a:	3508      	adds	r5, #8
 800418c:	2d0c      	cmp	r5, #12
 800418e:	bf38      	it	cc
 8004190:	250c      	movcc	r5, #12
 8004192:	2d00      	cmp	r5, #0
 8004194:	4607      	mov	r7, r0
 8004196:	db01      	blt.n	800419c <_malloc_r+0x1c>
 8004198:	42a9      	cmp	r1, r5
 800419a:	d905      	bls.n	80041a8 <_malloc_r+0x28>
 800419c:	230c      	movs	r3, #12
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	2600      	movs	r6, #0
 80041a2:	4630      	mov	r0, r6
 80041a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800427c <_malloc_r+0xfc>
 80041ac:	f000 f868 	bl	8004280 <__malloc_lock>
 80041b0:	f8d8 3000 	ldr.w	r3, [r8]
 80041b4:	461c      	mov	r4, r3
 80041b6:	bb5c      	cbnz	r4, 8004210 <_malloc_r+0x90>
 80041b8:	4629      	mov	r1, r5
 80041ba:	4638      	mov	r0, r7
 80041bc:	f7ff ffc0 	bl	8004140 <sbrk_aligned>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	4604      	mov	r4, r0
 80041c4:	d155      	bne.n	8004272 <_malloc_r+0xf2>
 80041c6:	f8d8 4000 	ldr.w	r4, [r8]
 80041ca:	4626      	mov	r6, r4
 80041cc:	2e00      	cmp	r6, #0
 80041ce:	d145      	bne.n	800425c <_malloc_r+0xdc>
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	d048      	beq.n	8004266 <_malloc_r+0xe6>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	4631      	mov	r1, r6
 80041d8:	4638      	mov	r0, r7
 80041da:	eb04 0903 	add.w	r9, r4, r3
 80041de:	f000 fc61 	bl	8004aa4 <_sbrk_r>
 80041e2:	4581      	cmp	r9, r0
 80041e4:	d13f      	bne.n	8004266 <_malloc_r+0xe6>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	1a6d      	subs	r5, r5, r1
 80041ea:	4629      	mov	r1, r5
 80041ec:	4638      	mov	r0, r7
 80041ee:	f7ff ffa7 	bl	8004140 <sbrk_aligned>
 80041f2:	3001      	adds	r0, #1
 80041f4:	d037      	beq.n	8004266 <_malloc_r+0xe6>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	442b      	add	r3, r5
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d038      	beq.n	8004276 <_malloc_r+0xf6>
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	42a2      	cmp	r2, r4
 8004208:	d12b      	bne.n	8004262 <_malloc_r+0xe2>
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e00f      	b.n	8004230 <_malloc_r+0xb0>
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	1b52      	subs	r2, r2, r5
 8004214:	d41f      	bmi.n	8004256 <_malloc_r+0xd6>
 8004216:	2a0b      	cmp	r2, #11
 8004218:	d917      	bls.n	800424a <_malloc_r+0xca>
 800421a:	1961      	adds	r1, r4, r5
 800421c:	42a3      	cmp	r3, r4
 800421e:	6025      	str	r5, [r4, #0]
 8004220:	bf18      	it	ne
 8004222:	6059      	strne	r1, [r3, #4]
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	bf08      	it	eq
 8004228:	f8c8 1000 	streq.w	r1, [r8]
 800422c:	5162      	str	r2, [r4, r5]
 800422e:	604b      	str	r3, [r1, #4]
 8004230:	4638      	mov	r0, r7
 8004232:	f104 060b 	add.w	r6, r4, #11
 8004236:	f000 f829 	bl	800428c <__malloc_unlock>
 800423a:	f026 0607 	bic.w	r6, r6, #7
 800423e:	1d23      	adds	r3, r4, #4
 8004240:	1af2      	subs	r2, r6, r3
 8004242:	d0ae      	beq.n	80041a2 <_malloc_r+0x22>
 8004244:	1b9b      	subs	r3, r3, r6
 8004246:	50a3      	str	r3, [r4, r2]
 8004248:	e7ab      	b.n	80041a2 <_malloc_r+0x22>
 800424a:	42a3      	cmp	r3, r4
 800424c:	6862      	ldr	r2, [r4, #4]
 800424e:	d1dd      	bne.n	800420c <_malloc_r+0x8c>
 8004250:	f8c8 2000 	str.w	r2, [r8]
 8004254:	e7ec      	b.n	8004230 <_malloc_r+0xb0>
 8004256:	4623      	mov	r3, r4
 8004258:	6864      	ldr	r4, [r4, #4]
 800425a:	e7ac      	b.n	80041b6 <_malloc_r+0x36>
 800425c:	4634      	mov	r4, r6
 800425e:	6876      	ldr	r6, [r6, #4]
 8004260:	e7b4      	b.n	80041cc <_malloc_r+0x4c>
 8004262:	4613      	mov	r3, r2
 8004264:	e7cc      	b.n	8004200 <_malloc_r+0x80>
 8004266:	230c      	movs	r3, #12
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4638      	mov	r0, r7
 800426c:	f000 f80e 	bl	800428c <__malloc_unlock>
 8004270:	e797      	b.n	80041a2 <_malloc_r+0x22>
 8004272:	6025      	str	r5, [r4, #0]
 8004274:	e7dc      	b.n	8004230 <_malloc_r+0xb0>
 8004276:	605b      	str	r3, [r3, #4]
 8004278:	deff      	udf	#255	; 0xff
 800427a:	bf00      	nop
 800427c:	20000358 	.word	0x20000358

08004280 <__malloc_lock>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__malloc_lock+0x8>)
 8004282:	f7ff bf0f 	b.w	80040a4 <__retarget_lock_acquire_recursive>
 8004286:	bf00      	nop
 8004288:	20000354 	.word	0x20000354

0800428c <__malloc_unlock>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__malloc_unlock+0x8>)
 800428e:	f7ff bf0a 	b.w	80040a6 <__retarget_lock_release_recursive>
 8004292:	bf00      	nop
 8004294:	20000354 	.word	0x20000354

08004298 <__sfputc_r>:
 8004298:	6893      	ldr	r3, [r2, #8]
 800429a:	3b01      	subs	r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	b410      	push	{r4}
 80042a0:	6093      	str	r3, [r2, #8]
 80042a2:	da08      	bge.n	80042b6 <__sfputc_r+0x1e>
 80042a4:	6994      	ldr	r4, [r2, #24]
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	db01      	blt.n	80042ae <__sfputc_r+0x16>
 80042aa:	290a      	cmp	r1, #10
 80042ac:	d103      	bne.n	80042b6 <__sfputc_r+0x1e>
 80042ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b2:	f7ff bdea 	b.w	8003e8a <__swbuf_r>
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	1c58      	adds	r0, r3, #1
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	7019      	strb	r1, [r3, #0]
 80042be:	4608      	mov	r0, r1
 80042c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <__sfputs_r>:
 80042c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c8:	4606      	mov	r6, r0
 80042ca:	460f      	mov	r7, r1
 80042cc:	4614      	mov	r4, r2
 80042ce:	18d5      	adds	r5, r2, r3
 80042d0:	42ac      	cmp	r4, r5
 80042d2:	d101      	bne.n	80042d8 <__sfputs_r+0x12>
 80042d4:	2000      	movs	r0, #0
 80042d6:	e007      	b.n	80042e8 <__sfputs_r+0x22>
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	463a      	mov	r2, r7
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff ffda 	bl	8004298 <__sfputc_r>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d1f3      	bne.n	80042d0 <__sfputs_r+0xa>
 80042e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042ec <_vfiprintf_r>:
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	460d      	mov	r5, r1
 80042f2:	b09d      	sub	sp, #116	; 0x74
 80042f4:	4614      	mov	r4, r2
 80042f6:	4698      	mov	r8, r3
 80042f8:	4606      	mov	r6, r0
 80042fa:	b118      	cbz	r0, 8004304 <_vfiprintf_r+0x18>
 80042fc:	6a03      	ldr	r3, [r0, #32]
 80042fe:	b90b      	cbnz	r3, 8004304 <_vfiprintf_r+0x18>
 8004300:	f7ff fcdc 	bl	8003cbc <__sinit>
 8004304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	d405      	bmi.n	8004316 <_vfiprintf_r+0x2a>
 800430a:	89ab      	ldrh	r3, [r5, #12]
 800430c:	059a      	lsls	r2, r3, #22
 800430e:	d402      	bmi.n	8004316 <_vfiprintf_r+0x2a>
 8004310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004312:	f7ff fec7 	bl	80040a4 <__retarget_lock_acquire_recursive>
 8004316:	89ab      	ldrh	r3, [r5, #12]
 8004318:	071b      	lsls	r3, r3, #28
 800431a:	d501      	bpl.n	8004320 <_vfiprintf_r+0x34>
 800431c:	692b      	ldr	r3, [r5, #16]
 800431e:	b99b      	cbnz	r3, 8004348 <_vfiprintf_r+0x5c>
 8004320:	4629      	mov	r1, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff fdee 	bl	8003f04 <__swsetup_r>
 8004328:	b170      	cbz	r0, 8004348 <_vfiprintf_r+0x5c>
 800432a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800432c:	07dc      	lsls	r4, r3, #31
 800432e:	d504      	bpl.n	800433a <_vfiprintf_r+0x4e>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	b01d      	add	sp, #116	; 0x74
 8004336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433a:	89ab      	ldrh	r3, [r5, #12]
 800433c:	0598      	lsls	r0, r3, #22
 800433e:	d4f7      	bmi.n	8004330 <_vfiprintf_r+0x44>
 8004340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004342:	f7ff feb0 	bl	80040a6 <__retarget_lock_release_recursive>
 8004346:	e7f3      	b.n	8004330 <_vfiprintf_r+0x44>
 8004348:	2300      	movs	r3, #0
 800434a:	9309      	str	r3, [sp, #36]	; 0x24
 800434c:	2320      	movs	r3, #32
 800434e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004352:	f8cd 800c 	str.w	r8, [sp, #12]
 8004356:	2330      	movs	r3, #48	; 0x30
 8004358:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800450c <_vfiprintf_r+0x220>
 800435c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004360:	f04f 0901 	mov.w	r9, #1
 8004364:	4623      	mov	r3, r4
 8004366:	469a      	mov	sl, r3
 8004368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800436c:	b10a      	cbz	r2, 8004372 <_vfiprintf_r+0x86>
 800436e:	2a25      	cmp	r2, #37	; 0x25
 8004370:	d1f9      	bne.n	8004366 <_vfiprintf_r+0x7a>
 8004372:	ebba 0b04 	subs.w	fp, sl, r4
 8004376:	d00b      	beq.n	8004390 <_vfiprintf_r+0xa4>
 8004378:	465b      	mov	r3, fp
 800437a:	4622      	mov	r2, r4
 800437c:	4629      	mov	r1, r5
 800437e:	4630      	mov	r0, r6
 8004380:	f7ff ffa1 	bl	80042c6 <__sfputs_r>
 8004384:	3001      	adds	r0, #1
 8004386:	f000 80a9 	beq.w	80044dc <_vfiprintf_r+0x1f0>
 800438a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438c:	445a      	add	r2, fp
 800438e:	9209      	str	r2, [sp, #36]	; 0x24
 8004390:	f89a 3000 	ldrb.w	r3, [sl]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a1 	beq.w	80044dc <_vfiprintf_r+0x1f0>
 800439a:	2300      	movs	r3, #0
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a4:	f10a 0a01 	add.w	sl, sl, #1
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	9307      	str	r3, [sp, #28]
 80043ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b0:	931a      	str	r3, [sp, #104]	; 0x68
 80043b2:	4654      	mov	r4, sl
 80043b4:	2205      	movs	r2, #5
 80043b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ba:	4854      	ldr	r0, [pc, #336]	; (800450c <_vfiprintf_r+0x220>)
 80043bc:	f7fb ff10 	bl	80001e0 <memchr>
 80043c0:	9a04      	ldr	r2, [sp, #16]
 80043c2:	b9d8      	cbnz	r0, 80043fc <_vfiprintf_r+0x110>
 80043c4:	06d1      	lsls	r1, r2, #27
 80043c6:	bf44      	itt	mi
 80043c8:	2320      	movmi	r3, #32
 80043ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ce:	0713      	lsls	r3, r2, #28
 80043d0:	bf44      	itt	mi
 80043d2:	232b      	movmi	r3, #43	; 0x2b
 80043d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d8:	f89a 3000 	ldrb.w	r3, [sl]
 80043dc:	2b2a      	cmp	r3, #42	; 0x2a
 80043de:	d015      	beq.n	800440c <_vfiprintf_r+0x120>
 80043e0:	9a07      	ldr	r2, [sp, #28]
 80043e2:	4654      	mov	r4, sl
 80043e4:	2000      	movs	r0, #0
 80043e6:	f04f 0c0a 	mov.w	ip, #10
 80043ea:	4621      	mov	r1, r4
 80043ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f0:	3b30      	subs	r3, #48	; 0x30
 80043f2:	2b09      	cmp	r3, #9
 80043f4:	d94d      	bls.n	8004492 <_vfiprintf_r+0x1a6>
 80043f6:	b1b0      	cbz	r0, 8004426 <_vfiprintf_r+0x13a>
 80043f8:	9207      	str	r2, [sp, #28]
 80043fa:	e014      	b.n	8004426 <_vfiprintf_r+0x13a>
 80043fc:	eba0 0308 	sub.w	r3, r0, r8
 8004400:	fa09 f303 	lsl.w	r3, r9, r3
 8004404:	4313      	orrs	r3, r2
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	46a2      	mov	sl, r4
 800440a:	e7d2      	b.n	80043b2 <_vfiprintf_r+0xc6>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	1d19      	adds	r1, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	9103      	str	r1, [sp, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfbb      	ittet	lt
 8004418:	425b      	neglt	r3, r3
 800441a:	f042 0202 	orrlt.w	r2, r2, #2
 800441e:	9307      	strge	r3, [sp, #28]
 8004420:	9307      	strlt	r3, [sp, #28]
 8004422:	bfb8      	it	lt
 8004424:	9204      	strlt	r2, [sp, #16]
 8004426:	7823      	ldrb	r3, [r4, #0]
 8004428:	2b2e      	cmp	r3, #46	; 0x2e
 800442a:	d10c      	bne.n	8004446 <_vfiprintf_r+0x15a>
 800442c:	7863      	ldrb	r3, [r4, #1]
 800442e:	2b2a      	cmp	r3, #42	; 0x2a
 8004430:	d134      	bne.n	800449c <_vfiprintf_r+0x1b0>
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	1d1a      	adds	r2, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9203      	str	r2, [sp, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004442:	3402      	adds	r4, #2
 8004444:	9305      	str	r3, [sp, #20]
 8004446:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800451c <_vfiprintf_r+0x230>
 800444a:	7821      	ldrb	r1, [r4, #0]
 800444c:	2203      	movs	r2, #3
 800444e:	4650      	mov	r0, sl
 8004450:	f7fb fec6 	bl	80001e0 <memchr>
 8004454:	b138      	cbz	r0, 8004466 <_vfiprintf_r+0x17a>
 8004456:	9b04      	ldr	r3, [sp, #16]
 8004458:	eba0 000a 	sub.w	r0, r0, sl
 800445c:	2240      	movs	r2, #64	; 0x40
 800445e:	4082      	lsls	r2, r0
 8004460:	4313      	orrs	r3, r2
 8004462:	3401      	adds	r4, #1
 8004464:	9304      	str	r3, [sp, #16]
 8004466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446a:	4829      	ldr	r0, [pc, #164]	; (8004510 <_vfiprintf_r+0x224>)
 800446c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004470:	2206      	movs	r2, #6
 8004472:	f7fb feb5 	bl	80001e0 <memchr>
 8004476:	2800      	cmp	r0, #0
 8004478:	d03f      	beq.n	80044fa <_vfiprintf_r+0x20e>
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <_vfiprintf_r+0x228>)
 800447c:	bb1b      	cbnz	r3, 80044c6 <_vfiprintf_r+0x1da>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	3307      	adds	r3, #7
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	3308      	adds	r3, #8
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448c:	443b      	add	r3, r7
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	e768      	b.n	8004364 <_vfiprintf_r+0x78>
 8004492:	fb0c 3202 	mla	r2, ip, r2, r3
 8004496:	460c      	mov	r4, r1
 8004498:	2001      	movs	r0, #1
 800449a:	e7a6      	b.n	80043ea <_vfiprintf_r+0xfe>
 800449c:	2300      	movs	r3, #0
 800449e:	3401      	adds	r4, #1
 80044a0:	9305      	str	r3, [sp, #20]
 80044a2:	4619      	mov	r1, r3
 80044a4:	f04f 0c0a 	mov.w	ip, #10
 80044a8:	4620      	mov	r0, r4
 80044aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ae:	3a30      	subs	r2, #48	; 0x30
 80044b0:	2a09      	cmp	r2, #9
 80044b2:	d903      	bls.n	80044bc <_vfiprintf_r+0x1d0>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0c6      	beq.n	8004446 <_vfiprintf_r+0x15a>
 80044b8:	9105      	str	r1, [sp, #20]
 80044ba:	e7c4      	b.n	8004446 <_vfiprintf_r+0x15a>
 80044bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c0:	4604      	mov	r4, r0
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7f0      	b.n	80044a8 <_vfiprintf_r+0x1bc>
 80044c6:	ab03      	add	r3, sp, #12
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	462a      	mov	r2, r5
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <_vfiprintf_r+0x22c>)
 80044ce:	a904      	add	r1, sp, #16
 80044d0:	4630      	mov	r0, r6
 80044d2:	f3af 8000 	nop.w
 80044d6:	4607      	mov	r7, r0
 80044d8:	1c78      	adds	r0, r7, #1
 80044da:	d1d6      	bne.n	800448a <_vfiprintf_r+0x19e>
 80044dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044de:	07d9      	lsls	r1, r3, #31
 80044e0:	d405      	bmi.n	80044ee <_vfiprintf_r+0x202>
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	059a      	lsls	r2, r3, #22
 80044e6:	d402      	bmi.n	80044ee <_vfiprintf_r+0x202>
 80044e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ea:	f7ff fddc 	bl	80040a6 <__retarget_lock_release_recursive>
 80044ee:	89ab      	ldrh	r3, [r5, #12]
 80044f0:	065b      	lsls	r3, r3, #25
 80044f2:	f53f af1d 	bmi.w	8004330 <_vfiprintf_r+0x44>
 80044f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f8:	e71c      	b.n	8004334 <_vfiprintf_r+0x48>
 80044fa:	ab03      	add	r3, sp, #12
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	462a      	mov	r2, r5
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <_vfiprintf_r+0x22c>)
 8004502:	a904      	add	r1, sp, #16
 8004504:	4630      	mov	r0, r6
 8004506:	f000 f879 	bl	80045fc <_printf_i>
 800450a:	e7e4      	b.n	80044d6 <_vfiprintf_r+0x1ea>
 800450c:	08004b70 	.word	0x08004b70
 8004510:	08004b7a 	.word	0x08004b7a
 8004514:	00000000 	.word	0x00000000
 8004518:	080042c7 	.word	0x080042c7
 800451c:	08004b76 	.word	0x08004b76

08004520 <_printf_common>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	4616      	mov	r6, r2
 8004526:	4699      	mov	r9, r3
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004530:	4293      	cmp	r3, r2
 8004532:	bfb8      	it	lt
 8004534:	4613      	movlt	r3, r2
 8004536:	6033      	str	r3, [r6, #0]
 8004538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800453c:	4607      	mov	r7, r0
 800453e:	460c      	mov	r4, r1
 8004540:	b10a      	cbz	r2, 8004546 <_printf_common+0x26>
 8004542:	3301      	adds	r3, #1
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	0699      	lsls	r1, r3, #26
 800454a:	bf42      	ittt	mi
 800454c:	6833      	ldrmi	r3, [r6, #0]
 800454e:	3302      	addmi	r3, #2
 8004550:	6033      	strmi	r3, [r6, #0]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	f015 0506 	ands.w	r5, r5, #6
 8004558:	d106      	bne.n	8004568 <_printf_common+0x48>
 800455a:	f104 0a19 	add.w	sl, r4, #25
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	6832      	ldr	r2, [r6, #0]
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	42ab      	cmp	r3, r5
 8004566:	dc26      	bgt.n	80045b6 <_printf_common+0x96>
 8004568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800456c:	1e13      	subs	r3, r2, #0
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	2301      	movne	r3, #1
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d42b      	bmi.n	80045d0 <_printf_common+0xb0>
 8004578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d01e      	beq.n	80045c4 <_printf_common+0xa4>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	2b04      	cmp	r3, #4
 8004590:	bf02      	ittt	eq
 8004592:	68e5      	ldreq	r5, [r4, #12]
 8004594:	6833      	ldreq	r3, [r6, #0]
 8004596:	1aed      	subeq	r5, r5, r3
 8004598:	68a3      	ldr	r3, [r4, #8]
 800459a:	bf0c      	ite	eq
 800459c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a0:	2500      	movne	r5, #0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bfc4      	itt	gt
 80045a6:	1a9b      	subgt	r3, r3, r2
 80045a8:	18ed      	addgt	r5, r5, r3
 80045aa:	2600      	movs	r6, #0
 80045ac:	341a      	adds	r4, #26
 80045ae:	42b5      	cmp	r5, r6
 80045b0:	d11a      	bne.n	80045e8 <_printf_common+0xc8>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e008      	b.n	80045c8 <_printf_common+0xa8>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4649      	mov	r1, r9
 80045bc:	4638      	mov	r0, r7
 80045be:	47c0      	blx	r8
 80045c0:	3001      	adds	r0, #1
 80045c2:	d103      	bne.n	80045cc <_printf_common+0xac>
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7c6      	b.n	800455e <_printf_common+0x3e>
 80045d0:	18e1      	adds	r1, r4, r3
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	2030      	movs	r0, #48	; 0x30
 80045d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045da:	4422      	add	r2, r4
 80045dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e4:	3302      	adds	r3, #2
 80045e6:	e7c7      	b.n	8004578 <_printf_common+0x58>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4622      	mov	r2, r4
 80045ec:	4649      	mov	r1, r9
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c0      	blx	r8
 80045f2:	3001      	adds	r0, #1
 80045f4:	d0e6      	beq.n	80045c4 <_printf_common+0xa4>
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7d9      	b.n	80045ae <_printf_common+0x8e>
	...

080045fc <_printf_i>:
 80045fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	7e0f      	ldrb	r7, [r1, #24]
 8004602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004604:	2f78      	cmp	r7, #120	; 0x78
 8004606:	4691      	mov	r9, r2
 8004608:	4680      	mov	r8, r0
 800460a:	460c      	mov	r4, r1
 800460c:	469a      	mov	sl, r3
 800460e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004612:	d807      	bhi.n	8004624 <_printf_i+0x28>
 8004614:	2f62      	cmp	r7, #98	; 0x62
 8004616:	d80a      	bhi.n	800462e <_printf_i+0x32>
 8004618:	2f00      	cmp	r7, #0
 800461a:	f000 80d4 	beq.w	80047c6 <_printf_i+0x1ca>
 800461e:	2f58      	cmp	r7, #88	; 0x58
 8004620:	f000 80c0 	beq.w	80047a4 <_printf_i+0x1a8>
 8004624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800462c:	e03a      	b.n	80046a4 <_printf_i+0xa8>
 800462e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004632:	2b15      	cmp	r3, #21
 8004634:	d8f6      	bhi.n	8004624 <_printf_i+0x28>
 8004636:	a101      	add	r1, pc, #4	; (adr r1, 800463c <_printf_i+0x40>)
 8004638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800463c:	08004695 	.word	0x08004695
 8004640:	080046a9 	.word	0x080046a9
 8004644:	08004625 	.word	0x08004625
 8004648:	08004625 	.word	0x08004625
 800464c:	08004625 	.word	0x08004625
 8004650:	08004625 	.word	0x08004625
 8004654:	080046a9 	.word	0x080046a9
 8004658:	08004625 	.word	0x08004625
 800465c:	08004625 	.word	0x08004625
 8004660:	08004625 	.word	0x08004625
 8004664:	08004625 	.word	0x08004625
 8004668:	080047ad 	.word	0x080047ad
 800466c:	080046d5 	.word	0x080046d5
 8004670:	08004767 	.word	0x08004767
 8004674:	08004625 	.word	0x08004625
 8004678:	08004625 	.word	0x08004625
 800467c:	080047cf 	.word	0x080047cf
 8004680:	08004625 	.word	0x08004625
 8004684:	080046d5 	.word	0x080046d5
 8004688:	08004625 	.word	0x08004625
 800468c:	08004625 	.word	0x08004625
 8004690:	0800476f 	.word	0x0800476f
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	602a      	str	r2, [r5, #0]
 800469c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a4:	2301      	movs	r3, #1
 80046a6:	e09f      	b.n	80047e8 <_printf_i+0x1ec>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	0607      	lsls	r7, r0, #24
 80046ae:	f103 0104 	add.w	r1, r3, #4
 80046b2:	6029      	str	r1, [r5, #0]
 80046b4:	d501      	bpl.n	80046ba <_printf_i+0xbe>
 80046b6:	681e      	ldr	r6, [r3, #0]
 80046b8:	e003      	b.n	80046c2 <_printf_i+0xc6>
 80046ba:	0646      	lsls	r6, r0, #25
 80046bc:	d5fb      	bpl.n	80046b6 <_printf_i+0xba>
 80046be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	da03      	bge.n	80046ce <_printf_i+0xd2>
 80046c6:	232d      	movs	r3, #45	; 0x2d
 80046c8:	4276      	negs	r6, r6
 80046ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ce:	485a      	ldr	r0, [pc, #360]	; (8004838 <_printf_i+0x23c>)
 80046d0:	230a      	movs	r3, #10
 80046d2:	e012      	b.n	80046fa <_printf_i+0xfe>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	1d19      	adds	r1, r3, #4
 80046da:	6029      	str	r1, [r5, #0]
 80046dc:	0605      	lsls	r5, r0, #24
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0xe8>
 80046e0:	681e      	ldr	r6, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0xee>
 80046e4:	0641      	lsls	r1, r0, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0xe4>
 80046e8:	881e      	ldrh	r6, [r3, #0]
 80046ea:	4853      	ldr	r0, [pc, #332]	; (8004838 <_printf_i+0x23c>)
 80046ec:	2f6f      	cmp	r7, #111	; 0x6f
 80046ee:	bf0c      	ite	eq
 80046f0:	2308      	moveq	r3, #8
 80046f2:	230a      	movne	r3, #10
 80046f4:	2100      	movs	r1, #0
 80046f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046fa:	6865      	ldr	r5, [r4, #4]
 80046fc:	60a5      	str	r5, [r4, #8]
 80046fe:	2d00      	cmp	r5, #0
 8004700:	bfa2      	ittt	ge
 8004702:	6821      	ldrge	r1, [r4, #0]
 8004704:	f021 0104 	bicge.w	r1, r1, #4
 8004708:	6021      	strge	r1, [r4, #0]
 800470a:	b90e      	cbnz	r6, 8004710 <_printf_i+0x114>
 800470c:	2d00      	cmp	r5, #0
 800470e:	d04b      	beq.n	80047a8 <_printf_i+0x1ac>
 8004710:	4615      	mov	r5, r2
 8004712:	fbb6 f1f3 	udiv	r1, r6, r3
 8004716:	fb03 6711 	mls	r7, r3, r1, r6
 800471a:	5dc7      	ldrb	r7, [r0, r7]
 800471c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004720:	4637      	mov	r7, r6
 8004722:	42bb      	cmp	r3, r7
 8004724:	460e      	mov	r6, r1
 8004726:	d9f4      	bls.n	8004712 <_printf_i+0x116>
 8004728:	2b08      	cmp	r3, #8
 800472a:	d10b      	bne.n	8004744 <_printf_i+0x148>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	07de      	lsls	r6, r3, #31
 8004730:	d508      	bpl.n	8004744 <_printf_i+0x148>
 8004732:	6923      	ldr	r3, [r4, #16]
 8004734:	6861      	ldr	r1, [r4, #4]
 8004736:	4299      	cmp	r1, r3
 8004738:	bfde      	ittt	le
 800473a:	2330      	movle	r3, #48	; 0x30
 800473c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004744:	1b52      	subs	r2, r2, r5
 8004746:	6122      	str	r2, [r4, #16]
 8004748:	f8cd a000 	str.w	sl, [sp]
 800474c:	464b      	mov	r3, r9
 800474e:	aa03      	add	r2, sp, #12
 8004750:	4621      	mov	r1, r4
 8004752:	4640      	mov	r0, r8
 8004754:	f7ff fee4 	bl	8004520 <_printf_common>
 8004758:	3001      	adds	r0, #1
 800475a:	d14a      	bne.n	80047f2 <_printf_i+0x1f6>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	b004      	add	sp, #16
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	4833      	ldr	r0, [pc, #204]	; (800483c <_printf_i+0x240>)
 8004770:	2778      	movs	r7, #120	; 0x78
 8004772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	6829      	ldr	r1, [r5, #0]
 800477a:	061f      	lsls	r7, r3, #24
 800477c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004780:	d402      	bmi.n	8004788 <_printf_i+0x18c>
 8004782:	065f      	lsls	r7, r3, #25
 8004784:	bf48      	it	mi
 8004786:	b2b6      	uxthmi	r6, r6
 8004788:	07df      	lsls	r7, r3, #31
 800478a:	bf48      	it	mi
 800478c:	f043 0320 	orrmi.w	r3, r3, #32
 8004790:	6029      	str	r1, [r5, #0]
 8004792:	bf48      	it	mi
 8004794:	6023      	strmi	r3, [r4, #0]
 8004796:	b91e      	cbnz	r6, 80047a0 <_printf_i+0x1a4>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	2310      	movs	r3, #16
 80047a2:	e7a7      	b.n	80046f4 <_printf_i+0xf8>
 80047a4:	4824      	ldr	r0, [pc, #144]	; (8004838 <_printf_i+0x23c>)
 80047a6:	e7e4      	b.n	8004772 <_printf_i+0x176>
 80047a8:	4615      	mov	r5, r2
 80047aa:	e7bd      	b.n	8004728 <_printf_i+0x12c>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	6826      	ldr	r6, [r4, #0]
 80047b0:	6961      	ldr	r1, [r4, #20]
 80047b2:	1d18      	adds	r0, r3, #4
 80047b4:	6028      	str	r0, [r5, #0]
 80047b6:	0635      	lsls	r5, r6, #24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	d501      	bpl.n	80047c0 <_printf_i+0x1c4>
 80047bc:	6019      	str	r1, [r3, #0]
 80047be:	e002      	b.n	80047c6 <_printf_i+0x1ca>
 80047c0:	0670      	lsls	r0, r6, #25
 80047c2:	d5fb      	bpl.n	80047bc <_printf_i+0x1c0>
 80047c4:	8019      	strh	r1, [r3, #0]
 80047c6:	2300      	movs	r3, #0
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	4615      	mov	r5, r2
 80047cc:	e7bc      	b.n	8004748 <_printf_i+0x14c>
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	1d1a      	adds	r2, r3, #4
 80047d2:	602a      	str	r2, [r5, #0]
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	2100      	movs	r1, #0
 80047da:	4628      	mov	r0, r5
 80047dc:	f7fb fd00 	bl	80001e0 <memchr>
 80047e0:	b108      	cbz	r0, 80047e6 <_printf_i+0x1ea>
 80047e2:	1b40      	subs	r0, r0, r5
 80047e4:	6060      	str	r0, [r4, #4]
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	2300      	movs	r3, #0
 80047ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f0:	e7aa      	b.n	8004748 <_printf_i+0x14c>
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	462a      	mov	r2, r5
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d0ad      	beq.n	800475c <_printf_i+0x160>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	079b      	lsls	r3, r3, #30
 8004804:	d413      	bmi.n	800482e <_printf_i+0x232>
 8004806:	68e0      	ldr	r0, [r4, #12]
 8004808:	9b03      	ldr	r3, [sp, #12]
 800480a:	4298      	cmp	r0, r3
 800480c:	bfb8      	it	lt
 800480e:	4618      	movlt	r0, r3
 8004810:	e7a6      	b.n	8004760 <_printf_i+0x164>
 8004812:	2301      	movs	r3, #1
 8004814:	4632      	mov	r2, r6
 8004816:	4649      	mov	r1, r9
 8004818:	4640      	mov	r0, r8
 800481a:	47d0      	blx	sl
 800481c:	3001      	adds	r0, #1
 800481e:	d09d      	beq.n	800475c <_printf_i+0x160>
 8004820:	3501      	adds	r5, #1
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	9903      	ldr	r1, [sp, #12]
 8004826:	1a5b      	subs	r3, r3, r1
 8004828:	42ab      	cmp	r3, r5
 800482a:	dcf2      	bgt.n	8004812 <_printf_i+0x216>
 800482c:	e7eb      	b.n	8004806 <_printf_i+0x20a>
 800482e:	2500      	movs	r5, #0
 8004830:	f104 0619 	add.w	r6, r4, #25
 8004834:	e7f5      	b.n	8004822 <_printf_i+0x226>
 8004836:	bf00      	nop
 8004838:	08004b81 	.word	0x08004b81
 800483c:	08004b92 	.word	0x08004b92

08004840 <__sflush_r>:
 8004840:	898a      	ldrh	r2, [r1, #12]
 8004842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004846:	4605      	mov	r5, r0
 8004848:	0710      	lsls	r0, r2, #28
 800484a:	460c      	mov	r4, r1
 800484c:	d458      	bmi.n	8004900 <__sflush_r+0xc0>
 800484e:	684b      	ldr	r3, [r1, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	dc05      	bgt.n	8004860 <__sflush_r+0x20>
 8004854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	dc02      	bgt.n	8004860 <__sflush_r+0x20>
 800485a:	2000      	movs	r0, #0
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004862:	2e00      	cmp	r6, #0
 8004864:	d0f9      	beq.n	800485a <__sflush_r+0x1a>
 8004866:	2300      	movs	r3, #0
 8004868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800486c:	682f      	ldr	r7, [r5, #0]
 800486e:	6a21      	ldr	r1, [r4, #32]
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	d032      	beq.n	80048da <__sflush_r+0x9a>
 8004874:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	075a      	lsls	r2, r3, #29
 800487a:	d505      	bpl.n	8004888 <__sflush_r+0x48>
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	1ac0      	subs	r0, r0, r3
 8004880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004882:	b10b      	cbz	r3, 8004888 <__sflush_r+0x48>
 8004884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004886:	1ac0      	subs	r0, r0, r3
 8004888:	2300      	movs	r3, #0
 800488a:	4602      	mov	r2, r0
 800488c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800488e:	6a21      	ldr	r1, [r4, #32]
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	d106      	bne.n	80048a8 <__sflush_r+0x68>
 800489a:	6829      	ldr	r1, [r5, #0]
 800489c:	291d      	cmp	r1, #29
 800489e:	d82b      	bhi.n	80048f8 <__sflush_r+0xb8>
 80048a0:	4a29      	ldr	r2, [pc, #164]	; (8004948 <__sflush_r+0x108>)
 80048a2:	410a      	asrs	r2, r1
 80048a4:	07d6      	lsls	r6, r2, #31
 80048a6:	d427      	bmi.n	80048f8 <__sflush_r+0xb8>
 80048a8:	2200      	movs	r2, #0
 80048aa:	6062      	str	r2, [r4, #4]
 80048ac:	04d9      	lsls	r1, r3, #19
 80048ae:	6922      	ldr	r2, [r4, #16]
 80048b0:	6022      	str	r2, [r4, #0]
 80048b2:	d504      	bpl.n	80048be <__sflush_r+0x7e>
 80048b4:	1c42      	adds	r2, r0, #1
 80048b6:	d101      	bne.n	80048bc <__sflush_r+0x7c>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b903      	cbnz	r3, 80048be <__sflush_r+0x7e>
 80048bc:	6560      	str	r0, [r4, #84]	; 0x54
 80048be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c0:	602f      	str	r7, [r5, #0]
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d0c9      	beq.n	800485a <__sflush_r+0x1a>
 80048c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ca:	4299      	cmp	r1, r3
 80048cc:	d002      	beq.n	80048d4 <__sflush_r+0x94>
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7ff fbea 	bl	80040a8 <_free_r>
 80048d4:	2000      	movs	r0, #0
 80048d6:	6360      	str	r0, [r4, #52]	; 0x34
 80048d8:	e7c0      	b.n	800485c <__sflush_r+0x1c>
 80048da:	2301      	movs	r3, #1
 80048dc:	4628      	mov	r0, r5
 80048de:	47b0      	blx	r6
 80048e0:	1c41      	adds	r1, r0, #1
 80048e2:	d1c8      	bne.n	8004876 <__sflush_r+0x36>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0c5      	beq.n	8004876 <__sflush_r+0x36>
 80048ea:	2b1d      	cmp	r3, #29
 80048ec:	d001      	beq.n	80048f2 <__sflush_r+0xb2>
 80048ee:	2b16      	cmp	r3, #22
 80048f0:	d101      	bne.n	80048f6 <__sflush_r+0xb6>
 80048f2:	602f      	str	r7, [r5, #0]
 80048f4:	e7b1      	b.n	800485a <__sflush_r+0x1a>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	e7ad      	b.n	800485c <__sflush_r+0x1c>
 8004900:	690f      	ldr	r7, [r1, #16]
 8004902:	2f00      	cmp	r7, #0
 8004904:	d0a9      	beq.n	800485a <__sflush_r+0x1a>
 8004906:	0793      	lsls	r3, r2, #30
 8004908:	680e      	ldr	r6, [r1, #0]
 800490a:	bf08      	it	eq
 800490c:	694b      	ldreq	r3, [r1, #20]
 800490e:	600f      	str	r7, [r1, #0]
 8004910:	bf18      	it	ne
 8004912:	2300      	movne	r3, #0
 8004914:	eba6 0807 	sub.w	r8, r6, r7
 8004918:	608b      	str	r3, [r1, #8]
 800491a:	f1b8 0f00 	cmp.w	r8, #0
 800491e:	dd9c      	ble.n	800485a <__sflush_r+0x1a>
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004924:	4643      	mov	r3, r8
 8004926:	463a      	mov	r2, r7
 8004928:	4628      	mov	r0, r5
 800492a:	47b0      	blx	r6
 800492c:	2800      	cmp	r0, #0
 800492e:	dc06      	bgt.n	800493e <__sflush_r+0xfe>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	e78e      	b.n	800485c <__sflush_r+0x1c>
 800493e:	4407      	add	r7, r0
 8004940:	eba8 0800 	sub.w	r8, r8, r0
 8004944:	e7e9      	b.n	800491a <__sflush_r+0xda>
 8004946:	bf00      	nop
 8004948:	dfbffffe 	.word	0xdfbffffe

0800494c <_fflush_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	4605      	mov	r5, r0
 8004952:	460c      	mov	r4, r1
 8004954:	b913      	cbnz	r3, 800495c <_fflush_r+0x10>
 8004956:	2500      	movs	r5, #0
 8004958:	4628      	mov	r0, r5
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	b118      	cbz	r0, 8004966 <_fflush_r+0x1a>
 800495e:	6a03      	ldr	r3, [r0, #32]
 8004960:	b90b      	cbnz	r3, 8004966 <_fflush_r+0x1a>
 8004962:	f7ff f9ab 	bl	8003cbc <__sinit>
 8004966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f3      	beq.n	8004956 <_fflush_r+0xa>
 800496e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004970:	07d0      	lsls	r0, r2, #31
 8004972:	d404      	bmi.n	800497e <_fflush_r+0x32>
 8004974:	0599      	lsls	r1, r3, #22
 8004976:	d402      	bmi.n	800497e <_fflush_r+0x32>
 8004978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497a:	f7ff fb93 	bl	80040a4 <__retarget_lock_acquire_recursive>
 800497e:	4628      	mov	r0, r5
 8004980:	4621      	mov	r1, r4
 8004982:	f7ff ff5d 	bl	8004840 <__sflush_r>
 8004986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004988:	07da      	lsls	r2, r3, #31
 800498a:	4605      	mov	r5, r0
 800498c:	d4e4      	bmi.n	8004958 <_fflush_r+0xc>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	059b      	lsls	r3, r3, #22
 8004992:	d4e1      	bmi.n	8004958 <_fflush_r+0xc>
 8004994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004996:	f7ff fb86 	bl	80040a6 <__retarget_lock_release_recursive>
 800499a:	e7dd      	b.n	8004958 <_fflush_r+0xc>

0800499c <__swhatbuf_r>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	460c      	mov	r4, r1
 80049a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a4:	2900      	cmp	r1, #0
 80049a6:	b096      	sub	sp, #88	; 0x58
 80049a8:	4615      	mov	r5, r2
 80049aa:	461e      	mov	r6, r3
 80049ac:	da0d      	bge.n	80049ca <__swhatbuf_r+0x2e>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80049be:	2340      	movne	r3, #64	; 0x40
 80049c0:	2000      	movs	r0, #0
 80049c2:	6031      	str	r1, [r6, #0]
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	b016      	add	sp, #88	; 0x58
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
 80049ca:	466a      	mov	r2, sp
 80049cc:	f000 f848 	bl	8004a60 <_fstat_r>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	dbec      	blt.n	80049ae <__swhatbuf_r+0x12>
 80049d4:	9901      	ldr	r1, [sp, #4]
 80049d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80049da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80049de:	4259      	negs	r1, r3
 80049e0:	4159      	adcs	r1, r3
 80049e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e6:	e7eb      	b.n	80049c0 <__swhatbuf_r+0x24>

080049e8 <__smakebuf_r>:
 80049e8:	898b      	ldrh	r3, [r1, #12]
 80049ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049ec:	079d      	lsls	r5, r3, #30
 80049ee:	4606      	mov	r6, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	d507      	bpl.n	8004a04 <__smakebuf_r+0x1c>
 80049f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	2301      	movs	r3, #1
 80049fe:	6163      	str	r3, [r4, #20]
 8004a00:	b002      	add	sp, #8
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	ab01      	add	r3, sp, #4
 8004a06:	466a      	mov	r2, sp
 8004a08:	f7ff ffc8 	bl	800499c <__swhatbuf_r>
 8004a0c:	9900      	ldr	r1, [sp, #0]
 8004a0e:	4605      	mov	r5, r0
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7ff fbb5 	bl	8004180 <_malloc_r>
 8004a16:	b948      	cbnz	r0, 8004a2c <__smakebuf_r+0x44>
 8004a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1c:	059a      	lsls	r2, r3, #22
 8004a1e:	d4ef      	bmi.n	8004a00 <__smakebuf_r+0x18>
 8004a20:	f023 0303 	bic.w	r3, r3, #3
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	e7e3      	b.n	80049f4 <__smakebuf_r+0xc>
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	6020      	str	r0, [r4, #0]
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	6163      	str	r3, [r4, #20]
 8004a3a:	9b01      	ldr	r3, [sp, #4]
 8004a3c:	6120      	str	r0, [r4, #16]
 8004a3e:	b15b      	cbz	r3, 8004a58 <__smakebuf_r+0x70>
 8004a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 f81d 	bl	8004a84 <_isatty_r>
 8004a4a:	b128      	cbz	r0, 8004a58 <__smakebuf_r+0x70>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	431d      	orrs	r5, r3
 8004a5c:	81a5      	strh	r5, [r4, #12]
 8004a5e:	e7cf      	b.n	8004a00 <__smakebuf_r+0x18>

08004a60 <_fstat_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <_fstat_r+0x20>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	f7fc fa2c 	bl	8000eca <_fstat>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	d102      	bne.n	8004a7c <_fstat_r+0x1c>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	b103      	cbz	r3, 8004a7c <_fstat_r+0x1c>
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000350 	.word	0x20000350

08004a84 <_isatty_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d06      	ldr	r5, [pc, #24]	; (8004aa0 <_isatty_r+0x1c>)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	602b      	str	r3, [r5, #0]
 8004a90:	f7fc fa2b 	bl	8000eea <_isatty>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_isatty_r+0x1a>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_isatty_r+0x1a>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	20000350 	.word	0x20000350

08004aa4 <_sbrk_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d06      	ldr	r5, [pc, #24]	; (8004ac0 <_sbrk_r+0x1c>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc fa34 	bl	8000f1c <_sbrk>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_sbrk_r+0x1a>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_sbrk_r+0x1a>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000350 	.word	0x20000350

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
