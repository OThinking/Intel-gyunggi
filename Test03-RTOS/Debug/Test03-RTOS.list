
Test03-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063fc  080063fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006404  08006404  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800640c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004204  2000006c  08006478  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004270  08006478  00024270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015039  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000317a  00000000  00000000  00035118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00038298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  000394d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019070  00000000  00000000  0003a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014914  00000000  00000000  0005335f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098b16  00000000  00000000  00067c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005378  00000000  00000000  0010078c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00105b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006220 	.word	0x08006220

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006220 	.word	0x08006220

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	20000128 	.word	0x20000128

080005b0 <__io_putchar>:
int __io_putchar(int c)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, &c, 1, 10);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	230a      	movs	r3, #10
 80005bc:	2201      	movs	r2, #1
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <__io_putchar+0x20>)
 80005c0:	f001 ff13 	bl	80023ea <HAL_UART_Transmit>
  return c;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000328 	.word	0x20000328

080005d4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
  osSemaphoreRelease(myBinarySem01Handle);
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fb88 	bl	8002cf8 <osSemaphoreRelease>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000037c 	.word	0x2000037c

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b0a0      	sub	sp, #128	; 0x80
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc47 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f8a5 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f937 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f90b 	bl	8000820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\033[2J\033[1;1HRTOS Test Program Started...\r\n");
 800060a:	4843      	ldr	r0, [pc, #268]	; (8000718 <main+0x124>)
 800060c:	f004 ff3c 	bl	8005488 <puts>
  printf("Press B1 button to release Semaphore...\r\n");
 8000610:	4842      	ldr	r0, [pc, #264]	; (800071c <main+0x128>)
 8000612:	f004 ff39 	bl	8005488 <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000616:	2300      	movs	r3, #0
 8000618:	677b      	str	r3, [r7, #116]	; 0x74
 800061a:	2300      	movs	r3, #0
 800061c:	67bb      	str	r3, [r7, #120]	; 0x78
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800061e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000622:	2101      	movs	r1, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fae6 	bl	8002bf6 <osSemaphoreCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a3c      	ldr	r2, [pc, #240]	; (8000720 <main+0x12c>)
 800062e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <main+0x130>)
 8000632:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000644:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fa73 	bl	8002b36 <osThreadCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <main+0x134>)
 8000654:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000656:	4b35      	ldr	r3, [pc, #212]	; (800072c <main+0x138>)
 8000658:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800066a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fa60 	bl	8002b36 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a2d      	ldr	r2, [pc, #180]	; (8000730 <main+0x13c>)
 800067a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 800067c:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <main+0x140>)
 800067e:	f107 0420 	add.w	r4, r7, #32
 8000682:	461d      	mov	r5, r3
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fa4d 	bl	8002b36 <osThreadCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a26      	ldr	r2, [pc, #152]	; (8000738 <main+0x144>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <main+0x148>)
 80006a4:	1d3c      	adds	r4, r7, #4
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fa3c 	bl	8002b36 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <main+0x14c>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  while(osSemaphoreWait(myBinarySem01Handle, 0) == osOK);
 80006c4:	bf00      	nop
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <main+0x12c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fac5 	bl	8002c5c <osSemaphoreWait>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f6      	beq.n	80006c6 <main+0xd2>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006d8:	f002 fa26 	bl	8002b28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int n = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	67fb      	str	r3, [r7, #124]	; 0x7c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("in Main procedure...%d\r\n",n++);
 80006e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80006e6:	4619      	mov	r1, r3
 80006e8:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0x150>)
 80006ea:	f004 fe67 	bl	80053bc <iprintf>
    HAL_GPIO_TogglePin(LDr_GPIO_Port, LDr_Pin);
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <main+0x154>)
 80006f4:	f000 feaf 	bl	8001456 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LDg_GPIO_Port, LDg_Pin);
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x154>)
 80006fe:	f000 feaa 	bl	8001456 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LDy_GPIO_Port, LDy_Pin);
 8000702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <main+0x154>)
 8000708:	f000 fea5 	bl	8001456 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 800070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000710:	f000 fbfe 	bl	8000f10 <HAL_Delay>
    printf("in Main procedure...%d\r\n",n++);
 8000714:	e7e4      	b.n	80006e0 <main+0xec>
 8000716:	bf00      	nop
 8000718:	08006238 	.word	0x08006238
 800071c:	08006260 	.word	0x08006260
 8000720:	2000037c 	.word	0x2000037c
 8000724:	080062b4 	.word	0x080062b4
 8000728:	2000036c 	.word	0x2000036c
 800072c:	080062dc 	.word	0x080062dc
 8000730:	20000370 	.word	0x20000370
 8000734:	08006304 	.word	0x08006304
 8000738:	20000374 	.word	0x20000374
 800073c:	0800632c 	.word	0x0800632c
 8000740:	20000378 	.word	0x20000378
 8000744:	0800628c 	.word	0x0800628c
 8000748:	40020000 	.word	0x40020000

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 ff74 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	; (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007bc:	2310      	movs	r3, #16
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fe72 	bl	80014bc <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007de:	f000 f961 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2102      	movs	r1, #2
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f8d4 	bl	80019ac <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f94b 	bl	8000aa4 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f001 fd7a 	bl	8002350 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f91f 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000328 	.word	0x20000328
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_GPIO_Init+0xe4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <MX_GPIO_Init+0xe4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_GPIO_Init+0xe4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_GPIO_Init+0xe4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LDr_Pin|LDg_Pin|LDy_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <MX_GPIO_Init+0xe8>)
 8000902:	f000 fd8f 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <MX_GPIO_Init+0xec>)
 800091e:	f000 fbfd 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LDr_Pin LDg_Pin LDy_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LDr_Pin|LDg_Pin|LDy_Pin;
 8000922:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <MX_GPIO_Init+0xe8>)
 800093c:	f000 fbee 	bl	800111c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2105      	movs	r1, #5
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f000 fbbf 	bl	80010c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094a:	2028      	movs	r0, #40	; 0x28
 800094c:	f000 fbd8 	bl	8001100 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020800 	.word	0x40020800

08000964 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  int n = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <StartTask01+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f970 	bl	8002c5c <osSemaphoreWait>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10b      	bne.n	800099a <StartTask01+0x36>
    {
      printf("\033[3;1Hin Task01...%d\r\n", n++);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	60fa      	str	r2, [r7, #12]
 8000988:	4619      	mov	r1, r3
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <StartTask01+0x44>)
 800098c:	f004 fd16 	bl	80053bc <iprintf>
//      HAL_GPIO_WritePin(LDr_GPIO_Port, LDr_Pin, 1);
//      HAL_Delay(100);
//      HAL_GPIO_WritePin(LDr_GPIO_Port, LDr_Pin, 0);
//      HAL_Delay(100);
      osSemaphoreRelease(myBinarySem01Handle);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <StartTask01+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f002 f9af 	bl	8002cf8 <osSemaphoreRelease>
    }
    osDelay(100);
 800099a:	2064      	movs	r0, #100	; 0x64
 800099c:	f002 f917 	bl	8002bce <osDelay>
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009a0:	e7e6      	b.n	8000970 <StartTask01+0xc>
 80009a2:	bf00      	nop
 80009a4:	2000037c 	.word	0x2000037c
 80009a8:	08006348 	.word	0x08006348

080009ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  int n = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <StartTask02+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 f94c 	bl	8002c5c <osSemaphoreWait>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <StartTask02+0x36>
      {
        printf("\033[5;1Hin Task02...%d\r\n", n++);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	4619      	mov	r1, r3
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <StartTask02+0x44>)
 80009d4:	f004 fcf2 	bl	80053bc <iprintf>
//        HAL_GPIO_WritePin(LDg_GPIO_Port, LDg_Pin, 1);
//        HAL_Delay(100);
//        HAL_GPIO_WritePin(LDg_GPIO_Port, LDg_Pin, 0);
//        HAL_Delay(100);
        osSemaphoreRelease(myBinarySem01Handle);
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <StartTask02+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f98b 	bl	8002cf8 <osSemaphoreRelease>
      }
      osDelay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f002 f8f3 	bl	8002bce <osDelay>
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80009e8:	e7e6      	b.n	80009b8 <StartTask02+0xc>
 80009ea:	bf00      	nop
 80009ec:	2000037c 	.word	0x2000037c
 80009f0:	08006360 	.word	0x08006360

080009f4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  int n = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <StartTask03+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f928 	bl	8002c5c <osSemaphoreWait>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10b      	bne.n	8000a2a <StartTask03+0x36>
      {
        printf("\033[7;1Hin Task03...%d\r\n", n++);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60fa      	str	r2, [r7, #12]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <StartTask03+0x44>)
 8000a1c:	f004 fcce 	bl	80053bc <iprintf>
//        HAL_GPIO_WritePin(LDy_GPIO_Port, LDy_Pin, 1);
//        HAL_Delay(100);
//        HAL_GPIO_WritePin(LDy_GPIO_Port, LDy_Pin, 0);
//        HAL_Delay(100);
        osSemaphoreRelease(myBinarySem01Handle);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <StartTask03+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 f967 	bl	8002cf8 <osSemaphoreRelease>
      }
      osDelay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f002 f8cf 	bl	8002bce <osDelay>
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a30:	e7e6      	b.n	8000a00 <StartTask03+0xc>
 8000a32:	bf00      	nop
 8000a34:	2000037c 	.word	0x2000037c
 8000a38:	08006378 	.word	0x08006378

08000a3c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  int n;
  for(;;)
  {
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <StartTask04+0x3c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 f906 	bl	8002c5c <osSemaphoreWait>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10b      	bne.n	8000a6e <StartTask04+0x32>
    {
      printf("\033[9;1Hin Task04...%d\r\n", n++);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	60fa      	str	r2, [r7, #12]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <StartTask04+0x40>)
 8000a60:	f004 fcac 	bl	80053bc <iprintf>
//      HAL_GPIO_WritePin(LDg_GPIO_Port, LDg_Pin, 1);
//      HAL_Delay(100);
//      HAL_GPIO_WritePin(LDg_GPIO_Port, LDg_Pin, 0);
//      HAL_Delay(100);
      osSemaphoreRelease(myBinarySem01Handle);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <StartTask04+0x3c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 f945 	bl	8002cf8 <osSemaphoreRelease>
    }
    osDelay(100);
 8000a6e:	2064      	movs	r0, #100	; 0x64
 8000a70:	f002 f8ad 	bl	8002bce <osDelay>
    if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8000a74:	e7e6      	b.n	8000a44 <StartTask04+0x8>
 8000a76:	bf00      	nop
 8000a78:	2000037c 	.word	0x2000037c
 8000a7c:	08006390 	.word	0x08006390

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 fa1d 	bl	8000ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40014800 	.word	0x40014800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_MspInit+0x54>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f000 fae7 	bl	80010c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0x8c>)
 8000b7e:	f000 facd 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_InitTick+0xd0>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a2d      	ldr	r2, [pc, #180]	; (8000c68 <HAL_InitTick+0xd0>)
 8000bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_InitTick+0xd0>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 020c 	add.w	r2, r7, #12
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f90c 	bl	8001dec <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bd4:	f001 f8f6 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 8000bd8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_InitTick+0xd4>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c9b      	lsrs	r3, r3, #18
 8000be4:	3b01      	subs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_InitTick+0xd8>)
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_InitTick+0xdc>)
 8000bec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <HAL_InitTick+0xd8>)
 8000bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_InitTick+0xd8>)
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_InitTick+0xd8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_InitTick+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_InitTick+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <HAL_InitTick+0xd8>)
 8000c10:	f001 f91e 	bl	8001e50 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d11b      	bne.n	8000c5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <HAL_InitTick+0xd8>)
 8000c24:	f001 f96e 	bl	8001f04 <HAL_TIM_Base_Start_IT>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c36:	201a      	movs	r0, #26
 8000c38:	f000 fa62 	bl	8001100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b0f      	cmp	r3, #15
 8000c40:	d808      	bhi.n	8000c54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000c42:	2200      	movs	r2, #0
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	201a      	movs	r0, #26
 8000c48:	f000 fa3e 	bl	80010c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_InitTick+0xe0>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e002      	b.n	8000c5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3730      	adds	r7, #48	; 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	20000380 	.word	0x20000380
 8000c74:	40014800 	.word	0x40014800
 8000c78:	20000004 	.word	0x20000004

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000cae:	f001 f98b 	bl	8001fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000380 	.word	0x20000380

08000cbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cc4:	f000 fbe2 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc45 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f004 fcda 	bl	8005790 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200003c8 	.word	0x200003c8
 8000e10:	20004270 	.word	0x20004270

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f004 fc99 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fbc3 	bl	80005f4 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e7c:	0800640c 	.word	0x0800640c
  ldr r2, =_sbss
 8000e80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e84:	20004270 	.word	0x20004270

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f8fc 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f7ff fe6c 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fdf6 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	200003cc 	.word	0x200003cc

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200003cc 	.word	0x200003cc

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010da:	f7ff ff61 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	6978      	ldr	r0, [r7, #20]
 80010e6:	f7ff ffb1 	bl	800104c <NVIC_EncodePriority>
 80010ea:	4602      	mov	r2, r0
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff80 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff54 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e159      	b.n	80013ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8148 	bne.w	80013e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a2 	beq.w	80013e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2e8>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a49      	ldr	r2, [pc, #292]	; (800140c <HAL_GPIO_Init+0x2f0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x202>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2f4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1fe>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	; (8001414 <HAL_GPIO_Init+0x2f8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1fa>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2fc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1f6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x300>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1f2>
 800130a:	2304      	movs	r3, #4
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800130e:	2307      	movs	r3, #7
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x204>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x204>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2ec>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x304>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x304>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_GPIO_Init+0x304>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f aea2 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	041a      	lsls	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43d9      	mvns	r1, r3
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	400b      	ands	r3, r1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f892 	bl	80005d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e267      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d075      	beq.n	80015c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014da:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d00c      	beq.n	8001500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b85      	ldr	r3, [pc, #532]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d112      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b82      	ldr	r3, [pc, #520]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x108>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d157      	bne.n	80015c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e242      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x74>
 8001522:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a75      	ldr	r2, [pc, #468]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6c      	ldr	r2, [pc, #432]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001554:	4b69      	ldr	r3, [pc, #420]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a68      	ldr	r2, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a65      	ldr	r2, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcc0 	bl	8000ef8 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcbc 	bl	8000ef8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e207      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xc0>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fcac 	bl	8000ef8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fca8 	bl	8000ef8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1f3      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0xe8>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4937      	ldr	r1, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	e03a      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x244>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fc61 	bl	8000ef8 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fc5d 	bl	8000ef8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1a8      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4925      	ldr	r1, [pc, #148]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x244>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fc40 	bl	8000ef8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fc3c 	bl	8000ef8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e187      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d036      	beq.n	8001714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d016      	beq.n	80016dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x248>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fc20 	bl	8000ef8 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc1c 	bl	8000ef8 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e167      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x240>)
 80016d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x200>
 80016da:	e01b      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x248>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fc09 	bl	8000ef8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	e00e      	b.n	8001708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc05 	bl	8000ef8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d907      	bls.n	8001708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e150      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000
 8001704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ea      	bne.n	80016ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8097 	beq.w	8001850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b7d      	ldr	r3, [pc, #500]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b7a      	ldr	r3, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b77      	ldr	r3, [pc, #476]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a73      	ldr	r2, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fbc5 	bl	8000ef8 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fbc1 	bl	8000ef8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e10c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x474>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2ea>
 8001798:	4b64      	ldr	r3, [pc, #400]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e01c      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x30c>
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5b      	ldr	r2, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017c8:	4b58      	ldr	r3, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a54      	ldr	r2, [pc, #336]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb86 	bl	8000ef8 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fb82 	bl	8000ef8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0cb      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ee      	beq.n	80017f0 <HAL_RCC_OscConfig+0x334>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fb70 	bl	8000ef8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff fb6c 	bl	8000ef8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b5      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ee      	bne.n	800181c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a38      	ldr	r2, [pc, #224]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a1 	beq.w	800199c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x470>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d05c      	beq.n	8001920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d141      	bne.n	80018f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb40 	bl	8000ef8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb3c 	bl	8000ef8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e087      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	019b      	lsls	r3, r3, #6
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb15 	bl	8000ef8 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb11 	bl	8000ef8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e05c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_RCC_OscConfig+0x470>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x416>
 80018f0:	e054      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x478>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fafe 	bl	8000ef8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fafa 	bl	8000ef8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x470>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x444>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e038      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x4ec>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d028      	beq.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d121      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001970:	4293      	cmp	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cc      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d90c      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d044      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e067      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa2c 	bl	8000ef8 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fa28 	bl	8000ef8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f820 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	080063b0 	.word	0x080063b0
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b094      	sub	sp, #80	; 0x50
 8001b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
 8001b84:	2300      	movs	r3, #0
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	f200 80e1 	bhi.w	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x34>
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001baa:	e0db      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bb0:	e0db      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb6:	e0d8      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
 8001be6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0159      	lsls	r1, r3, #5
 8001bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfc:	0150      	lsls	r0, r2, #5
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4621      	mov	r1, r4
 8001c04:	1a51      	subs	r1, r2, r1
 8001c06:	6139      	str	r1, [r7, #16]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	4651      	mov	r1, sl
 8001c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c26:	4651      	mov	r1, sl
 8001c28:	018a      	lsls	r2, r1, #6
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c30:	4659      	mov	r1, fp
 8001c32:	eb63 0901 	sbc.w	r9, r3, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	eb18 0303 	adds.w	r3, r8, r3
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	462b      	mov	r3, r5
 8001c58:	eb49 0303 	adc.w	r3, r9, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	024b      	lsls	r3, r1, #9
 8001c6e:	4621      	mov	r1, r4
 8001c70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c74:	4621      	mov	r1, r4
 8001c76:	024a      	lsls	r2, r1, #9
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c88:	f7fe fafa 	bl	8000280 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	0159      	lsls	r1, r3, #5
 8001cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc2:	0150      	lsls	r0, r2, #5
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4641      	mov	r1, r8
 8001cca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cce:	4649      	mov	r1, r9
 8001cd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cec:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	00eb      	lsls	r3, r5, #3
 8001cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	18e3      	adds	r3, r4, r3
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	eb45 0303 	adc.w	r3, r5, r3
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	028b      	lsls	r3, r1, #10
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d28:	4621      	mov	r1, r4
 8001d2a:	028a      	lsls	r2, r1, #10
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	61fa      	str	r2, [r7, #28]
 8001d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3c:	f7fe faa0 	bl	8000280 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3750      	adds	r7, #80	; 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	080063c0 	.word	0x080063c0

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffdc 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	080063c0 	.word	0x080063c0

08001dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	220f      	movs	r2, #15
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_RCC_GetClockConfig+0x60>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0207 	and.w	r2, r3, #7
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e041      	b.n	8001ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f839 	bl	8001eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f000 f9ca 	bl	8002228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e044      	b.n	8001fa6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x6c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d013      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x6c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x6c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_TIM_Base_Start_IT+0xb8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x6c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_TIM_Base_Start_IT+0x6c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d111      	bne.n	8001f94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d010      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f92:	e007      	b.n	8001fa4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40014000 	.word	0x40014000

08001fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0202 	mvn.w	r2, #2
 8001ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8ee 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8e0 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8f1 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b04      	cmp	r3, #4
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0204 	mvn.w	r2, #4
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8c4 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8b6 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8c7 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b08      	cmp	r3, #8
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b08      	cmp	r3, #8
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0208 	mvn.w	r2, #8
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2204      	movs	r2, #4
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f89a 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f88c 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f89d 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0210 	mvn.w	r2, #16
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2208      	movs	r2, #8
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f870 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f862 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f873 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0201 	mvn.w	r2, #1
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fc9a 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b80      	cmp	r3, #128	; 0x80
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b80      	cmp	r3, #128	; 0x80
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8e2 	bl	800233c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f838 	bl	8002214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0220 	mvn.w	r2, #32
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8ac 	bl	8002328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <TIM_Base_SetConfig+0xe4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00f      	beq.n	8002260 <TIM_Base_SetConfig+0x38>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x38>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a31      	ldr	r2, [pc, #196]	; (8002310 <TIM_Base_SetConfig+0xe8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <TIM_Base_SetConfig+0x38>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a30      	ldr	r2, [pc, #192]	; (8002314 <TIM_Base_SetConfig+0xec>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x38>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <TIM_Base_SetConfig+0xf0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <TIM_Base_SetConfig+0xe4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01b      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d017      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <TIM_Base_SetConfig+0xe8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a21      	ldr	r2, [pc, #132]	; (8002314 <TIM_Base_SetConfig+0xec>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00f      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a20      	ldr	r2, [pc, #128]	; (8002318 <TIM_Base_SetConfig+0xf0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1f      	ldr	r2, [pc, #124]	; (800231c <TIM_Base_SetConfig+0xf4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <TIM_Base_SetConfig+0xf8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_Base_SetConfig+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <TIM_Base_SetConfig+0xfc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <TIM_Base_SetConfig+0xe4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d103      	bne.n	80022f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800

08002328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e03f      	b.n	80023e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fbc6 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f929 	bl	80025ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	; 0x28
 80023ee:	af02      	add	r7, sp, #8
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	d17c      	bne.n	8002504 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_UART_Transmit+0x2c>
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e075      	b.n	8002506 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_UART_Transmit+0x3e>
 8002424:	2302      	movs	r3, #2
 8002426:	e06e      	b.n	8002506 <HAL_UART_Transmit+0x11c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800243e:	f7fe fd5b 	bl	8000ef8 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d108      	bne.n	800246c <HAL_UART_Transmit+0x82>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800247c:	e02a      	b.n	80024d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f840 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e036      	b.n	8002506 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10b      	bne.n	80024b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	3302      	adds	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	e007      	b.n	80024c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1cf      	bne.n	800247e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f810 	bl	800250e <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b090      	sub	sp, #64	; 0x40
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4613      	mov	r3, r2
 800251c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251e:	e050      	b.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d04c      	beq.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <UART_WaitOnFlagUntilTimeout+0x30>
 800252e:	f7fe fce3 	bl	8000ef8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800253a:	429a      	cmp	r2, r3
 800253c:	d241      	bcs.n	80025c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002554:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800255e:	637a      	str	r2, [r7, #52]	; 0x34
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	613b      	str	r3, [r7, #16]
   return(result);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3314      	adds	r3, #20
 8002590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002592:	623a      	str	r2, [r7, #32]
 8002594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	69f9      	ldr	r1, [r7, #28]
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	61bb      	str	r3, [r7, #24]
   return(result);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e00f      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d09f      	beq.n	8002520 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3740      	adds	r7, #64	; 0x40
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b0c0      	sub	sp, #256	; 0x100
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	ea40 0301 	orr.w	r3, r0, r1
 8002614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002644:	f021 010c 	bic.w	r1, r1, #12
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002652:	430b      	orrs	r3, r1
 8002654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	6999      	ldr	r1, [r3, #24]
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	ea40 0301 	orr.w	r3, r0, r1
 8002672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <UART_SetConfig+0x2cc>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <UART_SetConfig+0xa0>
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <UART_SetConfig+0x2d0>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d104      	bne.n	8002696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800268c:	f7ff fb9a 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 8002690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002694:	e003      	b.n	800269e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7ff fb81 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 800269a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026a8:	f040 810c 	bne.w	80028c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	1891      	adds	r1, r2, r2
 80026c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80026c6:	415b      	adcs	r3, r3
 80026c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026ce:	4621      	mov	r1, r4
 80026d0:	eb12 0801 	adds.w	r8, r2, r1
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb43 0901 	adc.w	r9, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb18 0303 	adds.w	r3, r8, r3
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002712:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800271a:	460b      	mov	r3, r1
 800271c:	18db      	adds	r3, r3, r3
 800271e:	653b      	str	r3, [r7, #80]	; 0x50
 8002720:	4613      	mov	r3, r2
 8002722:	eb42 0303 	adc.w	r3, r2, r3
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800272c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002730:	f7fd fda6 	bl	8000280 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <UART_SetConfig+0x2d4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800274c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	64b9      	str	r1, [r7, #72]	; 0x48
 800275c:	415b      	adcs	r3, r3
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002764:	4641      	mov	r1, r8
 8002766:	eb12 0a01 	adds.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb43 0b01 	adc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800277c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002784:	4692      	mov	sl, r2
 8002786:	469b      	mov	fp, r3
 8002788:	4643      	mov	r3, r8
 800278a:	eb1a 0303 	adds.w	r3, sl, r3
 800278e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002792:	464b      	mov	r3, r9
 8002794:	eb4b 0303 	adc.w	r3, fp, r3
 8002798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027b0:	460b      	mov	r3, r1
 80027b2:	18db      	adds	r3, r3, r3
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
 80027b6:	4613      	mov	r3, r2
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
 80027be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027c6:	f7fd fd5b 	bl	8000280 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <UART_SetConfig+0x2d4>)
 80027d2:	fba3 2301 	umull	r2, r3, r3, r1
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2264      	movs	r2, #100	; 0x64
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <UART_SetConfig+0x2d4>)
 80027e8:	fba3 2302 	umull	r2, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f4:	441c      	add	r4, r3
 80027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002800:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002810:	415b      	adcs	r3, r3
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6339      	str	r1, [r7, #48]	; 0x30
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800284c:	464b      	mov	r3, r9
 800284e:	460a      	mov	r2, r1
 8002850:	eb42 0303 	adc.w	r3, r2, r3
 8002854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002864:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800286c:	460b      	mov	r3, r1
 800286e:	18db      	adds	r3, r3, r3
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	4613      	mov	r3, r2
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800287e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002882:	f7fd fcfd 	bl	8000280 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <UART_SetConfig+0x2d4>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <UART_SetConfig+0x2d4>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4422      	add	r2, r4
 80028b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b4:	e106      	b.n	8002ac4 <UART_SetConfig+0x4d8>
 80028b6:	bf00      	nop
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028d6:	4642      	mov	r2, r8
 80028d8:	464b      	mov	r3, r9
 80028da:	1891      	adds	r1, r2, r2
 80028dc:	6239      	str	r1, [r7, #32]
 80028de:	415b      	adcs	r3, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028e6:	4641      	mov	r1, r8
 80028e8:	1854      	adds	r4, r2, r1
 80028ea:	4649      	mov	r1, r9
 80028ec:	eb43 0501 	adc.w	r5, r3, r1
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	00eb      	lsls	r3, r5, #3
 80028fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fe:	00e2      	lsls	r2, r4, #3
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4643      	mov	r3, r8
 8002906:	18e3      	adds	r3, r4, r3
 8002908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800290c:	464b      	mov	r3, r9
 800290e:	eb45 0303 	adc.w	r3, r5, r3
 8002912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002932:	4629      	mov	r1, r5
 8002934:	008b      	lsls	r3, r1, #2
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293c:	4621      	mov	r1, r4
 800293e:	008a      	lsls	r2, r1, #2
 8002940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002944:	f7fd fc9c 	bl	8000280 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4b60      	ldr	r3, [pc, #384]	; (8002ad0 <UART_SetConfig+0x4e4>)
 800294e:	fba3 2302 	umull	r2, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	011c      	lsls	r4, r3, #4
 8002956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002960:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	61b9      	str	r1, [r7, #24]
 8002970:	415b      	adcs	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002978:	4641      	mov	r1, r8
 800297a:	1851      	adds	r1, r2, r1
 800297c:	6139      	str	r1, [r7, #16]
 800297e:	4649      	mov	r1, r9
 8002980:	414b      	adcs	r3, r1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002990:	4659      	mov	r1, fp
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299a:	4651      	mov	r1, sl
 800299c:	00ca      	lsls	r2, r1, #3
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	4642      	mov	r2, r8
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029ac:	464b      	mov	r3, r9
 80029ae:	460a      	mov	r2, r1
 80029b0:	eb42 0303 	adc.w	r3, r2, r3
 80029b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029d0:	4649      	mov	r1, r9
 80029d2:	008b      	lsls	r3, r1, #2
 80029d4:	4641      	mov	r1, r8
 80029d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029da:	4641      	mov	r1, r8
 80029dc:	008a      	lsls	r2, r1, #2
 80029de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029e2:	f7fd fc4d 	bl	8000280 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <UART_SetConfig+0x4e4>)
 80029ee:	fba3 2301 	umull	r2, r3, r3, r1
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2264      	movs	r2, #100	; 0x64
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	1acb      	subs	r3, r1, r3
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	3332      	adds	r3, #50	; 0x32
 8002a00:	4a33      	ldr	r2, [pc, #204]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	441c      	add	r4, r3
 8002a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a12:	2200      	movs	r2, #0
 8002a14:	673b      	str	r3, [r7, #112]	; 0x70
 8002a16:	677a      	str	r2, [r7, #116]	; 0x74
 8002a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	1891      	adds	r1, r2, r2
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	415b      	adcs	r3, r3
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	1851      	adds	r1, r2, r1
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	4649      	mov	r1, r9
 8002a34:	414b      	adcs	r3, r1
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a44:	4659      	mov	r1, fp
 8002a46:	00cb      	lsls	r3, r1, #3
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4e:	4651      	mov	r1, sl
 8002a50:	00ca      	lsls	r2, r1, #3
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	4642      	mov	r2, r8
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a5e:	464b      	mov	r3, r9
 8002a60:	460a      	mov	r2, r1
 8002a62:	eb42 0303 	adc.w	r3, r2, r3
 8002a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	663b      	str	r3, [r7, #96]	; 0x60
 8002a72:	667a      	str	r2, [r7, #100]	; 0x64
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a80:	4649      	mov	r1, r9
 8002a82:	008b      	lsls	r3, r1, #2
 8002a84:	4641      	mov	r1, r8
 8002a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	008a      	lsls	r2, r1, #2
 8002a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a92:	f7fd fbf5 	bl	8000280 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	2164      	movs	r1, #100	; 0x64
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	3332      	adds	r3, #50	; 0x32
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <UART_SetConfig+0x4e4>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	f003 020f 	and.w	r2, r3, #15
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4422      	add	r2, r4
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad0:	51eb851f 	.word	0x51eb851f

08002ad4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae6:	2b84      	cmp	r3, #132	; 0x84
 8002ae8:	d005      	beq.n	8002af6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	3303      	adds	r3, #3
 8002af4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0a:	f3ef 8305 	mrs	r3, IPSR
 8002b0e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b2c:	f001 f926 	bl	8003d7c <vTaskStartScheduler>
  
  return osOK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b089      	sub	sp, #36	; 0x24
 8002b3a:	af04      	add	r7, sp, #16
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <osThreadCreate+0x54>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01c      	beq.n	8002b8a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685c      	ldr	r4, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691e      	ldr	r6, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ffb6 	bl	8002ad4 <makeFreeRtosPriority>
 8002b68:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b72:	9202      	str	r2, [sp, #8]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9100      	str	r1, [sp, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 ff1e 	bl	80039c0 <xTaskCreateStatic>
 8002b84:	4603      	mov	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e01c      	b.n	8002bc4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685c      	ldr	r4, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b96:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff98 	bl	8002ad4 <makeFreeRtosPriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4632      	mov	r2, r6
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 ff60 	bl	8003a7a <xTaskCreate>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <osDelay+0x16>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	e000      	b.n	8002be6 <osDelay+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f894 	bl	8003d14 <vTaskDelay>
  
  return osOK;
 8002bec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00f      	beq.n	8002c28 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10a      	bne.n	8002c24 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2203      	movs	r2, #3
 8002c14:	9200      	str	r2, [sp, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 f9be 	bl	8002f9c <xQueueGenericCreateStatic>
 8002c20:	4603      	mov	r3, r0
 8002c22:	e016      	b.n	8002c52 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e014      	b.n	8002c52 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d110      	bne.n	8002c50 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002c2e:	2203      	movs	r2, #3
 8002c30:	2100      	movs	r1, #0
 8002c32:	2001      	movs	r0, #1
 8002c34:	f000 fa2a 	bl	800308c <xQueueGenericCreate>
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <osSemaphoreCreate+0x56>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa7a 	bl	8003140 <xQueueGenericSend>
      return sema;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	e000      	b.n	8002c52 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002c50:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	e03a      	b.n	8002cea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d103      	bne.n	8002c88 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e009      	b.n	8002c9c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <osSemaphoreWait+0x40>
      ticks = 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002c9c:	f7ff ff32 	bl	8002b04 <inHandlerMode>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	461a      	mov	r2, r3
 8002cac:	2100      	movs	r1, #0
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fcde 	bl	8003670 <xQueueReceiveFromISR>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <osSemaphoreWait+0x62>
      return osErrorOS;
 8002cba:	23ff      	movs	r3, #255	; 0xff
 8002cbc:	e015      	b.n	8002cea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d011      	beq.n	8002ce8 <osSemaphoreWait+0x8c>
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <osSemaphoreWait+0x98>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	e008      	b.n	8002ce8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002cd6:	68f9      	ldr	r1, [r7, #12]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fbbd 	bl	8003458 <xQueueSemaphoreTake>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d001      	beq.n	8002ce8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002ce4:	23ff      	movs	r3, #255	; 0xff
 8002ce6:	e000      	b.n	8002cea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002d08:	f7ff fefc 	bl	8002b04 <inHandlerMode>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fb0f 	bl	800333c <xQueueGiveFromISR>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d001      	beq.n	8002d28 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002d24:	23ff      	movs	r3, #255	; 0xff
 8002d26:	e017      	b.n	8002d58 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d013      	beq.n	8002d56 <osSemaphoreRelease+0x5e>
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <osSemaphoreRelease+0x68>)
 8002d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	e00a      	b.n	8002d56 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9fa 	bl	8003140 <xQueueGenericSend>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002d52:	23ff      	movs	r3, #255	; 0xff
 8002d54:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f103 0208 	add.w	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0208 	add.w	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f103 0208 	add.w	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d103      	bne.n	8002e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e00c      	b.n	8002e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e002      	b.n	8002e34 <vListInsert+0x2e>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d2f6      	bcs.n	8002e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6852      	ldr	r2, [r2, #4]
 8002e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d103      	bne.n	8002eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ef2:	bf00      	nop
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ef6:	f001 fea5 	bl	8004c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	3b01      	subs	r3, #1
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	441a      	add	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d114      	bne.n	8002f76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01a      	beq.n	8002f8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3310      	adds	r3, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f961 	bl	8004220 <xTaskRemoveFromEventList>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <xQueueGenericReset+0xcc>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	e009      	b.n	8002f8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3310      	adds	r3, #16
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fef2 	bl	8002d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3324      	adds	r3, #36	; 0x24
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff feed 	bl	8002d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f8a:	f001 fe8b 	bl	8004ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	e000ed04 	.word	0xe000ed04

08002f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	; 0x38
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <xQueueGenericCreateStatic+0x52>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <xQueueGenericCreateStatic+0x56>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueGenericCreateStatic+0x58>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	623b      	str	r3, [r7, #32]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <xQueueGenericCreateStatic+0x7e>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <xQueueGenericCreateStatic+0x82>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericCreateStatic+0x84>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	61fb      	str	r3, [r7, #28]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800303a:	2348      	movs	r3, #72	; 0x48
 800303c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b48      	cmp	r3, #72	; 0x48
 8003042:	d00a      	beq.n	800305a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61bb      	str	r3, [r7, #24]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800305a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800306e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f83f 	bl	8003100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003084:	4618      	mov	r0, r3
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	613b      	str	r3, [r7, #16]
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	3348      	adds	r3, #72	; 0x48
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 fedf 	bl	8004e88 <pvPortMalloc>
 80030ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3348      	adds	r3, #72	; 0x48
 80030da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f805 	bl	8003100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030f6:	69bb      	ldr	r3, [r7, #24]
	}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e002      	b.n	8003122 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800312e:	2101      	movs	r1, #1
 8003130:	69b8      	ldr	r0, [r7, #24]
 8003132:	f7ff fecb 	bl	8002ecc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericSend+0x32>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <xQueueGenericSend+0x40>
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <xQueueGenericSend+0x44>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <xQueueGenericSend+0x46>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <xQueueGenericSend+0x60>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d103      	bne.n	80031ae <xQueueGenericSend+0x6e>
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <xQueueGenericSend+0x72>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <xQueueGenericSend+0x74>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xQueueGenericSend+0x8e>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	623b      	str	r3, [r7, #32]
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ce:	f001 f9e7 	bl	80045a0 <xTaskGetSchedulerState>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <xQueueGenericSend+0x9e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <xQueueGenericSend+0xa2>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xQueueGenericSend+0xa4>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <xQueueGenericSend+0xbe>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	61fb      	str	r3, [r7, #28]
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031fe:	f001 fd21 	bl	8004c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	429a      	cmp	r2, r3
 800320c:	d302      	bcc.n	8003214 <xQueueGenericSend+0xd4>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d129      	bne.n	8003268 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800321a:	f000 fac1 	bl	80037a0 <prvCopyDataToQueue>
 800321e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fff7 	bl	8004220 <xTaskRemoveFromEventList>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <xQueueGenericSend+0x1f8>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	e00a      	b.n	8003260 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <xQueueGenericSend+0x1f8>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003260:	f001 fd20 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 8003264:	2301      	movs	r3, #1
 8003266:	e063      	b.n	8003330 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800326e:	f001 fd19 	bl	8004ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003272:	2300      	movs	r3, #0
 8003274:	e05c      	b.n	8003330 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4618      	mov	r0, r3
 8003282:	f001 f82f 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800328a:	f001 fd0b 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800328e:	f000 fddf 	bl	8003e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003292:	f001 fcd7 	bl	8004c44 <vPortEnterCritical>
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329c:	b25b      	sxtb	r3, r3
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d103      	bne.n	80032ac <xQueueGenericSend+0x16c>
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d103      	bne.n	80032c2 <xQueueGenericSend+0x182>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c2:	f001 fcef 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032c6:	1d3a      	adds	r2, r7, #4
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 f81e 	bl	8004310 <xTaskCheckForTimeOut>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d124      	bne.n	8003324 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032dc:	f000 fb58 	bl	8003990 <prvIsQueueFull>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d018      	beq.n	8003318 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	3310      	adds	r3, #16
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 ff72 	bl	80041d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f6:	f000 fae3 	bl	80038c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032fa:	f000 fdb7 	bl	8003e6c <xTaskResumeAll>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f af7c 	bne.w	80031fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <xQueueGenericSend+0x1f8>)
 8003308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	e772      	b.n	80031fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800331a:	f000 fad1 	bl	80038c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800331e:	f000 fda5 	bl	8003e6c <xTaskResumeAll>
 8003322:	e76c      	b.n	80031fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003326:	f000 facb 	bl	80038c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800332a:	f000 fd9f 	bl	8003e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800332e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003330:	4618      	mov	r0, r3
 8003332:	3738      	adds	r7, #56	; 0x38
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08e      	sub	sp, #56	; 0x38
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	623b      	str	r3, [r7, #32]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <xQueueGiveFromISR+0x48>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	61fb      	str	r3, [r7, #28]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueGiveFromISR+0x58>
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGiveFromISR+0x5c>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGiveFromISR+0x5e>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	61bb      	str	r3, [r7, #24]
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033b4:	f001 fd28 	bl	8004e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033b8:	f3ef 8211 	mrs	r2, BASEPRI
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	617a      	str	r2, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d22b      	bcs.n	800343c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d112      	bne.n	8003426 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	3324      	adds	r3, #36	; 0x24
 800340c:	4618      	mov	r0, r3
 800340e:	f000 ff07 	bl	8004220 <xTaskRemoveFromEventList>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e007      	b.n	8003436 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342a:	3301      	adds	r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	b25a      	sxtb	r2, r3
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003436:	2301      	movs	r3, #1
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	e001      	b.n	8003440 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800343c:	2300      	movs	r3, #0
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800344a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800344e:	4618      	mov	r0, r3
 8003450:	3738      	adds	r7, #56	; 0x38
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	623b      	str	r3, [r7, #32]
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	61fb      	str	r3, [r7, #28]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a8:	f001 f87a 	bl	80045a0 <xTaskGetSchedulerState>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <xQueueSemaphoreTake+0x60>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <xQueueSemaphoreTake+0x64>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <xQueueSemaphoreTake+0x66>
 80034bc:	2300      	movs	r3, #0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	61bb      	str	r3, [r7, #24]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d8:	f001 fbb4 	bl	8004c44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d024      	beq.n	8003532 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034f8:	f001 f9fa 	bl	80048f0 <pvTaskIncrementMutexHeldCount>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	3310      	adds	r3, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fe86 	bl	8004220 <xTaskRemoveFromEventList>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <xQueueSemaphoreTake+0x214>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800352a:	f001 fbbb 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 800352e:	2301      	movs	r3, #1
 8003530:	e097      	b.n	8003662 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	617b      	str	r3, [r7, #20]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003554:	f001 fba6 	bl	8004ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003558:	2300      	movs	r3, #0
 800355a:	e082      	b.n	8003662 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4618      	mov	r0, r3
 8003568:	f000 febc 	bl	80042e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003570:	f001 fb98 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003574:	f000 fc6c 	bl	8003e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003578:	f001 fb64 	bl	8004c44 <vPortEnterCritical>
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003582:	b25b      	sxtb	r3, r3
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d103      	bne.n	8003592 <xQueueSemaphoreTake+0x13a>
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003598:	b25b      	sxtb	r3, r3
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d103      	bne.n	80035a8 <xQueueSemaphoreTake+0x150>
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a8:	f001 fb7c 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ac:	463a      	mov	r2, r7
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 feab 	bl	8004310 <xTaskCheckForTimeOut>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d132      	bne.n	8003626 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035c2:	f000 f9cf 	bl	8003964 <prvIsQueueEmpty>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d026      	beq.n	800361a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035d4:	f001 fb36 	bl	8004c44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fffd 	bl	80045dc <xTaskPriorityInherit>
 80035e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80035e4:	f001 fb5e 	bl	8004ca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fdf1 	bl	80041d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f8:	f000 f962 	bl	80038c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fc36 	bl	8003e6c <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f47f af68 	bne.w	80034d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <xQueueSemaphoreTake+0x214>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	e75e      	b.n	80034d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800361a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800361c:	f000 f950 	bl	80038c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003620:	f000 fc24 	bl	8003e6c <xTaskResumeAll>
 8003624:	e758      	b.n	80034d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003628:	f000 f94a 	bl	80038c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362c:	f000 fc1e 	bl	8003e6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003632:	f000 f997 	bl	8003964 <prvIsQueueEmpty>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f43f af4d 	beq.w	80034d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003644:	f001 fafe 	bl	8004c44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800364a:	f000 f891 	bl	8003770 <prvGetDisinheritPriorityAfterTimeout>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f8bc 	bl	80047d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800365c:	f001 fb22 	bl	8004ca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003662:	4618      	mov	r0, r3
 8003664:	3738      	adds	r7, #56	; 0x38
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	; 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	623b      	str	r3, [r7, #32]
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <xQueueReceiveFromISR+0x3a>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <xQueueReceiveFromISR+0x3e>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueReceiveFromISR+0x40>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	61fb      	str	r3, [r7, #28]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ca:	f001 fb9d 	bl	8004e08 <vPortValidateInterruptPriority>
	__asm volatile
 80036ce:	f3ef 8211 	mrs	r2, BASEPRI
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	61ba      	str	r2, [r7, #24]
 80036e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d02f      	beq.n	8003756 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003704:	f000 f8b6 	bl	8003874 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d112      	bne.n	8003740 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	3310      	adds	r3, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd7a 	bl	8004220 <xTaskRemoveFromEventList>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00e      	beq.n	8003750 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e007      	b.n	8003750 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003744:	3301      	adds	r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	b25a      	sxtb	r2, r3
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003750:	2301      	movs	r3, #1
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
 8003754:	e001      	b.n	800375a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f383 8811 	msr	BASEPRI, r3
}
 8003764:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003768:	4618      	mov	r0, r3
 800376a:	3738      	adds	r7, #56	; 0x38
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e001      	b.n	8003792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003792:	68fb      	ldr	r3, [r7, #12]
	}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d14d      	bne.n	8003862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ff7c 	bl	80046c8 <xTaskPriorityDisinherit>
 80037d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	e043      	b.n	8003862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d119      	bne.n	8003814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6858      	ldr	r0, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	461a      	mov	r2, r3
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	f001 fffc 	bl	80057e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	d32b      	bcc.n	8003862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	e026      	b.n	8003862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68d8      	ldr	r0, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	461a      	mov	r2, r3
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	f001 ffe2 	bl	80057e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	425b      	negs	r3, r3
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d207      	bcs.n	8003850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	425b      	negs	r3, r3
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d105      	bne.n	8003862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	3b01      	subs	r3, #1
 8003860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d018      	beq.n	80038b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d303      	bcc.n	80038a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68d9      	ldr	r1, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	461a      	mov	r2, r3
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	f001 ff98 	bl	80057e8 <memcpy>
	}
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038c8:	f001 f9bc 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038d4:	e011      	b.n	80038fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fc9c 	bl	8004220 <xTaskRemoveFromEventList>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038ee:	f000 fd71 	bl	80043d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	dce9      	bgt.n	80038d6 <prvUnlockQueue+0x16>
 8003902:	e000      	b.n	8003906 <prvUnlockQueue+0x46>
					break;
 8003904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800390e:	f001 f9c9 	bl	8004ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003912:	f001 f997 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800391c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800391e:	e011      	b.n	8003944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3310      	adds	r3, #16
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fc77 	bl	8004220 <xTaskRemoveFromEventList>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003938:	f000 fd4c 	bl	80043d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800393c:	7bbb      	ldrb	r3, [r7, #14]
 800393e:	3b01      	subs	r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003948:	2b00      	cmp	r3, #0
 800394a:	dce9      	bgt.n	8003920 <prvUnlockQueue+0x60>
 800394c:	e000      	b.n	8003950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800394e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	22ff      	movs	r2, #255	; 0xff
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003958:	f001 f9a4 	bl	8004ca4 <vPortExitCritical>
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800396c:	f001 f96a 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e001      	b.n	8003982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003982:	f001 f98f 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003998:	f001 f954 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d102      	bne.n	80039ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e001      	b.n	80039b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039b2:	f001 f977 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	623b      	str	r3, [r7, #32]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xTaskCreateStatic+0x46>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61fb      	str	r3, [r7, #28]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a06:	23a0      	movs	r3, #160	; 0xa0
 8003a08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2ba0      	cmp	r3, #160	; 0xa0
 8003a0e:	d00a      	beq.n	8003a26 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61bb      	str	r3, [r7, #24]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01e      	beq.n	8003a6c <xTaskCreateStatic+0xac>
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a46:	2300      	movs	r3, #0
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f850 	bl	8003b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a66:	f000 f8eb 	bl	8003c40 <prvAddNewTaskToReadyList>
 8003a6a:	e001      	b.n	8003a70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a70:	697b      	ldr	r3, [r7, #20]
	}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3728      	adds	r7, #40	; 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08c      	sub	sp, #48	; 0x30
 8003a7e:	af04      	add	r7, sp, #16
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f9fa 	bl	8004e88 <pvPortMalloc>
 8003a94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a9c:	20a0      	movs	r0, #160	; 0xa0
 8003a9e:	f001 f9f3 	bl	8004e88 <pvPortMalloc>
 8003aa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab0:	e005      	b.n	8003abe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f001 fab4 	bl	8005020 <vPortFree>
 8003ab8:	e001      	b.n	8003abe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f80e 	bl	8003b04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae8:	69f8      	ldr	r0, [r7, #28]
 8003aea:	f000 f8a9 	bl	8003c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e002      	b.n	8003afa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003afa:	69bb      	ldr	r3, [r7, #24]
	}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	617b      	str	r3, [r7, #20]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01f      	beq.n	8003b92 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e012      	b.n	8003b7e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	7819      	ldrb	r1, [r3, #0]
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	3334      	adds	r3, #52	; 0x34
 8003b68:	460a      	mov	r2, r1
 8003b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d9e9      	bls.n	8003b58 <prvInitialiseNewTask+0x54>
 8003b84:	e000      	b.n	8003b88 <prvInitialiseNewTask+0x84>
			{
				break;
 8003b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b90:	e003      	b.n	8003b9a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d901      	bls.n	8003ba4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ba0:	2306      	movs	r3, #6
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f8f2 	bl	8002da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f8ed 	bl	8002da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	f1c3 0207 	rsb	r2, r3, #7
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	334c      	adds	r3, #76	; 0x4c
 8003bf4:	224c      	movs	r2, #76	; 0x4c
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fd25 	bl	8005648 <memset>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <prvInitialiseNewTask+0x130>)
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <prvInitialiseNewTask+0x134>)
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <prvInitialiseNewTask+0x138>)
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	69b8      	ldr	r0, [r7, #24]
 8003c16:	f000 fee5 	bl	80049e4 <pxPortInitialiseStack>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20004124 	.word	0x20004124
 8003c38:	2000418c 	.word	0x2000418c
 8003c3c:	200041f4 	.word	0x200041f4

08003c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c48:	f000 fffc 	bl	8004c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <prvAddNewTaskToReadyList+0xb8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <prvAddNewTaskToReadyList+0xb8>)
 8003c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <prvAddNewTaskToReadyList+0xbc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c5e:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <prvAddNewTaskToReadyList+0xbc>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c64:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <prvAddNewTaskToReadyList+0xb8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d110      	bne.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c6c:	f000 fbd6 	bl	800441c <prvInitialiseTaskLists>
 8003c70:	e00d      	b.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <prvAddNewTaskToReadyList+0xc0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <prvAddNewTaskToReadyList+0xbc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d802      	bhi.n	8003c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <prvAddNewTaskToReadyList+0xbc>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <prvAddNewTaskToReadyList+0xc4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <prvAddNewTaskToReadyList+0xc4>)
 8003c96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <prvAddNewTaskToReadyList+0xc8>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <prvAddNewTaskToReadyList+0xcc>)
 8003cb8:	441a      	add	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff f87c 	bl	8002dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cc6:	f000 ffed 	bl	8004ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <prvAddNewTaskToReadyList+0xc0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00e      	beq.n	8003cf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvAddNewTaskToReadyList+0xbc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d207      	bcs.n	8003cf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <prvAddNewTaskToReadyList+0xd0>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200004d0 	.word	0x200004d0
 8003cfc:	200003d0 	.word	0x200003d0
 8003d00:	200004dc 	.word	0x200004dc
 8003d04:	200004ec 	.word	0x200004ec
 8003d08:	200004d8 	.word	0x200004d8
 8003d0c:	200003d4 	.word	0x200003d4
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d017      	beq.n	8003d56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <vTaskDelay+0x60>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <vTaskDelay+0x30>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	60bb      	str	r3, [r7, #8]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d44:	f000 f884 	bl	8003e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fde4 	bl	8004918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d50:	f000 f88c 	bl	8003e6c <xTaskResumeAll>
 8003d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d107      	bne.n	8003d6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <vTaskDelay+0x64>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200004f8 	.word	0x200004f8
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d8a:	463a      	mov	r2, r7
 8003d8c:	1d39      	adds	r1, r7, #4
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fbf2 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	460a      	mov	r2, r1
 8003daa:	4921      	ldr	r1, [pc, #132]	; (8003e30 <vTaskStartScheduler+0xb4>)
 8003dac:	4821      	ldr	r0, [pc, #132]	; (8003e34 <vTaskStartScheduler+0xb8>)
 8003dae:	f7ff fe07 	bl	80039c0 <xTaskCreateStatic>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <vTaskStartScheduler+0xbc>)
 8003db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <vTaskStartScheduler+0xbc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e001      	b.n	8003dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d11b      	bne.n	8003e08 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
}
 8003de2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <vTaskStartScheduler+0xc0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	334c      	adds	r3, #76	; 0x4c
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <vTaskStartScheduler+0xc4>)
 8003dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <vTaskStartScheduler+0xc8>)
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <vTaskStartScheduler+0xcc>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <vTaskStartScheduler+0xd0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e02:	f000 fe7d 	bl	8004b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e06:	e00e      	b.n	8003e26 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d10a      	bne.n	8003e26 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <vTaskStartScheduler+0xa8>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	080063a8 	.word	0x080063a8
 8003e34:	080043ed 	.word	0x080043ed
 8003e38:	200004f4 	.word	0x200004f4
 8003e3c:	200003d0 	.word	0x200003d0
 8003e40:	20000068 	.word	0x20000068
 8003e44:	200004f0 	.word	0x200004f0
 8003e48:	200004dc 	.word	0x200004dc
 8003e4c:	200004d4 	.word	0x200004d4

08003e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <vTaskSuspendAll+0x18>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	4a03      	ldr	r2, [pc, #12]	; (8003e68 <vTaskSuspendAll+0x18>)
 8003e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	200004f8 	.word	0x200004f8

08003e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <xTaskResumeAll+0x114>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	603b      	str	r3, [r7, #0]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e98:	f000 fed4 	bl	8004c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e9c:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <xTaskResumeAll+0x114>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	4a37      	ldr	r2, [pc, #220]	; (8003f80 <xTaskResumeAll+0x114>)
 8003ea4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <xTaskResumeAll+0x114>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d161      	bne.n	8003f72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <xTaskResumeAll+0x118>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d05d      	beq.n	8003f72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb6:	e02e      	b.n	8003f16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <xTaskResumeAll+0x11c>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe ffd7 	bl	8002e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe ffd2 	bl	8002e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <xTaskResumeAll+0x120>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <xTaskResumeAll+0x120>)
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <xTaskResumeAll+0x124>)
 8003ef4:	441a      	add	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f7fe ff5e 	bl	8002dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <xTaskResumeAll+0x128>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <xTaskResumeAll+0x12c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <xTaskResumeAll+0x11c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1cc      	bne.n	8003eb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f24:	f000 fb1c 	bl	8004560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <xTaskResumeAll+0x130>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f34:	f000 f836 	bl	8003fa4 <xTaskIncrementTick>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f3e:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <xTaskResumeAll+0x12c>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f1      	bne.n	8003f34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <xTaskResumeAll+0x130>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <xTaskResumeAll+0x12c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <xTaskResumeAll+0x134>)
 8003f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f000 fe97 	bl	8004ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f76:	68bb      	ldr	r3, [r7, #8]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200004f8 	.word	0x200004f8
 8003f84:	200004d0 	.word	0x200004d0
 8003f88:	20000490 	.word	0x20000490
 8003f8c:	200004d8 	.word	0x200004d8
 8003f90:	200003d4 	.word	0x200003d4
 8003f94:	200003d0 	.word	0x200003d0
 8003f98:	200004e4 	.word	0x200004e4
 8003f9c:	200004e0 	.word	0x200004e0
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fae:	4b4e      	ldr	r3, [pc, #312]	; (80040e8 <xTaskIncrementTick+0x144>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 808e 	bne.w	80040d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <xTaskIncrementTick+0x148>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc0:	4a4a      	ldr	r2, [pc, #296]	; (80040ec <xTaskIncrementTick+0x148>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d120      	bne.n	800400e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <xTaskIncrementTick+0x14c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <xTaskIncrementTick+0x48>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	603b      	str	r3, [r7, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xTaskIncrementTick+0x46>
 8003fec:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <xTaskIncrementTick+0x14c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <xTaskIncrementTick+0x150>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a3e      	ldr	r2, [pc, #248]	; (80040f0 <xTaskIncrementTick+0x14c>)
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x150>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <xTaskIncrementTick+0x154>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <xTaskIncrementTick+0x154>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	f000 faa9 	bl	8004560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <xTaskIncrementTick+0x158>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d348      	bcc.n	80040aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <xTaskIncrementTick+0x14c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	4b36      	ldr	r3, [pc, #216]	; (80040fc <xTaskIncrementTick+0x158>)
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	601a      	str	r2, [r3, #0]
					break;
 800402a:	e03e      	b.n	80040aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <xTaskIncrementTick+0x14c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d203      	bcs.n	800404c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004044:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <xTaskIncrementTick+0x158>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800404a:	e02e      	b.n	80040aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe ff11 	bl	8002e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3318      	adds	r3, #24
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe ff08 	bl	8002e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <xTaskIncrementTick+0x15c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4313      	orrs	r3, r2
 8004076:	4a22      	ldr	r2, [pc, #136]	; (8004100 <xTaskIncrementTick+0x15c>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <xTaskIncrementTick+0x160>)
 8004088:	441a      	add	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7fe fe94 	bl	8002dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <xTaskIncrementTick+0x164>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3b9      	bcc.n	8004018 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a8:	e7b6      	b.n	8004018 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <xTaskIncrementTick+0x164>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4914      	ldr	r1, [pc, #80]	; (8004104 <xTaskIncrementTick+0x160>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d901      	bls.n	80040c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <xTaskIncrementTick+0x168>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e004      	b.n	80040de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <xTaskIncrementTick+0x16c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <xTaskIncrementTick+0x16c>)
 80040dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040de:	697b      	ldr	r3, [r7, #20]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200004f8 	.word	0x200004f8
 80040ec:	200004d4 	.word	0x200004d4
 80040f0:	20000488 	.word	0x20000488
 80040f4:	2000048c 	.word	0x2000048c
 80040f8:	200004e8 	.word	0x200004e8
 80040fc:	200004f0 	.word	0x200004f0
 8004100:	200004d8 	.word	0x200004d8
 8004104:	200003d4 	.word	0x200003d4
 8004108:	200003d0 	.word	0x200003d0
 800410c:	200004e4 	.word	0x200004e4
 8004110:	200004e0 	.word	0x200004e0

08004114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411a:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <vTaskSwitchContext+0xac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <vTaskSwitchContext+0xb0>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004128:	e044      	b.n	80041b4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <vTaskSwitchContext+0xb0>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <vTaskSwitchContext+0xb4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f1c3 031f 	rsb	r3, r3, #31
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	4921      	ldr	r1, [pc, #132]	; (80041cc <vTaskSwitchContext+0xb8>)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <vTaskSwitchContext+0x5c>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <vTaskSwitchContext+0x5a>
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4a14      	ldr	r2, [pc, #80]	; (80041cc <vTaskSwitchContext+0xb8>)
 800417c:	4413      	add	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3308      	adds	r3, #8
 8004192:	429a      	cmp	r2, r3
 8004194:	d104      	bne.n	80041a0 <vTaskSwitchContext+0x8c>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <vTaskSwitchContext+0xbc>)
 80041a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <vTaskSwitchContext+0xbc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	334c      	adds	r3, #76	; 0x4c
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <vTaskSwitchContext+0xc0>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	200004f8 	.word	0x200004f8
 80041c4:	200004e4 	.word	0x200004e4
 80041c8:	200004d8 	.word	0x200004d8
 80041cc:	200003d4 	.word	0x200003d4
 80041d0:	200003d0 	.word	0x200003d0
 80041d4:	20000068 	.word	0x20000068

080041d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <vTaskPlaceOnEventList+0x44>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3318      	adds	r3, #24
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe fdfd 	bl	8002e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800420c:	2101      	movs	r1, #1
 800420e:	6838      	ldr	r0, [r7, #0]
 8004210:	f000 fb82 	bl	8004918 <prvAddCurrentTaskToDelayedList>
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200003d0 	.word	0x200003d0

08004220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60fb      	str	r3, [r7, #12]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3318      	adds	r3, #24
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe11 	bl	8002e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <xTaskRemoveFromEventList+0xac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11c      	bne.n	8004298 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fe08 	bl	8002e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4313      	orrs	r3, r2
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <xTaskRemoveFromEventList+0xb0>)
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <xTaskRemoveFromEventList+0xb4>)
 8004288:	441a      	add	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7fe fd94 	bl	8002dbe <vListInsertEnd>
 8004296:	e005      	b.n	80042a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3318      	adds	r3, #24
 800429c:	4619      	mov	r1, r3
 800429e:	480e      	ldr	r0, [pc, #56]	; (80042d8 <xTaskRemoveFromEventList+0xb8>)
 80042a0:	f7fe fd8d 	bl	8002dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <xTaskRemoveFromEventList+0xbc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d905      	bls.n	80042be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <xTaskRemoveFromEventList+0xc0>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e001      	b.n	80042c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042c2:	697b      	ldr	r3, [r7, #20]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200004f8 	.word	0x200004f8
 80042d0:	200004d8 	.word	0x200004d8
 80042d4:	200003d4 	.word	0x200003d4
 80042d8:	20000490 	.word	0x20000490
 80042dc:	200003d0 	.word	0x200003d0
 80042e0:	200004e4 	.word	0x200004e4

080042e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <vTaskInternalSetTimeOutState+0x24>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <vTaskInternalSetTimeOutState+0x28>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	200004e8 	.word	0x200004e8
 800430c:	200004d4 	.word	0x200004d4

08004310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004352:	f000 fc77 	bl	8004c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <xTaskCheckForTimeOut+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d102      	bne.n	8004376 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e023      	b.n	80043be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <xTaskCheckForTimeOut+0xc0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d007      	beq.n	8004392 <xTaskCheckForTimeOut+0x82>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e015      	b.n	80043be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d20b      	bcs.n	80043b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff9b 	bl	80042e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e004      	b.n	80043be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f000 fc71 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 80043c2:	69fb      	ldr	r3, [r7, #28]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	200004d4 	.word	0x200004d4
 80043d0:	200004e8 	.word	0x200004e8

080043d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <vTaskMissedYield+0x14>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	200004e4 	.word	0x200004e4

080043ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043f4:	f000 f852 	bl	800449c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvIdleTask+0x28>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d9f9      	bls.n	80043f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <prvIdleTask+0x2c>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004410:	e7f0      	b.n	80043f4 <prvIdleTask+0x8>
 8004412:	bf00      	nop
 8004414:	200003d4 	.word	0x200003d4
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	e00c      	b.n	8004442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <prvInitialiseTaskLists+0x60>)
 8004434:	4413      	add	r3, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fc94 	bl	8002d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3301      	adds	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b06      	cmp	r3, #6
 8004446:	d9ef      	bls.n	8004428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004448:	480d      	ldr	r0, [pc, #52]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800444a:	f7fe fc8b 	bl	8002d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800444e:	480d      	ldr	r0, [pc, #52]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004450:	f7fe fc88 	bl	8002d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <prvInitialiseTaskLists+0x6c>)
 8004456:	f7fe fc85 	bl	8002d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800445a:	480c      	ldr	r0, [pc, #48]	; (800448c <prvInitialiseTaskLists+0x70>)
 800445c:	f7fe fc82 	bl	8002d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <prvInitialiseTaskLists+0x74>)
 8004462:	f7fe fc7f 	bl	8002d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <prvInitialiseTaskLists+0x78>)
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <prvInitialiseTaskLists+0x64>)
 800446a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvInitialiseTaskLists+0x7c>)
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <prvInitialiseTaskLists+0x68>)
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200003d4 	.word	0x200003d4
 8004480:	20000460 	.word	0x20000460
 8004484:	20000474 	.word	0x20000474
 8004488:	20000490 	.word	0x20000490
 800448c:	200004a4 	.word	0x200004a4
 8004490:	200004bc 	.word	0x200004bc
 8004494:	20000488 	.word	0x20000488
 8004498:	2000048c 	.word	0x2000048c

0800449c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a2:	e019      	b.n	80044d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044a4:	f000 fbce 	bl	8004c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <prvCheckTasksWaitingTermination+0x50>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fcdf 	bl	8002e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <prvCheckTasksWaitingTermination+0x54>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3b01      	subs	r3, #1
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <prvCheckTasksWaitingTermination+0x54>)
 80044c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044ce:	f000 fbe9 	bl	8004ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f810 	bl	80044f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <prvCheckTasksWaitingTermination+0x58>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e1      	bne.n	80044a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200004a4 	.word	0x200004a4
 80044f0:	200004d0 	.word	0x200004d0
 80044f4:	200004b8 	.word	0x200004b8

080044f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	334c      	adds	r3, #76	; 0x4c
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f8b7 	bl	8005678 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fd81 	bl	8005020 <vPortFree>
				vPortFree( pxTCB );
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fd7e 	bl	8005020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004524:	e018      	b.n	8004558 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800452c:	2b01      	cmp	r3, #1
 800452e:	d103      	bne.n	8004538 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fd75 	bl	8005020 <vPortFree>
	}
 8004536:	e00f      	b.n	8004558 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800453e:	2b02      	cmp	r3, #2
 8004540:	d00a      	beq.n	8004558 <prvDeleteTCB+0x60>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60fb      	str	r3, [r7, #12]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <prvDeleteTCB+0x5e>
	}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvResetNextTaskUnblockTime+0x38>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <prvResetNextTaskUnblockTime+0x3c>)
 8004572:	f04f 32ff 	mov.w	r2, #4294967295
 8004576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004578:	e008      	b.n	800458c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <prvResetNextTaskUnblockTime+0x38>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <prvResetNextTaskUnblockTime+0x3c>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000488 	.word	0x20000488
 800459c:	200004f0 	.word	0x200004f0

080045a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <xTaskGetSchedulerState+0x34>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ae:	2301      	movs	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e008      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <xTaskGetSchedulerState+0x38>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045bc:	2302      	movs	r3, #2
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	e001      	b.n	80045c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045c6:	687b      	ldr	r3, [r7, #4]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	200004dc 	.word	0x200004dc
 80045d8:	200004f8 	.word	0x200004f8

080045dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05e      	beq.n	80046b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	4b31      	ldr	r3, [pc, #196]	; (80046bc <xTaskPriorityInherit+0xe0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d24e      	bcs.n	800469e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db06      	blt.n	8004616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <xTaskPriorityInherit+0xe0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f1c3 0207 	rsb	r2, r3, #7
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6959      	ldr	r1, [r3, #20]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <xTaskPriorityInherit+0xe4>)
 8004628:	4413      	add	r3, r2
 800462a:	4299      	cmp	r1, r3
 800462c:	d12f      	bne.n	800468e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3304      	adds	r3, #4
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fc20 	bl	8002e78 <uxListRemove>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	2201      	movs	r2, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43da      	mvns	r2, r3
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <xTaskPriorityInherit+0xe8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4013      	ands	r3, r2
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <xTaskPriorityInherit+0xe8>)
 8004652:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <xTaskPriorityInherit+0xe0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	4b17      	ldr	r3, [pc, #92]	; (80046c4 <xTaskPriorityInherit+0xe8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <xTaskPriorityInherit+0xe8>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <xTaskPriorityInherit+0xe4>)
 800467e:	441a      	add	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe fb99 	bl	8002dbe <vListInsertEnd>
 800468c:	e004      	b.n	8004698 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <xTaskPriorityInherit+0xe0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e008      	b.n	80046b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <xTaskPriorityInherit+0xe0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d201      	bcs.n	80046b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046b0:	68fb      	ldr	r3, [r7, #12]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200003d0 	.word	0x200003d0
 80046c0:	200003d4 	.word	0x200003d4
 80046c4:	200004d8 	.word	0x200004d8

080046c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d06e      	beq.n	80047bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046de:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <xTaskPriorityDisinherit+0x100>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d00a      	beq.n	80046fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60bb      	str	r3, [r7, #8]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	429a      	cmp	r2, r3
 8004730:	d044      	beq.n	80047bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004736:	2b00      	cmp	r3, #0
 8004738:	d140      	bne.n	80047bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fb9a 	bl	8002e78 <uxListRemove>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d115      	bne.n	8004776 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	491f      	ldr	r1, [pc, #124]	; (80047cc <xTaskPriorityDisinherit+0x104>)
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <xTaskPriorityDisinherit+0xae>
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2201      	movs	r2, #1
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43da      	mvns	r2, r3
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <xTaskPriorityDisinherit+0x108>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4013      	ands	r3, r2
 8004772:	4a17      	ldr	r2, [pc, #92]	; (80047d0 <xTaskPriorityDisinherit+0x108>)
 8004774:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f1c3 0207 	rsb	r2, r3, #7
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	2201      	movs	r2, #1
 8004790:	409a      	lsls	r2, r3
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskPriorityDisinherit+0x108>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <xTaskPriorityDisinherit+0x108>)
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <xTaskPriorityDisinherit+0x104>)
 80047aa:	441a      	add	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fe fb03 	bl	8002dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047bc:	697b      	ldr	r3, [r7, #20]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200003d0 	.word	0x200003d0
 80047cc:	200003d4 	.word	0x200003d4
 80047d0:	200004d8 	.word	0x200004d8

080047d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d077      	beq.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60fb      	str	r3, [r7, #12]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d902      	bls.n	800481a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e002      	b.n	8004820 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d058      	beq.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	d153      	bne.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	429a      	cmp	r2, r3
 800483c:	d10a      	bne.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db04      	blt.n	8004872 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f1c3 0207 	rsb	r2, r3, #7
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	6959      	ldr	r1, [r3, #20]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004882:	4413      	add	r3, r2
 8004884:	4299      	cmp	r1, r3
 8004886:	d129      	bne.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe faf3 	bl	8002e78 <uxListRemove>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2201      	movs	r2, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43da      	mvns	r2, r3
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4013      	ands	r3, r2
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048ce:	441a      	add	r2, r3
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7fe fa71 	bl	8002dbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048dc:	bf00      	nop
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200003d0 	.word	0x200003d0
 80048e8:	200003d4 	.word	0x200003d4
 80048ec:	200004d8 	.word	0x200004d8

080048f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <pvTaskIncrementMutexHeldCount+0x24>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <pvTaskIncrementMutexHeldCount+0x24>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004902:	3201      	adds	r2, #1
 8004904:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004906:	4b03      	ldr	r3, [pc, #12]	; (8004914 <pvTaskIncrementMutexHeldCount+0x24>)
 8004908:	681b      	ldr	r3, [r3, #0]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	200003d0 	.word	0x200003d0

08004918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3304      	adds	r3, #4
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe faa2 	bl	8002e78 <uxListRemove>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43da      	mvns	r2, r3
 8004948:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4013      	ands	r3, r2
 800494e:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d10a      	bne.n	8004970 <prvAddCurrentTaskToDelayedList+0x58>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	481a      	ldr	r0, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800496a:	f7fe fa28 	bl	8002dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800496e:	e026      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	429a      	cmp	r2, r3
 8004986:	d209      	bcs.n	800499c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe fa36 	bl	8002e06 <vListInsert>
}
 800499a:	e010      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7fe fa2c 	bl	8002e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d202      	bcs.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200004d4 	.word	0x200004d4
 80049cc:	200003d0 	.word	0x200003d0
 80049d0:	200004d8 	.word	0x200004d8
 80049d4:	200004bc 	.word	0x200004bc
 80049d8:	2000048c 	.word	0x2000048c
 80049dc:	20000488 	.word	0x20000488
 80049e0:	200004f0 	.word	0x200004f0

080049e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b04      	subs	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b04      	subs	r3, #4
 8004a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b04      	subs	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a14:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <pxPortInitialiseStack+0x64>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b14      	subs	r3, #20
 8004a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b04      	subs	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f06f 0202 	mvn.w	r2, #2
 8004a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b20      	subs	r3, #32
 8004a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	08004a4d 	.word	0x08004a4d

08004a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <prvTaskExitError+0x54>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d00a      	beq.n	8004a76 <prvTaskExitError+0x2a>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <prvTaskExitError+0x28>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	60bb      	str	r3, [r7, #8]
}
 8004a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a8a:	bf00      	nop
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0fc      	beq.n	8004a8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	2000000c 	.word	0x2000000c
	...

08004ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxCurrentTCBConst2>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	f380 8809 	msr	PSP, r0
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	4770      	bx	lr
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst2>:
 8004ad0:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <prvPortStartFirstTask+0x24>)
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f380 8808 	msr	MSP, r0
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8814 	msr	CONTROL, r0
 8004aea:	b662      	cpsie	i
 8004aec:	b661      	cpsie	f
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	df00      	svc	0
 8004af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004afa:	bf00      	nop
 8004afc:	e000ed08 	.word	0xe000ed08

08004b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b06:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a46      	ldr	r2, [pc, #280]	; (8004c24 <xPortStartScheduler+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10a      	bne.n	8004b26 <xPortStartScheduler+0x26>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <xPortStartScheduler+0x128>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10a      	bne.n	8004b46 <xPortStartScheduler+0x46>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <xPortStartScheduler+0x12c>)
 8004b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	22ff      	movs	r2, #255	; 0xff
 8004b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <xPortStartScheduler+0x130>)
 8004b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b74:	e009      	b.n	8004b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d0ef      	beq.n	8004b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d00a      	beq.n	8004bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bee:	f000 f8dd 	bl	8004dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <xPortStartScheduler+0x13c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bf8:	f000 f8fc 	bl	8004df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <xPortStartScheduler+0x140>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <xPortStartScheduler+0x140>)
 8004c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c08:	f7ff ff66 	bl	8004ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c0c:	f7ff fa82 	bl	8004114 <vTaskSwitchContext>
	prvTaskExitError();
 8004c10:	f7ff ff1c 	bl	8004a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	e000ed00 	.word	0xe000ed00
 8004c24:	410fc271 	.word	0x410fc271
 8004c28:	410fc270 	.word	0x410fc270
 8004c2c:	e000e400 	.word	0xe000e400
 8004c30:	200004fc 	.word	0x200004fc
 8004c34:	20000500 	.word	0x20000500
 8004c38:	e000ed20 	.word	0xe000ed20
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ef34 	.word	0xe000ef34

08004c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	607b      	str	r3, [r7, #4]
}
 8004c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10f      	bne.n	8004c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vPortEnterCritical+0x5c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	603b      	str	r3, [r7, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vPortEnterCritical+0x4a>
	}
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <vPortExitCritical+0x24>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	607b      	str	r3, [r7, #4]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <vPortExitCritical+0x42>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f383 8811 	msr	BASEPRI, r3
}
 8004ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c
	...

08004d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d00:	f3ef 8009 	mrs	r0, PSP
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <pxCurrentTCBConst>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f01e 0f10 	tst.w	lr, #16
 8004d10:	bf08      	it	eq
 8004d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d24:	f380 8811 	msr	BASEPRI, r0
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f7ff f9f0 	bl	8004114 <vTaskSwitchContext>
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f380 8811 	msr	BASEPRI, r0
 8004d3c:	bc09      	pop	{r0, r3}
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	6808      	ldr	r0, [r1, #0]
 8004d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d46:	f01e 0f10 	tst.w	lr, #16
 8004d4a:	bf08      	it	eq
 8004d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d50:	f380 8809 	msr	PSP, r0
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst>:
 8004d60:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f7ff f90f 	bl	8003fa4 <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SysTick_Handler+0x40>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortSetupTimerInterrupt+0x38>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <vPortSetupTimerInterrupt+0x3c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <vPortSetupTimerInterrupt+0x40>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <vPortSetupTimerInterrupt+0x44>)
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010
 8004de4:	e000e018 	.word	0xe000e018
 8004de8:	20000000 	.word	0x20000000
 8004dec:	10624dd3 	.word	0x10624dd3
 8004df0:	e000e014 	.word	0xe000e014

08004df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e04 <vPortEnableVFP+0x10>
 8004df8:	6801      	ldr	r1, [r0, #0]
 8004dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dfe:	6001      	str	r1, [r0, #0]
 8004e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e02:	bf00      	nop
 8004e04:	e000ed88 	.word	0xe000ed88

08004e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e0e:	f3ef 8305 	mrs	r3, IPSR
 8004e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d914      	bls.n	8004e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <vPortValidateInterruptPriority+0x70>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <vPortValidateInterruptPriority+0x74>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	7afa      	ldrb	r2, [r7, #11]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20a      	bcs.n	8004e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <vPortValidateInterruptPriority+0x78>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <vPortValidateInterruptPriority+0x7c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d90a      	bls.n	8004e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	603b      	str	r3, [r7, #0]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <vPortValidateInterruptPriority+0x60>
	}
 8004e6a:	bf00      	nop
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	e000e3f0 	.word	0xe000e3f0
 8004e7c:	200004fc 	.word	0x200004fc
 8004e80:	e000ed0c 	.word	0xe000ed0c
 8004e84:	20000500 	.word	0x20000500

08004e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e94:	f7fe ffdc 	bl	8003e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e98:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <pvPortMalloc+0x180>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ea0:	f000 f920 	bl	80050e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <pvPortMalloc+0x184>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 8093 	bne.w	8004fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01d      	beq.n	8004ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004eb8:	2208      	movs	r2, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d06e      	beq.n	8004fd8 <pvPortMalloc+0x150>
 8004efa:	4b45      	ldr	r3, [pc, #276]	; (8005010 <pvPortMalloc+0x188>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d869      	bhi.n	8004fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f04:	4b43      	ldr	r3, [pc, #268]	; (8005014 <pvPortMalloc+0x18c>)
 8004f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <pvPortMalloc+0x18c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f0e:	e004      	b.n	8004f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d903      	bls.n	8004f2c <pvPortMalloc+0xa4>
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f1      	bne.n	8004f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <pvPortMalloc+0x180>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d050      	beq.n	8004fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	4413      	add	r3, r2
 8004f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	1ad2      	subs	r2, r2, r3
 8004f50:	2308      	movs	r3, #8
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d91f      	bls.n	8004f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <pvPortMalloc+0xf8>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	613b      	str	r3, [r7, #16]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f92:	69b8      	ldr	r0, [r7, #24]
 8004f94:	f000 f908 	bl	80051a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <pvPortMalloc+0x188>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <pvPortMalloc+0x188>)
 8004fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <pvPortMalloc+0x188>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <pvPortMalloc+0x190>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d203      	bcs.n	8004fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <pvPortMalloc+0x188>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <pvPortMalloc+0x190>)
 8004fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <pvPortMalloc+0x184>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x194>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <pvPortMalloc+0x194>)
 8004fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fd8:	f7fe ff48 	bl	8003e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <pvPortMalloc+0x174>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60fb      	str	r3, [r7, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <pvPortMalloc+0x172>
	return pvReturn;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3728      	adds	r7, #40	; 0x28
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000410c 	.word	0x2000410c
 800500c:	20004120 	.word	0x20004120
 8005010:	20004110 	.word	0x20004110
 8005014:	20004104 	.word	0x20004104
 8005018:	20004114 	.word	0x20004114
 800501c:	20004118 	.word	0x20004118

08005020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04d      	beq.n	80050ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005032:	2308      	movs	r3, #8
 8005034:	425b      	negs	r3, r3
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <vPortFree+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <vPortFree+0x44>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60fb      	str	r3, [r7, #12]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <vPortFree+0x62>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60bb      	str	r3, [r7, #8]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <vPortFree+0xb8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <vPortFree+0xb8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050a8:	f7fe fed2 	bl	8003e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <vPortFree+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <vPortFree+0xbc>)
 80050b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f000 f874 	bl	80051a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <vPortFree+0xc0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <vPortFree+0xc0>)
 80050c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050ca:	f7fe fecf 	bl	8003e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20004120 	.word	0x20004120
 80050dc:	20004110 	.word	0x20004110
 80050e0:	2000411c 	.word	0x2000411c

080050e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f0:	4b27      	ldr	r3, [pc, #156]	; (8005190 <prvHeapInit+0xac>)
 80050f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3307      	adds	r3, #7
 8005102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <prvHeapInit+0xac>)
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800511c:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <prvHeapInit+0xb0>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <prvHeapInit+0xb0>)
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005130:	2208      	movs	r2, #8
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a15      	ldr	r2, [pc, #84]	; (8005198 <prvHeapInit+0xb4>)
 8005144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <prvHeapInit+0xb4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <prvHeapInit+0xb4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <prvHeapInit+0xb4>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a0a      	ldr	r2, [pc, #40]	; (800519c <prvHeapInit+0xb8>)
 8005172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <prvHeapInit+0xbc>)
 800517a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <prvHeapInit+0xc0>)
 800517e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000504 	.word	0x20000504
 8005194:	20004104 	.word	0x20004104
 8005198:	2000410c 	.word	0x2000410c
 800519c:	20004114 	.word	0x20004114
 80051a0:	20004110 	.word	0x20004110
 80051a4:	20004120 	.word	0x20004120

080051a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b0:	4b28      	ldr	r3, [pc, #160]	; (8005254 <prvInsertBlockIntoFreeList+0xac>)
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e002      	b.n	80051bc <prvInsertBlockIntoFreeList+0x14>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d8f7      	bhi.n	80051b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4413      	add	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d108      	bne.n	80051ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d118      	bne.n	8005230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <prvInsertBlockIntoFreeList+0xb0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d00d      	beq.n	8005226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e008      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <prvInsertBlockIntoFreeList+0xb0>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e003      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d002      	beq.n	8005246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20004104 	.word	0x20004104
 8005258:	2000410c 	.word	0x2000410c

0800525c <std>:
 800525c:	2300      	movs	r3, #0
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	e9c0 3300 	strd	r3, r3, [r0]
 8005266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800526a:	6083      	str	r3, [r0, #8]
 800526c:	8181      	strh	r1, [r0, #12]
 800526e:	6643      	str	r3, [r0, #100]	; 0x64
 8005270:	81c2      	strh	r2, [r0, #14]
 8005272:	6183      	str	r3, [r0, #24]
 8005274:	4619      	mov	r1, r3
 8005276:	2208      	movs	r2, #8
 8005278:	305c      	adds	r0, #92	; 0x5c
 800527a:	f000 f9e5 	bl	8005648 <memset>
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <std+0x38>)
 8005280:	6263      	str	r3, [r4, #36]	; 0x24
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <std+0x3c>)
 8005284:	62a3      	str	r3, [r4, #40]	; 0x28
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <std+0x40>)
 8005288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <std+0x44>)
 800528c:	6224      	str	r4, [r4, #32]
 800528e:	6323      	str	r3, [r4, #48]	; 0x30
 8005290:	bd10      	pop	{r4, pc}
 8005292:	bf00      	nop
 8005294:	08005499 	.word	0x08005499
 8005298:	080054bb 	.word	0x080054bb
 800529c:	080054f3 	.word	0x080054f3
 80052a0:	08005517 	.word	0x08005517

080052a4 <stdio_exit_handler>:
 80052a4:	4a02      	ldr	r2, [pc, #8]	; (80052b0 <stdio_exit_handler+0xc>)
 80052a6:	4903      	ldr	r1, [pc, #12]	; (80052b4 <stdio_exit_handler+0x10>)
 80052a8:	4803      	ldr	r0, [pc, #12]	; (80052b8 <stdio_exit_handler+0x14>)
 80052aa:	f000 b869 	b.w	8005380 <_fwalk_sglue>
 80052ae:	bf00      	nop
 80052b0:	20000010 	.word	0x20000010
 80052b4:	080060a9 	.word	0x080060a9
 80052b8:	2000001c 	.word	0x2000001c

080052bc <cleanup_stdio>:
 80052bc:	6841      	ldr	r1, [r0, #4]
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <cleanup_stdio+0x34>)
 80052c0:	4299      	cmp	r1, r3
 80052c2:	b510      	push	{r4, lr}
 80052c4:	4604      	mov	r4, r0
 80052c6:	d001      	beq.n	80052cc <cleanup_stdio+0x10>
 80052c8:	f000 feee 	bl	80060a8 <_fflush_r>
 80052cc:	68a1      	ldr	r1, [r4, #8]
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <cleanup_stdio+0x38>)
 80052d0:	4299      	cmp	r1, r3
 80052d2:	d002      	beq.n	80052da <cleanup_stdio+0x1e>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fee7 	bl	80060a8 <_fflush_r>
 80052da:	68e1      	ldr	r1, [r4, #12]
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <cleanup_stdio+0x3c>)
 80052de:	4299      	cmp	r1, r3
 80052e0:	d004      	beq.n	80052ec <cleanup_stdio+0x30>
 80052e2:	4620      	mov	r0, r4
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f000 bede 	b.w	80060a8 <_fflush_r>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	bf00      	nop
 80052f0:	20004124 	.word	0x20004124
 80052f4:	2000418c 	.word	0x2000418c
 80052f8:	200041f4 	.word	0x200041f4

080052fc <global_stdio_init.part.0>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <global_stdio_init.part.0+0x30>)
 8005300:	4c0b      	ldr	r4, [pc, #44]	; (8005330 <global_stdio_init.part.0+0x34>)
 8005302:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <global_stdio_init.part.0+0x38>)
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	4620      	mov	r0, r4
 8005308:	2200      	movs	r2, #0
 800530a:	2104      	movs	r1, #4
 800530c:	f7ff ffa6 	bl	800525c <std>
 8005310:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005314:	2201      	movs	r2, #1
 8005316:	2109      	movs	r1, #9
 8005318:	f7ff ffa0 	bl	800525c <std>
 800531c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005320:	2202      	movs	r2, #2
 8005322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005326:	2112      	movs	r1, #18
 8005328:	f7ff bf98 	b.w	800525c <std>
 800532c:	2000425c 	.word	0x2000425c
 8005330:	20004124 	.word	0x20004124
 8005334:	080052a5 	.word	0x080052a5

08005338 <__sfp_lock_acquire>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__sfp_lock_acquire+0x8>)
 800533a:	f000 ba53 	b.w	80057e4 <__retarget_lock_acquire_recursive>
 800533e:	bf00      	nop
 8005340:	20004265 	.word	0x20004265

08005344 <__sfp_lock_release>:
 8005344:	4801      	ldr	r0, [pc, #4]	; (800534c <__sfp_lock_release+0x8>)
 8005346:	f000 ba4e 	b.w	80057e6 <__retarget_lock_release_recursive>
 800534a:	bf00      	nop
 800534c:	20004265 	.word	0x20004265

08005350 <__sinit>:
 8005350:	b510      	push	{r4, lr}
 8005352:	4604      	mov	r4, r0
 8005354:	f7ff fff0 	bl	8005338 <__sfp_lock_acquire>
 8005358:	6a23      	ldr	r3, [r4, #32]
 800535a:	b11b      	cbz	r3, 8005364 <__sinit+0x14>
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f7ff bff0 	b.w	8005344 <__sfp_lock_release>
 8005364:	4b04      	ldr	r3, [pc, #16]	; (8005378 <__sinit+0x28>)
 8005366:	6223      	str	r3, [r4, #32]
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <__sinit+0x2c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f5      	bne.n	800535c <__sinit+0xc>
 8005370:	f7ff ffc4 	bl	80052fc <global_stdio_init.part.0>
 8005374:	e7f2      	b.n	800535c <__sinit+0xc>
 8005376:	bf00      	nop
 8005378:	080052bd 	.word	0x080052bd
 800537c:	2000425c 	.word	0x2000425c

08005380 <_fwalk_sglue>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4607      	mov	r7, r0
 8005386:	4688      	mov	r8, r1
 8005388:	4614      	mov	r4, r2
 800538a:	2600      	movs	r6, #0
 800538c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005390:	f1b9 0901 	subs.w	r9, r9, #1
 8005394:	d505      	bpl.n	80053a2 <_fwalk_sglue+0x22>
 8005396:	6824      	ldr	r4, [r4, #0]
 8005398:	2c00      	cmp	r4, #0
 800539a:	d1f7      	bne.n	800538c <_fwalk_sglue+0xc>
 800539c:	4630      	mov	r0, r6
 800539e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a2:	89ab      	ldrh	r3, [r5, #12]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d907      	bls.n	80053b8 <_fwalk_sglue+0x38>
 80053a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ac:	3301      	adds	r3, #1
 80053ae:	d003      	beq.n	80053b8 <_fwalk_sglue+0x38>
 80053b0:	4629      	mov	r1, r5
 80053b2:	4638      	mov	r0, r7
 80053b4:	47c0      	blx	r8
 80053b6:	4306      	orrs	r6, r0
 80053b8:	3568      	adds	r5, #104	; 0x68
 80053ba:	e7e9      	b.n	8005390 <_fwalk_sglue+0x10>

080053bc <iprintf>:
 80053bc:	b40f      	push	{r0, r1, r2, r3}
 80053be:	b507      	push	{r0, r1, r2, lr}
 80053c0:	4906      	ldr	r1, [pc, #24]	; (80053dc <iprintf+0x20>)
 80053c2:	ab04      	add	r3, sp, #16
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ca:	6881      	ldr	r1, [r0, #8]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	f000 fb3b 	bl	8005a48 <_vfiprintf_r>
 80053d2:	b003      	add	sp, #12
 80053d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d8:	b004      	add	sp, #16
 80053da:	4770      	bx	lr
 80053dc:	20000068 	.word	0x20000068

080053e0 <_puts_r>:
 80053e0:	6a03      	ldr	r3, [r0, #32]
 80053e2:	b570      	push	{r4, r5, r6, lr}
 80053e4:	6884      	ldr	r4, [r0, #8]
 80053e6:	4605      	mov	r5, r0
 80053e8:	460e      	mov	r6, r1
 80053ea:	b90b      	cbnz	r3, 80053f0 <_puts_r+0x10>
 80053ec:	f7ff ffb0 	bl	8005350 <__sinit>
 80053f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053f2:	07db      	lsls	r3, r3, #31
 80053f4:	d405      	bmi.n	8005402 <_puts_r+0x22>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	0598      	lsls	r0, r3, #22
 80053fa:	d402      	bmi.n	8005402 <_puts_r+0x22>
 80053fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fe:	f000 f9f1 	bl	80057e4 <__retarget_lock_acquire_recursive>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	0719      	lsls	r1, r3, #28
 8005406:	d513      	bpl.n	8005430 <_puts_r+0x50>
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	b18b      	cbz	r3, 8005430 <_puts_r+0x50>
 800540c:	3e01      	subs	r6, #1
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005414:	3b01      	subs	r3, #1
 8005416:	60a3      	str	r3, [r4, #8]
 8005418:	b9e9      	cbnz	r1, 8005456 <_puts_r+0x76>
 800541a:	2b00      	cmp	r3, #0
 800541c:	da2e      	bge.n	800547c <_puts_r+0x9c>
 800541e:	4622      	mov	r2, r4
 8005420:	210a      	movs	r1, #10
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f87b 	bl	800551e <__swbuf_r>
 8005428:	3001      	adds	r0, #1
 800542a:	d007      	beq.n	800543c <_puts_r+0x5c>
 800542c:	250a      	movs	r5, #10
 800542e:	e007      	b.n	8005440 <_puts_r+0x60>
 8005430:	4621      	mov	r1, r4
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f8b0 	bl	8005598 <__swsetup_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	d0e7      	beq.n	800540c <_puts_r+0x2c>
 800543c:	f04f 35ff 	mov.w	r5, #4294967295
 8005440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d405      	bmi.n	8005452 <_puts_r+0x72>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	059b      	lsls	r3, r3, #22
 800544a:	d402      	bmi.n	8005452 <_puts_r+0x72>
 800544c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800544e:	f000 f9ca 	bl	80057e6 <__retarget_lock_release_recursive>
 8005452:	4628      	mov	r0, r5
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	2b00      	cmp	r3, #0
 8005458:	da04      	bge.n	8005464 <_puts_r+0x84>
 800545a:	69a2      	ldr	r2, [r4, #24]
 800545c:	429a      	cmp	r2, r3
 800545e:	dc06      	bgt.n	800546e <_puts_r+0x8e>
 8005460:	290a      	cmp	r1, #10
 8005462:	d004      	beq.n	800546e <_puts_r+0x8e>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	e7cf      	b.n	800540e <_puts_r+0x2e>
 800546e:	4622      	mov	r2, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 f854 	bl	800551e <__swbuf_r>
 8005476:	3001      	adds	r0, #1
 8005478:	d1c9      	bne.n	800540e <_puts_r+0x2e>
 800547a:	e7df      	b.n	800543c <_puts_r+0x5c>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	250a      	movs	r5, #10
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	701d      	strb	r5, [r3, #0]
 8005486:	e7db      	b.n	8005440 <_puts_r+0x60>

08005488 <puts>:
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <puts+0xc>)
 800548a:	4601      	mov	r1, r0
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f7ff bfa7 	b.w	80053e0 <_puts_r>
 8005492:	bf00      	nop
 8005494:	20000068 	.word	0x20000068

08005498 <__sread>:
 8005498:	b510      	push	{r4, lr}
 800549a:	460c      	mov	r4, r1
 800549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a0:	f000 f952 	bl	8005748 <_read_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	bfab      	itete	ge
 80054a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054aa:	89a3      	ldrhlt	r3, [r4, #12]
 80054ac:	181b      	addge	r3, r3, r0
 80054ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054b2:	bfac      	ite	ge
 80054b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054b6:	81a3      	strhlt	r3, [r4, #12]
 80054b8:	bd10      	pop	{r4, pc}

080054ba <__swrite>:
 80054ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054be:	461f      	mov	r7, r3
 80054c0:	898b      	ldrh	r3, [r1, #12]
 80054c2:	05db      	lsls	r3, r3, #23
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4616      	mov	r6, r2
 80054ca:	d505      	bpl.n	80054d8 <__swrite+0x1e>
 80054cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d0:	2302      	movs	r3, #2
 80054d2:	2200      	movs	r2, #0
 80054d4:	f000 f926 	bl	8005724 <_lseek_r>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	4632      	mov	r2, r6
 80054e6:	463b      	mov	r3, r7
 80054e8:	4628      	mov	r0, r5
 80054ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ee:	f000 b93d 	b.w	800576c <_write_r>

080054f2 <__sseek>:
 80054f2:	b510      	push	{r4, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fa:	f000 f913 	bl	8005724 <_lseek_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	bf15      	itete	ne
 8005504:	6560      	strne	r0, [r4, #84]	; 0x54
 8005506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800550a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800550e:	81a3      	strheq	r3, [r4, #12]
 8005510:	bf18      	it	ne
 8005512:	81a3      	strhne	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__sclose>:
 8005516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551a:	f000 b89d 	b.w	8005658 <_close_r>

0800551e <__swbuf_r>:
 800551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005520:	460e      	mov	r6, r1
 8005522:	4614      	mov	r4, r2
 8005524:	4605      	mov	r5, r0
 8005526:	b118      	cbz	r0, 8005530 <__swbuf_r+0x12>
 8005528:	6a03      	ldr	r3, [r0, #32]
 800552a:	b90b      	cbnz	r3, 8005530 <__swbuf_r+0x12>
 800552c:	f7ff ff10 	bl	8005350 <__sinit>
 8005530:	69a3      	ldr	r3, [r4, #24]
 8005532:	60a3      	str	r3, [r4, #8]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	071a      	lsls	r2, r3, #28
 8005538:	d525      	bpl.n	8005586 <__swbuf_r+0x68>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	b31b      	cbz	r3, 8005586 <__swbuf_r+0x68>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	6922      	ldr	r2, [r4, #16]
 8005542:	1a98      	subs	r0, r3, r2
 8005544:	6963      	ldr	r3, [r4, #20]
 8005546:	b2f6      	uxtb	r6, r6
 8005548:	4283      	cmp	r3, r0
 800554a:	4637      	mov	r7, r6
 800554c:	dc04      	bgt.n	8005558 <__swbuf_r+0x3a>
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fda9 	bl	80060a8 <_fflush_r>
 8005556:	b9e0      	cbnz	r0, 8005592 <__swbuf_r+0x74>
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	3b01      	subs	r3, #1
 800555c:	60a3      	str	r3, [r4, #8]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	701e      	strb	r6, [r3, #0]
 8005566:	6962      	ldr	r2, [r4, #20]
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	429a      	cmp	r2, r3
 800556c:	d004      	beq.n	8005578 <__swbuf_r+0x5a>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	07db      	lsls	r3, r3, #31
 8005572:	d506      	bpl.n	8005582 <__swbuf_r+0x64>
 8005574:	2e0a      	cmp	r6, #10
 8005576:	d104      	bne.n	8005582 <__swbuf_r+0x64>
 8005578:	4621      	mov	r1, r4
 800557a:	4628      	mov	r0, r5
 800557c:	f000 fd94 	bl	80060a8 <_fflush_r>
 8005580:	b938      	cbnz	r0, 8005592 <__swbuf_r+0x74>
 8005582:	4638      	mov	r0, r7
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005586:	4621      	mov	r1, r4
 8005588:	4628      	mov	r0, r5
 800558a:	f000 f805 	bl	8005598 <__swsetup_r>
 800558e:	2800      	cmp	r0, #0
 8005590:	d0d5      	beq.n	800553e <__swbuf_r+0x20>
 8005592:	f04f 37ff 	mov.w	r7, #4294967295
 8005596:	e7f4      	b.n	8005582 <__swbuf_r+0x64>

08005598 <__swsetup_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <__swsetup_r+0xac>)
 800559c:	4605      	mov	r5, r0
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	460c      	mov	r4, r1
 80055a2:	b118      	cbz	r0, 80055ac <__swsetup_r+0x14>
 80055a4:	6a03      	ldr	r3, [r0, #32]
 80055a6:	b90b      	cbnz	r3, 80055ac <__swsetup_r+0x14>
 80055a8:	f7ff fed2 	bl	8005350 <__sinit>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055b2:	0718      	lsls	r0, r3, #28
 80055b4:	d422      	bmi.n	80055fc <__swsetup_r+0x64>
 80055b6:	06d9      	lsls	r1, r3, #27
 80055b8:	d407      	bmi.n	80055ca <__swsetup_r+0x32>
 80055ba:	2309      	movs	r3, #9
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	e034      	b.n	8005634 <__swsetup_r+0x9c>
 80055ca:	0758      	lsls	r0, r3, #29
 80055cc:	d512      	bpl.n	80055f4 <__swsetup_r+0x5c>
 80055ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055d0:	b141      	cbz	r1, 80055e4 <__swsetup_r+0x4c>
 80055d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055d6:	4299      	cmp	r1, r3
 80055d8:	d002      	beq.n	80055e0 <__swsetup_r+0x48>
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f912 	bl	8005804 <_free_r>
 80055e0:	2300      	movs	r3, #0
 80055e2:	6363      	str	r3, [r4, #52]	; 0x34
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	2300      	movs	r3, #0
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f043 0308 	orr.w	r3, r3, #8
 80055fa:	81a3      	strh	r3, [r4, #12]
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	b94b      	cbnz	r3, 8005614 <__swsetup_r+0x7c>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560a:	d003      	beq.n	8005614 <__swsetup_r+0x7c>
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fd98 	bl	8006144 <__smakebuf_r>
 8005614:	89a0      	ldrh	r0, [r4, #12]
 8005616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800561a:	f010 0301 	ands.w	r3, r0, #1
 800561e:	d00a      	beq.n	8005636 <__swsetup_r+0x9e>
 8005620:	2300      	movs	r3, #0
 8005622:	60a3      	str	r3, [r4, #8]
 8005624:	6963      	ldr	r3, [r4, #20]
 8005626:	425b      	negs	r3, r3
 8005628:	61a3      	str	r3, [r4, #24]
 800562a:	6923      	ldr	r3, [r4, #16]
 800562c:	b943      	cbnz	r3, 8005640 <__swsetup_r+0xa8>
 800562e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005632:	d1c4      	bne.n	80055be <__swsetup_r+0x26>
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	0781      	lsls	r1, r0, #30
 8005638:	bf58      	it	pl
 800563a:	6963      	ldrpl	r3, [r4, #20]
 800563c:	60a3      	str	r3, [r4, #8]
 800563e:	e7f4      	b.n	800562a <__swsetup_r+0x92>
 8005640:	2000      	movs	r0, #0
 8005642:	e7f7      	b.n	8005634 <__swsetup_r+0x9c>
 8005644:	20000068 	.word	0x20000068

08005648 <memset>:
 8005648:	4402      	add	r2, r0
 800564a:	4603      	mov	r3, r0
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	f803 1b01 	strb.w	r1, [r3], #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <_close_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	; (8005674 <_close_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb fb6b 	bl	8000d3e <_close>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_close_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_close_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20004260 	.word	0x20004260

08005678 <_reclaim_reent>:
 8005678:	4b29      	ldr	r3, [pc, #164]	; (8005720 <_reclaim_reent+0xa8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4283      	cmp	r3, r0
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	4604      	mov	r4, r0
 8005682:	d04b      	beq.n	800571c <_reclaim_reent+0xa4>
 8005684:	69c3      	ldr	r3, [r0, #28]
 8005686:	b143      	cbz	r3, 800569a <_reclaim_reent+0x22>
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d144      	bne.n	8005718 <_reclaim_reent+0xa0>
 800568e:	69e3      	ldr	r3, [r4, #28]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	b111      	cbz	r1, 800569a <_reclaim_reent+0x22>
 8005694:	4620      	mov	r0, r4
 8005696:	f000 f8b5 	bl	8005804 <_free_r>
 800569a:	6961      	ldr	r1, [r4, #20]
 800569c:	b111      	cbz	r1, 80056a4 <_reclaim_reent+0x2c>
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 f8b0 	bl	8005804 <_free_r>
 80056a4:	69e1      	ldr	r1, [r4, #28]
 80056a6:	b111      	cbz	r1, 80056ae <_reclaim_reent+0x36>
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 f8ab 	bl	8005804 <_free_r>
 80056ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80056b0:	b111      	cbz	r1, 80056b8 <_reclaim_reent+0x40>
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f8a6 	bl	8005804 <_free_r>
 80056b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ba:	b111      	cbz	r1, 80056c2 <_reclaim_reent+0x4a>
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 f8a1 	bl	8005804 <_free_r>
 80056c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056c4:	b111      	cbz	r1, 80056cc <_reclaim_reent+0x54>
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f89c 	bl	8005804 <_free_r>
 80056cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056ce:	b111      	cbz	r1, 80056d6 <_reclaim_reent+0x5e>
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 f897 	bl	8005804 <_free_r>
 80056d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056d8:	b111      	cbz	r1, 80056e0 <_reclaim_reent+0x68>
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 f892 	bl	8005804 <_free_r>
 80056e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056e2:	b111      	cbz	r1, 80056ea <_reclaim_reent+0x72>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f000 f88d 	bl	8005804 <_free_r>
 80056ea:	6a23      	ldr	r3, [r4, #32]
 80056ec:	b1b3      	cbz	r3, 800571c <_reclaim_reent+0xa4>
 80056ee:	4620      	mov	r0, r4
 80056f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056f4:	4718      	bx	r3
 80056f6:	5949      	ldr	r1, [r1, r5]
 80056f8:	b941      	cbnz	r1, 800570c <_reclaim_reent+0x94>
 80056fa:	3504      	adds	r5, #4
 80056fc:	69e3      	ldr	r3, [r4, #28]
 80056fe:	2d80      	cmp	r5, #128	; 0x80
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	d1f8      	bne.n	80056f6 <_reclaim_reent+0x7e>
 8005704:	4620      	mov	r0, r4
 8005706:	f000 f87d 	bl	8005804 <_free_r>
 800570a:	e7c0      	b.n	800568e <_reclaim_reent+0x16>
 800570c:	680e      	ldr	r6, [r1, #0]
 800570e:	4620      	mov	r0, r4
 8005710:	f000 f878 	bl	8005804 <_free_r>
 8005714:	4631      	mov	r1, r6
 8005716:	e7ef      	b.n	80056f8 <_reclaim_reent+0x80>
 8005718:	2500      	movs	r5, #0
 800571a:	e7ef      	b.n	80056fc <_reclaim_reent+0x84>
 800571c:	bd70      	pop	{r4, r5, r6, pc}
 800571e:	bf00      	nop
 8005720:	20000068 	.word	0x20000068

08005724 <_lseek_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	; (8005744 <_lseek_r+0x20>)
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	2200      	movs	r2, #0
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fb fb2a 	bl	8000d8c <_lseek>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_lseek_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_lseek_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20004260 	.word	0x20004260

08005748 <_read_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d07      	ldr	r5, [pc, #28]	; (8005768 <_read_r+0x20>)
 800574c:	4604      	mov	r4, r0
 800574e:	4608      	mov	r0, r1
 8005750:	4611      	mov	r1, r2
 8005752:	2200      	movs	r2, #0
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7fb fab8 	bl	8000ccc <_read>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_read_r+0x1e>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_read_r+0x1e>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20004260 	.word	0x20004260

0800576c <_write_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d07      	ldr	r5, [pc, #28]	; (800578c <_write_r+0x20>)
 8005770:	4604      	mov	r4, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fb fac3 	bl	8000d06 <_write>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_write_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_write_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20004260 	.word	0x20004260

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	; (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000068 	.word	0x20000068

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	; (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	; (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	; (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	; (80057e0 <__libc_init_array+0x44>)
 80057b0:	f000 fd36 	bl	8006220 <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08006404 	.word	0x08006404
 80057d8:	08006404 	.word	0x08006404
 80057dc:	08006404 	.word	0x08006404
 80057e0:	08006408 	.word	0x08006408

080057e4 <__retarget_lock_acquire_recursive>:
 80057e4:	4770      	bx	lr

080057e6 <__retarget_lock_release_recursive>:
 80057e6:	4770      	bx	lr

080057e8 <memcpy>:
 80057e8:	440a      	add	r2, r1
 80057ea:	4291      	cmp	r1, r2
 80057ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f0:	d100      	bne.n	80057f4 <memcpy+0xc>
 80057f2:	4770      	bx	lr
 80057f4:	b510      	push	{r4, lr}
 80057f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fe:	4291      	cmp	r1, r2
 8005800:	d1f9      	bne.n	80057f6 <memcpy+0xe>
 8005802:	bd10      	pop	{r4, pc}

08005804 <_free_r>:
 8005804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005806:	2900      	cmp	r1, #0
 8005808:	d044      	beq.n	8005894 <_free_r+0x90>
 800580a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580e:	9001      	str	r0, [sp, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f1a1 0404 	sub.w	r4, r1, #4
 8005816:	bfb8      	it	lt
 8005818:	18e4      	addlt	r4, r4, r3
 800581a:	f000 f8df 	bl	80059dc <__malloc_lock>
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <_free_r+0x94>)
 8005820:	9801      	ldr	r0, [sp, #4]
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	b933      	cbnz	r3, 8005834 <_free_r+0x30>
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	6014      	str	r4, [r2, #0]
 800582a:	b003      	add	sp, #12
 800582c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005830:	f000 b8da 	b.w	80059e8 <__malloc_unlock>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d908      	bls.n	800584a <_free_r+0x46>
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1961      	adds	r1, r4, r5
 800583c:	428b      	cmp	r3, r1
 800583e:	bf01      	itttt	eq
 8005840:	6819      	ldreq	r1, [r3, #0]
 8005842:	685b      	ldreq	r3, [r3, #4]
 8005844:	1949      	addeq	r1, r1, r5
 8005846:	6021      	streq	r1, [r4, #0]
 8005848:	e7ed      	b.n	8005826 <_free_r+0x22>
 800584a:	461a      	mov	r2, r3
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b10b      	cbz	r3, 8005854 <_free_r+0x50>
 8005850:	42a3      	cmp	r3, r4
 8005852:	d9fa      	bls.n	800584a <_free_r+0x46>
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	1855      	adds	r5, r2, r1
 8005858:	42a5      	cmp	r5, r4
 800585a:	d10b      	bne.n	8005874 <_free_r+0x70>
 800585c:	6824      	ldr	r4, [r4, #0]
 800585e:	4421      	add	r1, r4
 8005860:	1854      	adds	r4, r2, r1
 8005862:	42a3      	cmp	r3, r4
 8005864:	6011      	str	r1, [r2, #0]
 8005866:	d1e0      	bne.n	800582a <_free_r+0x26>
 8005868:	681c      	ldr	r4, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	6053      	str	r3, [r2, #4]
 800586e:	440c      	add	r4, r1
 8005870:	6014      	str	r4, [r2, #0]
 8005872:	e7da      	b.n	800582a <_free_r+0x26>
 8005874:	d902      	bls.n	800587c <_free_r+0x78>
 8005876:	230c      	movs	r3, #12
 8005878:	6003      	str	r3, [r0, #0]
 800587a:	e7d6      	b.n	800582a <_free_r+0x26>
 800587c:	6825      	ldr	r5, [r4, #0]
 800587e:	1961      	adds	r1, r4, r5
 8005880:	428b      	cmp	r3, r1
 8005882:	bf04      	itt	eq
 8005884:	6819      	ldreq	r1, [r3, #0]
 8005886:	685b      	ldreq	r3, [r3, #4]
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	bf04      	itt	eq
 800588c:	1949      	addeq	r1, r1, r5
 800588e:	6021      	streq	r1, [r4, #0]
 8005890:	6054      	str	r4, [r2, #4]
 8005892:	e7ca      	b.n	800582a <_free_r+0x26>
 8005894:	b003      	add	sp, #12
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	20004268 	.word	0x20004268

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0e      	ldr	r6, [pc, #56]	; (80058d8 <sbrk_aligned+0x3c>)
 80058a0:	460c      	mov	r4, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	4605      	mov	r5, r0
 80058a6:	b911      	cbnz	r1, 80058ae <sbrk_aligned+0x12>
 80058a8:	f000 fcaa 	bl	8006200 <_sbrk_r>
 80058ac:	6030      	str	r0, [r6, #0]
 80058ae:	4621      	mov	r1, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	f000 fca5 	bl	8006200 <_sbrk_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d00a      	beq.n	80058d0 <sbrk_aligned+0x34>
 80058ba:	1cc4      	adds	r4, r0, #3
 80058bc:	f024 0403 	bic.w	r4, r4, #3
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d007      	beq.n	80058d4 <sbrk_aligned+0x38>
 80058c4:	1a21      	subs	r1, r4, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fc9a 	bl	8006200 <_sbrk_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d101      	bne.n	80058d4 <sbrk_aligned+0x38>
 80058d0:	f04f 34ff 	mov.w	r4, #4294967295
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	2000426c 	.word	0x2000426c

080058dc <_malloc_r>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	1ccd      	adds	r5, r1, #3
 80058e2:	f025 0503 	bic.w	r5, r5, #3
 80058e6:	3508      	adds	r5, #8
 80058e8:	2d0c      	cmp	r5, #12
 80058ea:	bf38      	it	cc
 80058ec:	250c      	movcc	r5, #12
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	4607      	mov	r7, r0
 80058f2:	db01      	blt.n	80058f8 <_malloc_r+0x1c>
 80058f4:	42a9      	cmp	r1, r5
 80058f6:	d905      	bls.n	8005904 <_malloc_r+0x28>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	2600      	movs	r6, #0
 80058fe:	4630      	mov	r0, r6
 8005900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059d8 <_malloc_r+0xfc>
 8005908:	f000 f868 	bl	80059dc <__malloc_lock>
 800590c:	f8d8 3000 	ldr.w	r3, [r8]
 8005910:	461c      	mov	r4, r3
 8005912:	bb5c      	cbnz	r4, 800596c <_malloc_r+0x90>
 8005914:	4629      	mov	r1, r5
 8005916:	4638      	mov	r0, r7
 8005918:	f7ff ffc0 	bl	800589c <sbrk_aligned>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	4604      	mov	r4, r0
 8005920:	d155      	bne.n	80059ce <_malloc_r+0xf2>
 8005922:	f8d8 4000 	ldr.w	r4, [r8]
 8005926:	4626      	mov	r6, r4
 8005928:	2e00      	cmp	r6, #0
 800592a:	d145      	bne.n	80059b8 <_malloc_r+0xdc>
 800592c:	2c00      	cmp	r4, #0
 800592e:	d048      	beq.n	80059c2 <_malloc_r+0xe6>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	4631      	mov	r1, r6
 8005934:	4638      	mov	r0, r7
 8005936:	eb04 0903 	add.w	r9, r4, r3
 800593a:	f000 fc61 	bl	8006200 <_sbrk_r>
 800593e:	4581      	cmp	r9, r0
 8005940:	d13f      	bne.n	80059c2 <_malloc_r+0xe6>
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	1a6d      	subs	r5, r5, r1
 8005946:	4629      	mov	r1, r5
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ffa7 	bl	800589c <sbrk_aligned>
 800594e:	3001      	adds	r0, #1
 8005950:	d037      	beq.n	80059c2 <_malloc_r+0xe6>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	442b      	add	r3, r5
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	f8d8 3000 	ldr.w	r3, [r8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d038      	beq.n	80059d2 <_malloc_r+0xf6>
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	42a2      	cmp	r2, r4
 8005964:	d12b      	bne.n	80059be <_malloc_r+0xe2>
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	e00f      	b.n	800598c <_malloc_r+0xb0>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	1b52      	subs	r2, r2, r5
 8005970:	d41f      	bmi.n	80059b2 <_malloc_r+0xd6>
 8005972:	2a0b      	cmp	r2, #11
 8005974:	d917      	bls.n	80059a6 <_malloc_r+0xca>
 8005976:	1961      	adds	r1, r4, r5
 8005978:	42a3      	cmp	r3, r4
 800597a:	6025      	str	r5, [r4, #0]
 800597c:	bf18      	it	ne
 800597e:	6059      	strne	r1, [r3, #4]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	bf08      	it	eq
 8005984:	f8c8 1000 	streq.w	r1, [r8]
 8005988:	5162      	str	r2, [r4, r5]
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	4638      	mov	r0, r7
 800598e:	f104 060b 	add.w	r6, r4, #11
 8005992:	f000 f829 	bl	80059e8 <__malloc_unlock>
 8005996:	f026 0607 	bic.w	r6, r6, #7
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	1af2      	subs	r2, r6, r3
 800599e:	d0ae      	beq.n	80058fe <_malloc_r+0x22>
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7ab      	b.n	80058fe <_malloc_r+0x22>
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	6862      	ldr	r2, [r4, #4]
 80059aa:	d1dd      	bne.n	8005968 <_malloc_r+0x8c>
 80059ac:	f8c8 2000 	str.w	r2, [r8]
 80059b0:	e7ec      	b.n	800598c <_malloc_r+0xb0>
 80059b2:	4623      	mov	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7ac      	b.n	8005912 <_malloc_r+0x36>
 80059b8:	4634      	mov	r4, r6
 80059ba:	6876      	ldr	r6, [r6, #4]
 80059bc:	e7b4      	b.n	8005928 <_malloc_r+0x4c>
 80059be:	4613      	mov	r3, r2
 80059c0:	e7cc      	b.n	800595c <_malloc_r+0x80>
 80059c2:	230c      	movs	r3, #12
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	4638      	mov	r0, r7
 80059c8:	f000 f80e 	bl	80059e8 <__malloc_unlock>
 80059cc:	e797      	b.n	80058fe <_malloc_r+0x22>
 80059ce:	6025      	str	r5, [r4, #0]
 80059d0:	e7dc      	b.n	800598c <_malloc_r+0xb0>
 80059d2:	605b      	str	r3, [r3, #4]
 80059d4:	deff      	udf	#255	; 0xff
 80059d6:	bf00      	nop
 80059d8:	20004268 	.word	0x20004268

080059dc <__malloc_lock>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__malloc_lock+0x8>)
 80059de:	f7ff bf01 	b.w	80057e4 <__retarget_lock_acquire_recursive>
 80059e2:	bf00      	nop
 80059e4:	20004264 	.word	0x20004264

080059e8 <__malloc_unlock>:
 80059e8:	4801      	ldr	r0, [pc, #4]	; (80059f0 <__malloc_unlock+0x8>)
 80059ea:	f7ff befc 	b.w	80057e6 <__retarget_lock_release_recursive>
 80059ee:	bf00      	nop
 80059f0:	20004264 	.word	0x20004264

080059f4 <__sfputc_r>:
 80059f4:	6893      	ldr	r3, [r2, #8]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	b410      	push	{r4}
 80059fc:	6093      	str	r3, [r2, #8]
 80059fe:	da08      	bge.n	8005a12 <__sfputc_r+0x1e>
 8005a00:	6994      	ldr	r4, [r2, #24]
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	db01      	blt.n	8005a0a <__sfputc_r+0x16>
 8005a06:	290a      	cmp	r1, #10
 8005a08:	d103      	bne.n	8005a12 <__sfputc_r+0x1e>
 8005a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0e:	f7ff bd86 	b.w	800551e <__swbuf_r>
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	1c58      	adds	r0, r3, #1
 8005a16:	6010      	str	r0, [r2, #0]
 8005a18:	7019      	strb	r1, [r3, #0]
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <__sfputs_r>:
 8005a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	18d5      	adds	r5, r2, r3
 8005a2c:	42ac      	cmp	r4, r5
 8005a2e:	d101      	bne.n	8005a34 <__sfputs_r+0x12>
 8005a30:	2000      	movs	r0, #0
 8005a32:	e007      	b.n	8005a44 <__sfputs_r+0x22>
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	463a      	mov	r2, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7ff ffda 	bl	80059f4 <__sfputc_r>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d1f3      	bne.n	8005a2c <__sfputs_r+0xa>
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a48 <_vfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	b09d      	sub	sp, #116	; 0x74
 8005a50:	4614      	mov	r4, r2
 8005a52:	4698      	mov	r8, r3
 8005a54:	4606      	mov	r6, r0
 8005a56:	b118      	cbz	r0, 8005a60 <_vfiprintf_r+0x18>
 8005a58:	6a03      	ldr	r3, [r0, #32]
 8005a5a:	b90b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x18>
 8005a5c:	f7ff fc78 	bl	8005350 <__sinit>
 8005a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d405      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	059a      	lsls	r2, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_vfiprintf_r+0x2a>
 8005a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a6e:	f7ff feb9 	bl	80057e4 <__retarget_lock_acquire_recursive>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	d501      	bpl.n	8005a7c <_vfiprintf_r+0x34>
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	b99b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x5c>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff fd8a 	bl	8005598 <__swsetup_r>
 8005a84:	b170      	cbz	r0, 8005aa4 <_vfiprintf_r+0x5c>
 8005a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a88:	07dc      	lsls	r4, r3, #31
 8005a8a:	d504      	bpl.n	8005a96 <_vfiprintf_r+0x4e>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	; 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d4f7      	bmi.n	8005a8c <_vfiprintf_r+0x44>
 8005a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9e:	f7ff fea2 	bl	80057e6 <__retarget_lock_release_recursive>
 8005aa2:	e7f3      	b.n	8005a8c <_vfiprintf_r+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab2:	2330      	movs	r3, #48	; 0x30
 8005ab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c68 <_vfiprintf_r+0x220>
 8005ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005abc:	f04f 0901 	mov.w	r9, #1
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	469a      	mov	sl, r3
 8005ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac8:	b10a      	cbz	r2, 8005ace <_vfiprintf_r+0x86>
 8005aca:	2a25      	cmp	r2, #37	; 0x25
 8005acc:	d1f9      	bne.n	8005ac2 <_vfiprintf_r+0x7a>
 8005ace:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0xa4>
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7ff ffa1 	bl	8005a22 <__sfputs_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f000 80a9 	beq.w	8005c38 <_vfiprintf_r+0x1f0>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae8:	445a      	add	r2, fp
 8005aea:	9209      	str	r2, [sp, #36]	; 0x24
 8005aec:	f89a 3000 	ldrb.w	r3, [sl]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a1 	beq.w	8005c38 <_vfiprintf_r+0x1f0>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f04f 32ff 	mov.w	r2, #4294967295
 8005afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9307      	str	r3, [sp, #28]
 8005b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0e:	4654      	mov	r4, sl
 8005b10:	2205      	movs	r2, #5
 8005b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b16:	4854      	ldr	r0, [pc, #336]	; (8005c68 <_vfiprintf_r+0x220>)
 8005b18:	f7fa fb62 	bl	80001e0 <memchr>
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	b9d8      	cbnz	r0, 8005b58 <_vfiprintf_r+0x110>
 8005b20:	06d1      	lsls	r1, r2, #27
 8005b22:	bf44      	itt	mi
 8005b24:	2320      	movmi	r3, #32
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2a:	0713      	lsls	r3, r2, #28
 8005b2c:	bf44      	itt	mi
 8005b2e:	232b      	movmi	r3, #43	; 0x2b
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3a:	d015      	beq.n	8005b68 <_vfiprintf_r+0x120>
 8005b3c:	9a07      	ldr	r2, [sp, #28]
 8005b3e:	4654      	mov	r4, sl
 8005b40:	2000      	movs	r0, #0
 8005b42:	f04f 0c0a 	mov.w	ip, #10
 8005b46:	4621      	mov	r1, r4
 8005b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4c:	3b30      	subs	r3, #48	; 0x30
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d94d      	bls.n	8005bee <_vfiprintf_r+0x1a6>
 8005b52:	b1b0      	cbz	r0, 8005b82 <_vfiprintf_r+0x13a>
 8005b54:	9207      	str	r2, [sp, #28]
 8005b56:	e014      	b.n	8005b82 <_vfiprintf_r+0x13a>
 8005b58:	eba0 0308 	sub.w	r3, r0, r8
 8005b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	46a2      	mov	sl, r4
 8005b66:	e7d2      	b.n	8005b0e <_vfiprintf_r+0xc6>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	1d19      	adds	r1, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbb      	ittet	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7a:	9307      	strge	r3, [sp, #28]
 8005b7c:	9307      	strlt	r3, [sp, #28]
 8005b7e:	bfb8      	it	lt
 8005b80:	9204      	strlt	r2, [sp, #16]
 8005b82:	7823      	ldrb	r3, [r4, #0]
 8005b84:	2b2e      	cmp	r3, #46	; 0x2e
 8005b86:	d10c      	bne.n	8005ba2 <_vfiprintf_r+0x15a>
 8005b88:	7863      	ldrb	r3, [r4, #1]
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d134      	bne.n	8005bf8 <_vfiprintf_r+0x1b0>
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	9203      	str	r2, [sp, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bfb8      	it	lt
 8005b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9e:	3402      	adds	r4, #2
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c78 <_vfiprintf_r+0x230>
 8005ba6:	7821      	ldrb	r1, [r4, #0]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4650      	mov	r0, sl
 8005bac:	f7fa fb18 	bl	80001e0 <memchr>
 8005bb0:	b138      	cbz	r0, 8005bc2 <_vfiprintf_r+0x17a>
 8005bb2:	9b04      	ldr	r3, [sp, #16]
 8005bb4:	eba0 000a 	sub.w	r0, r0, sl
 8005bb8:	2240      	movs	r2, #64	; 0x40
 8005bba:	4082      	lsls	r2, r0
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc6:	4829      	ldr	r0, [pc, #164]	; (8005c6c <_vfiprintf_r+0x224>)
 8005bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bcc:	2206      	movs	r2, #6
 8005bce:	f7fa fb07 	bl	80001e0 <memchr>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d03f      	beq.n	8005c56 <_vfiprintf_r+0x20e>
 8005bd6:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <_vfiprintf_r+0x228>)
 8005bd8:	bb1b      	cbnz	r3, 8005c22 <_vfiprintf_r+0x1da>
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	3307      	adds	r3, #7
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	3308      	adds	r3, #8
 8005be4:	9303      	str	r3, [sp, #12]
 8005be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be8:	443b      	add	r3, r7
 8005bea:	9309      	str	r3, [sp, #36]	; 0x24
 8005bec:	e768      	b.n	8005ac0 <_vfiprintf_r+0x78>
 8005bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e7a6      	b.n	8005b46 <_vfiprintf_r+0xfe>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0c0a 	mov.w	ip, #10
 8005c04:	4620      	mov	r0, r4
 8005c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0a:	3a30      	subs	r2, #48	; 0x30
 8005c0c:	2a09      	cmp	r2, #9
 8005c0e:	d903      	bls.n	8005c18 <_vfiprintf_r+0x1d0>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0c6      	beq.n	8005ba2 <_vfiprintf_r+0x15a>
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	e7c4      	b.n	8005ba2 <_vfiprintf_r+0x15a>
 8005c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7f0      	b.n	8005c04 <_vfiprintf_r+0x1bc>
 8005c22:	ab03      	add	r3, sp, #12
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	462a      	mov	r2, r5
 8005c28:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <_vfiprintf_r+0x22c>)
 8005c2a:	a904      	add	r1, sp, #16
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f3af 8000 	nop.w
 8005c32:	4607      	mov	r7, r0
 8005c34:	1c78      	adds	r0, r7, #1
 8005c36:	d1d6      	bne.n	8005be6 <_vfiprintf_r+0x19e>
 8005c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x202>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x202>
 8005c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c46:	f7ff fdce 	bl	80057e6 <__retarget_lock_release_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	f53f af1d 	bmi.w	8005a8c <_vfiprintf_r+0x44>
 8005c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c54:	e71c      	b.n	8005a90 <_vfiprintf_r+0x48>
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_vfiprintf_r+0x22c>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f879 	bl	8005d58 <_printf_i>
 8005c66:	e7e4      	b.n	8005c32 <_vfiprintf_r+0x1ea>
 8005c68:	080063c8 	.word	0x080063c8
 8005c6c:	080063d2 	.word	0x080063d2
 8005c70:	00000000 	.word	0x00000000
 8005c74:	08005a23 	.word	0x08005a23
 8005c78:	080063ce 	.word	0x080063ce

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d4 	beq.w	8005f22 <_printf_i+0x1ca>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80c0 	beq.w	8005f00 <_printf_i+0x1a8>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f09 	.word	0x08005f09
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005ec3 	.word	0x08005ec3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f2b 	.word	0x08005f2b
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ecb 	.word	0x08005ecb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09f      	b.n	8005f44 <_printf_i+0x1ec>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	0607      	lsls	r7, r0, #24
 8005e0a:	f103 0104 	add.w	r1, r3, #4
 8005e0e:	6029      	str	r1, [r5, #0]
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0xbe>
 8005e12:	681e      	ldr	r6, [r3, #0]
 8005e14:	e003      	b.n	8005e1e <_printf_i+0xc6>
 8005e16:	0646      	lsls	r6, r0, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0xba>
 8005e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	da03      	bge.n	8005e2a <_printf_i+0xd2>
 8005e22:	232d      	movs	r3, #45	; 0x2d
 8005e24:	4276      	negs	r6, r6
 8005e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2a:	485a      	ldr	r0, [pc, #360]	; (8005f94 <_printf_i+0x23c>)
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	e012      	b.n	8005e56 <_printf_i+0xfe>
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	1d19      	adds	r1, r3, #4
 8005e36:	6029      	str	r1, [r5, #0]
 8005e38:	0605      	lsls	r5, r0, #24
 8005e3a:	d501      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e3c:	681e      	ldr	r6, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <_printf_i+0xee>
 8005e40:	0641      	lsls	r1, r0, #25
 8005e42:	d5fb      	bpl.n	8005e3c <_printf_i+0xe4>
 8005e44:	881e      	ldrh	r6, [r3, #0]
 8005e46:	4853      	ldr	r0, [pc, #332]	; (8005f94 <_printf_i+0x23c>)
 8005e48:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2308      	moveq	r3, #8
 8005e4e:	230a      	movne	r3, #10
 8005e50:	2100      	movs	r1, #0
 8005e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e56:	6865      	ldr	r5, [r4, #4]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	bfa2      	ittt	ge
 8005e5e:	6821      	ldrge	r1, [r4, #0]
 8005e60:	f021 0104 	bicge.w	r1, r1, #4
 8005e64:	6021      	strge	r1, [r4, #0]
 8005e66:	b90e      	cbnz	r6, 8005e6c <_printf_i+0x114>
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	d04b      	beq.n	8005f04 <_printf_i+0x1ac>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e72:	fb03 6711 	mls	r7, r3, r1, r6
 8005e76:	5dc7      	ldrb	r7, [r0, r7]
 8005e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	42bb      	cmp	r3, r7
 8005e80:	460e      	mov	r6, r1
 8005e82:	d9f4      	bls.n	8005e6e <_printf_i+0x116>
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d10b      	bne.n	8005ea0 <_printf_i+0x148>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07de      	lsls	r6, r3, #31
 8005e8c:	d508      	bpl.n	8005ea0 <_printf_i+0x148>
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6861      	ldr	r1, [r4, #4]
 8005e92:	4299      	cmp	r1, r3
 8005e94:	bfde      	ittt	le
 8005e96:	2330      	movle	r3, #48	; 0x30
 8005e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea0:	1b52      	subs	r2, r2, r5
 8005ea2:	6122      	str	r2, [r4, #16]
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	aa03      	add	r2, sp, #12
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fee4 	bl	8005c7c <_printf_common>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d14a      	bne.n	8005f4e <_printf_i+0x1f6>
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ebc:	b004      	add	sp, #16
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f043 0320 	orr.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	4833      	ldr	r0, [pc, #204]	; (8005f98 <_printf_i+0x240>)
 8005ecc:	2778      	movs	r7, #120	; 0x78
 8005ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	6829      	ldr	r1, [r5, #0]
 8005ed6:	061f      	lsls	r7, r3, #24
 8005ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0x18c>
 8005ede:	065f      	lsls	r7, r3, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2b6      	uxthmi	r6, r6
 8005ee4:	07df      	lsls	r7, r3, #31
 8005ee6:	bf48      	it	mi
 8005ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8005eec:	6029      	str	r1, [r5, #0]
 8005eee:	bf48      	it	mi
 8005ef0:	6023      	strmi	r3, [r4, #0]
 8005ef2:	b91e      	cbnz	r6, 8005efc <_printf_i+0x1a4>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	f023 0320 	bic.w	r3, r3, #32
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	2310      	movs	r3, #16
 8005efe:	e7a7      	b.n	8005e50 <_printf_i+0xf8>
 8005f00:	4824      	ldr	r0, [pc, #144]	; (8005f94 <_printf_i+0x23c>)
 8005f02:	e7e4      	b.n	8005ece <_printf_i+0x176>
 8005f04:	4615      	mov	r5, r2
 8005f06:	e7bd      	b.n	8005e84 <_printf_i+0x12c>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6826      	ldr	r6, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6028      	str	r0, [r5, #0]
 8005f12:	0635      	lsls	r5, r6, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1c4>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1ca>
 8005f1c:	0670      	lsls	r0, r6, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1c0>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4615      	mov	r5, r2
 8005f28:	e7bc      	b.n	8005ea4 <_printf_i+0x14c>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7fa f952 	bl	80001e0 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1ea>
 8005f3e:	1b40      	subs	r0, r0, r5
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4c:	e7aa      	b.n	8005ea4 <_printf_i+0x14c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ad      	beq.n	8005eb8 <_printf_i+0x160>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x232>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a6      	b.n	8005ebc <_printf_i+0x164>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09d      	beq.n	8005eb8 <_printf_i+0x160>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x216>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x20a>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x226>
 8005f92:	bf00      	nop
 8005f94:	080063d9 	.word	0x080063d9
 8005f98:	080063ea 	.word	0x080063ea

08005f9c <__sflush_r>:
 8005f9c:	898a      	ldrh	r2, [r1, #12]
 8005f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	0710      	lsls	r0, r2, #28
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	d458      	bmi.n	800605c <__sflush_r+0xc0>
 8005faa:	684b      	ldr	r3, [r1, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc05      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dc02      	bgt.n	8005fbc <__sflush_r+0x20>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	d0f9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fc8:	682f      	ldr	r7, [r5, #0]
 8005fca:	6a21      	ldr	r1, [r4, #32]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	d032      	beq.n	8006036 <__sflush_r+0x9a>
 8005fd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	075a      	lsls	r2, r3, #29
 8005fd6:	d505      	bpl.n	8005fe4 <__sflush_r+0x48>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	1ac0      	subs	r0, r0, r3
 8005fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fde:	b10b      	cbz	r3, 8005fe4 <__sflush_r+0x48>
 8005fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe2:	1ac0      	subs	r0, r0, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fea:	6a21      	ldr	r1, [r4, #32]
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b0      	blx	r6
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	d106      	bne.n	8006004 <__sflush_r+0x68>
 8005ff6:	6829      	ldr	r1, [r5, #0]
 8005ff8:	291d      	cmp	r1, #29
 8005ffa:	d82b      	bhi.n	8006054 <__sflush_r+0xb8>
 8005ffc:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <__sflush_r+0x108>)
 8005ffe:	410a      	asrs	r2, r1
 8006000:	07d6      	lsls	r6, r2, #31
 8006002:	d427      	bmi.n	8006054 <__sflush_r+0xb8>
 8006004:	2200      	movs	r2, #0
 8006006:	6062      	str	r2, [r4, #4]
 8006008:	04d9      	lsls	r1, r3, #19
 800600a:	6922      	ldr	r2, [r4, #16]
 800600c:	6022      	str	r2, [r4, #0]
 800600e:	d504      	bpl.n	800601a <__sflush_r+0x7e>
 8006010:	1c42      	adds	r2, r0, #1
 8006012:	d101      	bne.n	8006018 <__sflush_r+0x7c>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b903      	cbnz	r3, 800601a <__sflush_r+0x7e>
 8006018:	6560      	str	r0, [r4, #84]	; 0x54
 800601a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800601c:	602f      	str	r7, [r5, #0]
 800601e:	2900      	cmp	r1, #0
 8006020:	d0c9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006026:	4299      	cmp	r1, r3
 8006028:	d002      	beq.n	8006030 <__sflush_r+0x94>
 800602a:	4628      	mov	r0, r5
 800602c:	f7ff fbea 	bl	8005804 <_free_r>
 8006030:	2000      	movs	r0, #0
 8006032:	6360      	str	r0, [r4, #52]	; 0x34
 8006034:	e7c0      	b.n	8005fb8 <__sflush_r+0x1c>
 8006036:	2301      	movs	r3, #1
 8006038:	4628      	mov	r0, r5
 800603a:	47b0      	blx	r6
 800603c:	1c41      	adds	r1, r0, #1
 800603e:	d1c8      	bne.n	8005fd2 <__sflush_r+0x36>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0c5      	beq.n	8005fd2 <__sflush_r+0x36>
 8006046:	2b1d      	cmp	r3, #29
 8006048:	d001      	beq.n	800604e <__sflush_r+0xb2>
 800604a:	2b16      	cmp	r3, #22
 800604c:	d101      	bne.n	8006052 <__sflush_r+0xb6>
 800604e:	602f      	str	r7, [r5, #0]
 8006050:	e7b1      	b.n	8005fb6 <__sflush_r+0x1a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	e7ad      	b.n	8005fb8 <__sflush_r+0x1c>
 800605c:	690f      	ldr	r7, [r1, #16]
 800605e:	2f00      	cmp	r7, #0
 8006060:	d0a9      	beq.n	8005fb6 <__sflush_r+0x1a>
 8006062:	0793      	lsls	r3, r2, #30
 8006064:	680e      	ldr	r6, [r1, #0]
 8006066:	bf08      	it	eq
 8006068:	694b      	ldreq	r3, [r1, #20]
 800606a:	600f      	str	r7, [r1, #0]
 800606c:	bf18      	it	ne
 800606e:	2300      	movne	r3, #0
 8006070:	eba6 0807 	sub.w	r8, r6, r7
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	f1b8 0f00 	cmp.w	r8, #0
 800607a:	dd9c      	ble.n	8005fb6 <__sflush_r+0x1a>
 800607c:	6a21      	ldr	r1, [r4, #32]
 800607e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006080:	4643      	mov	r3, r8
 8006082:	463a      	mov	r2, r7
 8006084:	4628      	mov	r0, r5
 8006086:	47b0      	blx	r6
 8006088:	2800      	cmp	r0, #0
 800608a:	dc06      	bgt.n	800609a <__sflush_r+0xfe>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	e78e      	b.n	8005fb8 <__sflush_r+0x1c>
 800609a:	4407      	add	r7, r0
 800609c:	eba8 0800 	sub.w	r8, r8, r0
 80060a0:	e7e9      	b.n	8006076 <__sflush_r+0xda>
 80060a2:	bf00      	nop
 80060a4:	dfbffffe 	.word	0xdfbffffe

080060a8 <_fflush_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	690b      	ldr	r3, [r1, #16]
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b913      	cbnz	r3, 80060b8 <_fflush_r+0x10>
 80060b2:	2500      	movs	r5, #0
 80060b4:	4628      	mov	r0, r5
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	b118      	cbz	r0, 80060c2 <_fflush_r+0x1a>
 80060ba:	6a03      	ldr	r3, [r0, #32]
 80060bc:	b90b      	cbnz	r3, 80060c2 <_fflush_r+0x1a>
 80060be:	f7ff f947 	bl	8005350 <__sinit>
 80060c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f3      	beq.n	80060b2 <_fflush_r+0xa>
 80060ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060cc:	07d0      	lsls	r0, r2, #31
 80060ce:	d404      	bmi.n	80060da <_fflush_r+0x32>
 80060d0:	0599      	lsls	r1, r3, #22
 80060d2:	d402      	bmi.n	80060da <_fflush_r+0x32>
 80060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d6:	f7ff fb85 	bl	80057e4 <__retarget_lock_acquire_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	4621      	mov	r1, r4
 80060de:	f7ff ff5d 	bl	8005f9c <__sflush_r>
 80060e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e4:	07da      	lsls	r2, r3, #31
 80060e6:	4605      	mov	r5, r0
 80060e8:	d4e4      	bmi.n	80060b4 <_fflush_r+0xc>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	059b      	lsls	r3, r3, #22
 80060ee:	d4e1      	bmi.n	80060b4 <_fflush_r+0xc>
 80060f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f2:	f7ff fb78 	bl	80057e6 <__retarget_lock_release_recursive>
 80060f6:	e7dd      	b.n	80060b4 <_fflush_r+0xc>

080060f8 <__swhatbuf_r>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	2900      	cmp	r1, #0
 8006102:	b096      	sub	sp, #88	; 0x58
 8006104:	4615      	mov	r5, r2
 8006106:	461e      	mov	r6, r3
 8006108:	da0d      	bge.n	8006126 <__swhatbuf_r+0x2e>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	bf0c      	ite	eq
 8006116:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800611a:	2340      	movne	r3, #64	; 0x40
 800611c:	2000      	movs	r0, #0
 800611e:	6031      	str	r1, [r6, #0]
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	b016      	add	sp, #88	; 0x58
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	466a      	mov	r2, sp
 8006128:	f000 f848 	bl	80061bc <_fstat_r>
 800612c:	2800      	cmp	r0, #0
 800612e:	dbec      	blt.n	800610a <__swhatbuf_r+0x12>
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006136:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800613a:	4259      	negs	r1, r3
 800613c:	4159      	adcs	r1, r3
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	e7eb      	b.n	800611c <__swhatbuf_r+0x24>

08006144 <__smakebuf_r>:
 8006144:	898b      	ldrh	r3, [r1, #12]
 8006146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006148:	079d      	lsls	r5, r3, #30
 800614a:	4606      	mov	r6, r0
 800614c:	460c      	mov	r4, r1
 800614e:	d507      	bpl.n	8006160 <__smakebuf_r+0x1c>
 8006150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	2301      	movs	r3, #1
 800615a:	6163      	str	r3, [r4, #20]
 800615c:	b002      	add	sp, #8
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	ab01      	add	r3, sp, #4
 8006162:	466a      	mov	r2, sp
 8006164:	f7ff ffc8 	bl	80060f8 <__swhatbuf_r>
 8006168:	9900      	ldr	r1, [sp, #0]
 800616a:	4605      	mov	r5, r0
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff fbb5 	bl	80058dc <_malloc_r>
 8006172:	b948      	cbnz	r0, 8006188 <__smakebuf_r+0x44>
 8006174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006178:	059a      	lsls	r2, r3, #22
 800617a:	d4ef      	bmi.n	800615c <__smakebuf_r+0x18>
 800617c:	f023 0303 	bic.w	r3, r3, #3
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	e7e3      	b.n	8006150 <__smakebuf_r+0xc>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	9b00      	ldr	r3, [sp, #0]
 8006194:	6163      	str	r3, [r4, #20]
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	6120      	str	r0, [r4, #16]
 800619a:	b15b      	cbz	r3, 80061b4 <__smakebuf_r+0x70>
 800619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f81d 	bl	80061e0 <_isatty_r>
 80061a6:	b128      	cbz	r0, 80061b4 <__smakebuf_r+0x70>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	431d      	orrs	r5, r3
 80061b8:	81a5      	strh	r5, [r4, #12]
 80061ba:	e7cf      	b.n	800615c <__smakebuf_r+0x18>

080061bc <_fstat_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_fstat_r+0x20>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f7fa fdc4 	bl	8000d56 <_fstat>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d102      	bne.n	80061d8 <_fstat_r+0x1c>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <_fstat_r+0x1c>
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	bd38      	pop	{r3, r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	20004260 	.word	0x20004260

080061e0 <_isatty_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	; (80061fc <_isatty_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fa fdc3 	bl	8000d76 <_isatty>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_isatty_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_isatty_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20004260 	.word	0x20004260

08006200 <_sbrk_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	; (800621c <_sbrk_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fa fdcc 	bl	8000da8 <_sbrk>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_sbrk_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_sbrk_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20004260 	.word	0x20004260

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr
